{"task_id": "BigCodeBench/0", "solution": "import itertools\nfrom random import shuffle\ndef task_func(numbers=list(range(1, 11))):\n    \"\"\"\n    Calculates the average of the sums of absolute differences between each pair of consecutive numbers \n    for all permutations of a given list. Each permutation is shuffled before calculating the differences.\n\n    Args:\n    - numbers (list): A list of numbers. Default is numbers from 1 to 10.\n    \n    Returns:\n    float: The average of the sums of absolute differences for each shuffled permutation of the list.\n    \"\"\"\n    total_sum = 0\n    for perm in itertools.permutations(numbers):\n        shuffle(perm)  # Shuffle the permutation\n        total_sum += sum(abs(a - b) for a, b in zip(perm[:-1], perm[1:]))\n    return total_sum / len(list(itertools.permutations(numbers)))"}
{"task_id": "BigCodeBench/1", "solution": "import collections\nimport random\nimport string\ndef task_func(length=100):\n    if length < 0:\n        raise ValueError(\"Length must be a non-negative number.\")\n    \n    # Generate a random string of specified length with uppercase and lowercase letters\n    random_string = ''.join(random.choice(string.ascii_letters) for _ in range(length))\n    \n    # Count the occurrence of each character in the string\n    char_count = collections.Counter(random_string)\n    \n    return dict(char_count)"}
{"task_id": "BigCodeBench/2", "solution": "import random\nimport statistics\ndef task_func(LETTERS):\n    # Generate a dictionary with random integers as values for each key in LETTERS\n    random_dict = {letter: [random.randint(1, 100) for _ in range(10)] for letter in LETTERS}\n    \n    # Calculate the mean for each list of integers and sort the dictionary by the mean in descending order\n    sorted_dict = dict(sorted(random_dict.items(), key=lambda item: statistics.mean(item[1]), reverse=True))\n    \n    return sorted_dict"}
{"task_id": "BigCodeBench/3", "solution": "import random\nimport numpy as np\ndef task_func(LETTERS):\n    \"\"\"\n    Create a dictionary where keys are specified letters and values are lists of random integers.\n    Then calculate the mean of these integers for each key and return a dictionary of these means.\n    \"\"\"\n    random_int_dict = {letter: [random.randint(0, 100) for _ in range(1, random.randint(1, 11))] for letter in LETTERS}\n    mean_dict = {key: np.mean(values) for key, values in random_int_dict.items()}\n    return mean_dict\nLETTERS = ['a', 'b', 'c']"}
{"task_id": "BigCodeBench/4", "solution": "from collections import Counter\nimport itertools\ndef task_func(d):\n    \"\"\"\n    Count the occurrence of each integer in the values of the input dictionary.\n\n    Parameters:\n    d (dict): A dictionary where each key is a string and the value is a list of integers.\n\n    Returns:\n    dict: A dictionary with counts of integers across all lists in the input dictionary.\n    \"\"\"\n    # Flatten the list of integers from all dictionary values\n    flattened_list = list(itertools.chain.from_iterable(d.values()))\n    \n    # Use Counter to count the occurrence of each integer\n    counts = Counter(flattened_list)\n    \n    return counts"}
{"task_id": "BigCodeBench/5", "solution": "import random\nimport math\ndef task_func(LETTERS=[chr(i) for i in range(97, 123)]):\n    \"\"\"\n    The function as described in the problem statement.\n    \"\"\"\n    random.seed(42)  # For reproducible results\n    sd_dict = {}\n    \n    for letter in LETTERS:\n        # Generate a random list of integers for each letter\n        random_integers = [random.randint(0, 100) for _ in range(random.randint(1, 10))]\n        # Calculate the population standard deviation\n        n = len(random_integers)\n        mean = sum(random_integers) / n\n        variance = sum((x - mean) ** 2 for x in random_integers) / n\n        sd = math.sqrt(variance)\n        sd_dict[letter] = sd\n    \n    return sd_dict"}
{"task_id": "BigCodeBench/6", "solution": "import os\nimport re\nimport glob\nfrom pathlib import Path\ndef task_func(pattern, log_dir='/var/log/'):\n    \"\"\"\n    The function implementation remains the same as provided.\n    \"\"\"\n    # Use glob to find files matching the pattern\n    matching_files = glob.glob(os.path.join(log_dir, pattern))\n    \n    # If no files match, return None\n    if not matching_files:\n        return None\n    \n    # Get the most recent file by modification time\n    most_recent_file = max(matching_files, key=lambda f: Path(f).stat().st_mtime)\n    \n    return most_recent_file"}
{"task_id": "BigCodeBench/7", "solution": "import csv\nimport collections\nimport operator\ndef task_func(csv_file_path):\n    \"\"\"\n    The function to find the best-selling product from a given CSV file.\n    \"\"\"\n    # Initialize a dictionary to hold product totals\n    product_totals = collections.defaultdict(int)\n    \n    # Open the CSV file\n    with open(csv_file_path, 'r') as csv_file:\n        # Create a CSV reader\n        reader = csv.DictReader(csv_file)\n        \n        # Iterate over each row\n        for row in reader:\n            # Add the quantity to the product's total\n            product_totals[row['product']] += int(row['quantity'])\n    \n    # Find the product with the highest total\n    top_product = max(product_totals.items(), key=operator.itemgetter(1))[0]\n    \n    return top_product"}
{"task_id": "BigCodeBench/8", "solution": "from collections import Counter\nimport itertools\nfrom random import randint\ndef task_func(T1, RANGE=100):\n    # Convert string representations of numbers in tuples to integers\n    flat_list = [int(num) for sublist in T1 for num in sublist]\n    # Calculate the total sum to determine the number of random integers\n    total_sum = sum(flat_list)\n    \n    # Generate a list of random integers\n    random_integers = [randint(0, RANGE) for _ in range(total_sum)]\n    \n    # Count the occurrences of each number using Counter\n    counts = Counter(random_integers)\n    \n    return counts"}
{"task_id": "BigCodeBench/9", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and visualize the data using a bar chart.\n    - The title of the barplot should be set to 'Category vs Value'.\n    \n    Parameters:\n    list_of_pairs (list of tuple): Each tuple contains:\n        - str: Category name.\n        - int: Associated value.\n    \n    Returns:\n    tuple:\n        - DataFrame: A pandas DataFrame with columns 'Category' and 'Value'.\n        - Axes: A matplotlib Axes displaying a bar chart of categories vs. values.\n    \"\"\"\n    # Create DataFrame\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    \n    # Create a barplot using seaborn\n    ax = sns.barplot(x='Category', y='Value', data=df)\n    ax.set_title('Category vs Value')  # Set the title of the barplot\n    \n    # Return DataFrame and Axes object\n    return df, ax"}
{"task_id": "BigCodeBench/10", "solution": "import numpy as np\nimport itertools\nimport random\nimport statistics\ndef task_func(T1, RANGE=100):\n    if not T1:\n        raise statistics.StatisticsError(\"Input cannot be empty.\")\n    \n    # Convert string representations of integers to integers\n    converted_ints = [int(item) for sublist in T1 for item in sublist]\n    \n    # Generate a list of random integers based on the sum of converted integers\n    random_ints = [random.randint(0, RANGE) for _ in range(sum(converted_ints))]\n    \n    # Calculate and return the mean, median, and mode\n    mean = np.mean(random_ints)\n    median = np.median(random_ints)\n    mode = statistics.mode(random_ints)\n    \n    return mean, median, mode"}
{"task_id": "BigCodeBench/11", "solution": "import numpy as np\nimport itertools\nimport random\ndef task_func(T1, max_value=100):\n    \"\"\"\n    Converts elements in 'T1', a tuple of tuples containing string representations \n    of integers, to integers and creates a list of random integers. The size of the \n    list equals the sum of these integers. Returns the 25th, 50th, and 75th percentiles \n    of this list.\n\n    Parameters:\n    T1 (tuple of tuple of str): A tuple of tuples, each containing string representations of integers.\n    max_value (int): The upper bound for random number generation, exclusive. Default is 100.\n    \n    Returns:\n    tuple: A tuple (p25, p50, p75) representing the 25th, 50th, and 75th percentiles of the list.\n    \"\"\"\n    # Convert string representations of integers to integers\n    flat_list = [int(item) for sublist in T1 for item in sublist]\n    \n    # Generate a list of random integers\n    random_list = [random.randint(0, max_value - 1) for _ in range(sum(flat_list))]\n    \n    # Calculate percentiles\n    percentiles = np.percentile(random_list, [25, 50, 75])\n    \n    return tuple(percentiles)"}
{"task_id": "BigCodeBench/12", "solution": "import subprocess\nimport os\nimport json\nfrom datetime import datetime\ndef task_func(script_name='backup.sh', log_file='/home/user/backup_log.json'):\n    \"\"\"\n    Detailed function as per the description.\n    \"\"\"\n    if not os.path.exists(script_name):\n        raise FileNotFoundError(f\"The script file {script_name} does not exist.\")\n    \n    start_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    \n    try:\n        # Running the shell script\n        exit_status = subprocess.call(script_name, shell=True)\n    except Exception as e:\n        raise RuntimeError(f\"Error executing the script: {e}\")\n    \n    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    \n    # Prepare log data\n    log_data = {\n        'start_time': start_time,\n        'end_time': end_time,\n        'exit_status': exit_status\n    }\n    \n    # Writing to JSON log file\n    with open(log_file, 'w') as log:\n        json.dump(log_data, log, indent=4)\n    \n    return log_data"}
{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    try:\n        # Establishing FTP connection\n        with ftplib.FTP(ftp_server) as ftp:\n            print(f\"Connected to {ftp_server}\")\n            try:\n                # Logging into FTP server\n                ftp.login(user=ftp_user, passwd=ftp_password)\n                print(f\"Logged into {ftp_server} as {ftp_user}\")\n            except ftplib.all_errors as e:\n                print(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n                return []\n            \n            try:\n                # Changing to the specified directory\n                ftp.cwd(ftp_dir)\n                print(f\"Changed to directory {ftp_dir} on {ftp_server}\")\n            except ftplib.all_errors as e:\n                print(f\"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\")\n                return []\n            \n            # Getting list of files in the directory\n            file_list = ftp.nlst()\n            print(f\"Files to download: {file_list}\")\n            \n            # Downloading each file using wget. Note: wget is not used in a subprocess in this example due to complexity.\n            # Instead, we simulate the download by listing the files.\n            # In a real scenario, you would use subprocess to call wget or use ftplib to download files.\n            downloaded_files = []\n            for file in file_list:\n                # Simulated download process\n                downloaded_files.append(file)\n                print(f\"Downloaded: {file}\")\n                \n            return downloaded_files\n            \n    except ftplib.all_errors as e:\n        print(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n        return []"}
{"task_id": "BigCodeBench/14", "solution": "import configparser\nimport os\nimport shutil\nimport zipfile\ndef task_func(config_file_path, archive_dir='/home/user/archive'):\n    \"\"\"\n    The function's docstring is already provided in the question, so it's not duplicated here.\n\n    Additional imports:\n    - zipfile: For creating the ZIP archive.\n    \"\"\"\n\n    # Read configuration\n    config = configparser.ConfigParser()\n    if not os.path.exists(config_file_path):\n        raise FileNotFoundError(f\"Config file not found: {config_file_path}\")\n    config.read(config_file_path)\n    \n    # Get project directory from config\n    project_dir = config.get('Project', 'directory')\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(f\"Project directory not found: {project_dir}\")\n    \n    # Create ZIP file\n    zip_file_name = os.path.basename(project_dir) + '.zip'\n    zip_file_path = os.path.join(archive_dir, zip_file_name)\n    \n    try:\n        with zipfile.ZipFile(zip_file_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n            zipf.setpassword(b'')  # If no password required\n            for root, dirs, files in os.walk(project_dir):\n                for file in files:\n                    zipf.write(os.path.join(root, file))\n        print(f\"Archive created: {zip_file_path}\")\n        return True\n    except Exception as e:\n        raise Exception(f\"Failed to create ZIP archive: {e}\")"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"The file {commands_file_path} does not exist.\")\n    \n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n    \n    output_files = []\n    \n    with open(commands_file_path, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for idx, row in enumerate(reader):\n            if idx == 0 and len(row) > 0 and row[0].startswith('#'):  # Skip if first line is a comment\n                continue\n            command = row[0].strip()\n            output_file_path = os.path.join(output_dir_path, f'command_{idx}_output.txt')\n            \n            try:\n                with open(output_file_path, 'w') as outfile:\n                    subprocess.check_call(command, shell=True, stdout=outfile, stderr=subprocess.STDOUT)\n            except subprocess.CalledProcessError as e:\n                with open(output_file_path, 'w') as outfile:\n                    outfile.write(f\"Command execution failed with error: {e}, Exit Code: {e.returncode}\")\n            \n            output_files.append(output_file_path)\n    \n    return output_files"}
{"task_id": "BigCodeBench/16", "solution": "import os\nimport glob\nimport subprocess\ndef task_func(directory, backup_dir='/path/to/backup'):\n    \"\"\"\n    Backup all '.log' files in a specified directory to a tar.gz file and delete the original files after backup.\n    The backup file is named 'logs_backup.tar.gz' and placed in the specified backup directory.\n    \"\"\"\n    # Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory {directory} does not exist.\")\n    \n    # Find all .log files in the directory\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n    \n    # If no log files are found\n    if not log_files:\n        return 'No logs found to backup'\n    \n    # Create a backup directory if it does not exist\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    \n    # Define the backup file path\n    backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n    \n    # Create a tar.gz backup\n    subprocess.run(['tar', '-czf', backup_file, '-C', directory, '.'], check=True)\n    \n    # Delete original log files\n    for file in log_files:\n        os.remove(file)\n    \n    return backup_file"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    # Find all running processes by their name\n    for proc in psutil.process_iter(['pid', 'name']):\n        if proc.info['name'] == process_name:\n            print(f\"Process {process_name} found.\")\n            proc.terminate()  # Terminate the process\n            time.sleep(2)  # Allow time for termination\n            if proc.status() not in [psutil.STATUS_ZOMBIE, psutil.STATUS_DEAD]:  # Check if terminated\n                proc.kill()  # Force kill if not terminated\n            print(f\"Restarting {process_name}.\")\n            subprocess.Popen([process_name])  # Restart the process\n            return f\"Process found. Restarting {process_name}.\"\n    \n    # If the process is not found, start it\n    print(f\"Process not found. Starting {process_name}.\")\n    subprocess.Popen([process_name])  # Start the process\n    return f\"Process not found. Starting {process_name}.\""}
{"task_id": "BigCodeBench/18", "solution": "import subprocess\nimport csv\nimport glob\nimport random\nimport os\ndef task_func(file):\n    \"\"\"\n    Divide a CSV file into several smaller files and shuffle the lines in each file.\n    \"\"\"\n    if not os.path.isfile(file) or not file.endswith('.csv'):\n        print(f\"Error: {file} is not a valid CSV file or does not exist.\")\n        return []\n\n    try:\n        # Temporary CSV file to store shuffled lines\n        temp_csv = 'temp_shuffled.csv'\n        \n        # Read and shuffle the lines\n        with open(file, 'r') as csvfile:\n            reader = csv.reader(csvfile)\n            lines = list(reader)\n            random.shuffle(lines)\n        \n        # Write shuffled lines to a temporary file\n        with open(temp_csv, 'w', newline='') as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerows(lines)\n        \n        # Split the temporary file into smaller files\n        subprocess.run(['split', '-l', '1000', temp_csv, 'split_'])  # Split into files with 1000 lines each\n        \n        # Get the list of split files\n        split_files = glob.glob('split_*')\n        \n        # Clean up the temporary file\n        os.remove(temp_csv)\n        \n        return split_files\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return []"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\ndef task_func(directory):\n    \"\"\"\n    Zips all files (not including subdirectories) located in the specified directory and returns the path to the created zip file.\n    \n    Parameters:\n    directory (str): The directory path containing the files to be zipped.\n    \n    Returns:\n    str: The path to the generated zip file. Returns None if the directory does not contain any files.\n    \n    Raises:\n    FileNotFoundError: if the specified directory does not exist\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory {directory} does not exist.\")\n        \n    # Check if there are any files directly in the directory\n    files = glob.glob(os.path.join(directory, \"*\"))\n    if not files:\n        print(\"No files found in the directory.\")\n        return None\n    \n    # Ensure all files are not directories\n    files = [file for file in files if os.path.isfile(file)]\n    \n    # Create a zip file name\n    zip_file_path = os.path.join(directory, 'files.zip')\n    \n    # Create a ZipFile object\n    with zipfile.ZipFile(zip_file_path, 'w') as zipf:\n        for file in files:\n            # Get the relative path for the zip file structure\n            relative_path = os.path.relpath(file, directory)\n            zipf.write(file, arcname=relative_path)\n    \n    print(f\"Zip file created at: {zip_file_path}\")\n    return zip_file_path"}
{"task_id": "BigCodeBench/20", "solution": "import ast\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n    \"\"\"\n    Read a CSV file, convert string dict representations to Python dictionaries in a specific column, and visualize data.\n    \n    Parameters:\n    - csv_file (str): Path to the CSV file.\n    \n    Returns:\n    tuple: DataFrame and PairGrid object from Seaborn's pairplot.\n    \"\"\"\n    # Read CSV file\n    df = pd.read_csv(csv_file)\n    \n    # Convert string representations of dictionaries to actual dictionaries\n    if 'dict_column' in df.columns:\n        df['dict_column'] = df['dict_column'].apply(ast.literal_eval)\n    else:\n        raise ValueError(\"Column 'dict_column' not found in the CSV file.\")\n    \n    # For visualization, let's assume we're pairplotting numeric columns (excluding 'dict_column')\n    numeric_cols = df.select_dtypes(include='number').columns.tolist()\n    \n    # If there are no numeric columns, raise an error\n    if not numeric_cols:\n        raise ValueError(\"No numeric columns to plot in the DataFrame.\")\n    \n    # Visualize the data using Seaborn's pairplot\n    ax = sns.pairplot(df[numeric_cols])\n    \n    # Display the plot (optional, useful for immediate visualization)\n    plt.show()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/21", "solution": "import psutil\nimport platform\ndef task_func():\n    total_memory = psutil.virtual_memory().total\n    used_memory = psutil.virtual_memory().used\n    memory_percent = (used_memory / total_memory) * 100\n    \n    os_name = platform.system()\n    architecture = platform.architecture()[0]\n    \n    return {\n        'OS': os_name,\n        'Architecture': architecture,\n        'Memory Usage': f\"{memory_percent:.2f}%\"\n    }"}
{"task_id": "BigCodeBench/22", "solution": "import collections\nfrom itertools import zip_longest\nfrom random import choices\ndef task_func(l1, l2, K=10):\n    \"\"\"\n    Combine two lists by alternating their elements, even if they are of different lengths. \n    Elements from the longer list without a counterpart in the shorter one will be included on their own.\n    Then, create a random sample of size K from the combined list, and calculate the frequency of \n    each element in the sample.\n\n    Parameters:\n    l1 (list): The first list containing any hashable types.\n    l2 (list): The second list containing any hashable types.\n    K (int): the size of the random sample from the combined list. Default to 10.\n\n    Returns:\n    collections.Counter: An object that counts the frequency of each element in the sample.\n    \"\"\"\n    # Combine lists by alternating their elements\n    combined = [item for pair in zip_longest(l1, l2, fillvalue=None) for item in pair if item is not None]\n    \n    # Create a random sample of size K\n    sample = choices(combined, k=K)\n    \n    # Calculate the frequency of each element in the sample\n    freq_counter = collections.Counter(sample)\n    \n    return freq_counter"}
{"task_id": "BigCodeBench/23", "solution": "import numpy as np\nfrom itertools import zip_longest\ndef task_func(l1, l2, THRESHOLD = 0.5):\n    \"\"\"\n    Function as described in the problem statement.\n    \"\"\"\n    # Combine the lists, ignoring None for uneven lengths\n    combined = [num for pair in zip_longest(l1, l2) for num in pair if num is not None]\n    \n    # Calculate absolute differences from the threshold\n    diff = np.abs(np.array(combined) - THRESHOLD)\n    \n    # Return the element closest to the threshold\n    return combined[np.argmin(diff)]\nl1 = [0.3, 1, 2, 3]\nl2 = [0.7, 11, 12, 13]"}
{"task_id": "BigCodeBench/24", "solution": "import base64\nimport hashlib\nimport os\ndef task_func(password, SALT_LENGTH = 32):\n    if password is None or password == \"\":\n        raise ValueError(\"Password must not be None or empty\")\n\n    # Generate a random salt\n    salt = os.urandom(SALT_LENGTH)\n    \n    # Hash the password with the salt using PBKDF2 HMAC with SHA-256\n    hashed_password = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)\n    \n    # Encode the salt and hashed password in base64\n    salt_base64 = base64.b64encode(salt)\n    hashed_password_base64 = base64.b64encode(hashed_password)\n    \n    return salt_base64, hashed_password_base64"}
{"task_id": "BigCodeBench/25", "solution": "import base64\nimport json\nimport zlib\ndef task_func(data_dict):\n    \"\"\"\n    Serializes a dictionary to a JSON string, compresses it using zlib, and then encodes the compressed\n    data with base64.\n    \"\"\"\n    # Serialize the dictionary to a JSON string\n    json_str = json.dumps(data_dict)\n    \n    # Compress the JSON string using zlib\n    compressed_data = zlib.compress(json_str.encode())\n    \n    # Encode the compressed data with base64\n    encoded_data = base64.b64encode(compressed_data)\n    \n    # Return the base64 encoded string\n    return encoded_data.decode()  # Decode to make it a string for print"}
{"task_id": "BigCodeBench/26", "solution": "import base64\nfrom cryptography.fernet import Fernet\ndef task_func(message, encryption_key):\n    # Ensure the encryption key is 32 bytes long, which is a requirement for Fernet.\n    # If the key is not 32 bytes, an error will be raised.\n    if len(encryption_key) != 32:\n        raise ValueError(\"Encryption key must be 32 bytes long.\")\n\n    # Encode the key from string to bytes, then create a Fernet instance.\n    encryption_key_bytes = base64.urlsafe_b64encode(encryption_key.encode())\n    fernet = Fernet(encryption_key_bytes)\n\n    # Encrypt the message\n    encrypted_message_bytes = fernet.encrypt(message.encode())\n\n    # Encode the encrypted message to base64 and then decode to string for return\n    encrypted_message_base64 = base64.urlsafe_b64encode(encrypted_message_bytes).decode()\n\n    return encrypted_message_base64"}
{"task_id": "BigCodeBench/27", "solution": "import json\nimport base64\nfrom datetime import datetime\ndef task_func(data: dict, DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\") -> str:\n    \"\"\"\n    Function as described in the problem statement.\n    \"\"\"\n    # Add current timestamp to the dictionary\n    data['timestamp'] = datetime.now().strftime(DATE_FORMAT)\n    \n    # Serialize the dictionary to a JSON string\n    json_data = json.dumps(data)\n    \n    # Encode the JSON string using base64 with ASCII encoding\n    encoded_data = base64.b64encode(json_data.encode('ascii'))\n    \n    # Return the base64 encoded string\n    return encoded_data.decode('ascii')  # Decode to str for easier use and readability\ndata = {'name': 'John', 'age': 30, 'city': 'New York'}"}
{"task_id": "BigCodeBench/28", "solution": "import requests\nimport json\nimport base64\ndef task_func(data, url=\"http://your-api-url.com\"):\n    \"\"\"\n    Convert a Python dictionary into a JSON-formatted string, encode this string in base64 format,\n    and send it as a 'payload' in a POST request to an API endpoint.\n    \n    Parameters:\n    data (dict): The Python dictionary to encode and send.\n    url (str, optional): The API endpoint URL. Defaults to \"http://your-api-url.com\".\n    \n    Returns:\n    requests.Response: The response object received from the API endpoint after the POST request.\n    \"\"\"\n    # Convert dictionary to JSON string\n    json_data = json.dumps(data)\n    \n    # Encode JSON string in base64\n    encoded_data = base64.b64encode(json_data.encode('utf-8'))\n    \n    # Prepare the payload\n    payload = {'data': encoded_data.decode('utf-8')}  # Decode back to utf-8 for sending in request\n    \n    # Send POST request\n    response = requests.post(url, json=payload)\n    \n    return response"}
{"task_id": "BigCodeBench/29", "solution": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport base64\ndef task_func(data):\n    \"\"\"\n    Standardize a numeric array using sklearn's StandardScaler and encode the standardized data in base64 format as an ASCII string.\n    \n    Parameters:\n    - data (numpy.ndarray): The numpy array to standardize and encode.\n    \n    Returns:\n    - str: The base64-encoded ASCII string representation of the standardized data.\n    \"\"\"\n    # Standardize the data\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data)\n    \n    # Convert the standardized data to bytes\n    standardized_data_bytes = standardized_data.tobytes()\n    \n    # Encode the bytes to base64\n    encoded_data = base64.b64encode(standardized_data_bytes)\n    \n    # Convert the base64 bytes back to an ASCII string\n    encoded_data_str = encoded_data.decode('ascii')\n    \n    return encoded_data_str\ndata = np.array([[0, 0], [0, 0], [1, 1], [1, 1]])"}
{"task_id": "BigCodeBench/30", "solution": "import json\nimport os\nimport re\ndef task_func(file_path, attribute, INPUT_JSON=None, EMAIL_REGEX=None):\n    if INPUT_JSON is None:\n        INPUT_JSON = {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\": {\"type\": \"str\"},  \n                \"age\": {\"type\": \"int\"},   \n                \"email\": {\"type\": \"str\"}  \n            },\n            \"required\": [\"name\", \"age\", \"email\"]\n        }\n    if EMAIL_REGEX is None:\n        EMAIL_REGEX = r\"^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$\"\n\n    # Validate JSON schema\n    def validate(data, schema):\n        if schema[\"type\"] == \"object\":\n            for prop, prop_schema in schema.get(\"properties\", {}).items():\n                if prop in data:\n                    validate(data[prop], prop_schema)\n                elif prop in schema.get(\"required\", []):\n                    raise ValueError(f\"Missing required attribute: {prop}\")\n            for prop in data:\n                if prop not in schema.get(\"properties\", {}):\n                    raise ValueError(f\"Unexpected attribute: {prop}\")\n        elif schema[\"type\"] == \"str\" and isinstance(data, str):\n            if \"email\" in attribute and not re.match(EMAIL_REGEX, data):\n                raise ValueError(\"Invalid email format\")\n        elif schema[\"type\"] == \"int\" and not isinstance(data, int):\n            raise ValueError(\"Invalid integer value\")\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    # Load and validate JSON file\n    if not os.path.exists(file_path):\n        raise ValueError(\"File does not exist\")\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n        validate(data, INPUT_JSON)\n\n    # Return the specified attribute\n    if attribute in data:\n        return data[attribute]\n    else:\n        raise ValueError(f\"Attribute not found in the data: {attribute}\")"}
{"task_id": "BigCodeBench/31", "solution": "import nltk\nfrom string import punctuation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nPUNCTUATION = set(punctuation)\ndef valid_word(word):\n    \"\"\"Check if a word is valid (starts with '$' and has non-punctuation characters).\"\"\"\n    return word.startswith('$') and not all(char in PUNCTUATION for char in word[1:])\ndef task_func(text):\n    \"\"\"\n    Draw a bar chart of the frequency of valid words in a text beginning with the \"$\" character.\n    \"\"\"\n    # Tokenize the text into words\n    words = nltk.word_tokenize(text)\n    \n    # Filter out valid words (start with '$' and have non-punctuation content)\n    valid_words = [word for word in words if valid_word(word)]\n    \n    # Count the frequency of each valid word\n    word_freq = nltk.FreqDist(valid_words)\n    \n    # If there are no valid words, return None\n    if not word_freq:\n        return None\n    \n    # Plotting\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=list(word_freq.keys()), y=list(word_freq.values()))\n    plt.title('Frequency of Words Beginning with \"$\"')\n    plt.xlabel('Words')\n    plt.ylabel('Frequency')\n    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n    ax = plt.gca()  # Get the current axes\n    \n    return ax\ntext = \"$child than resource indicate star $community station onto best green $exactly onto then age charge $friend than ready child really $let product coach decision professional $camera life off management factor $alone beat idea bit call $campaign fill stand Congress stuff $performance follow your resource road $data performance himself school here\""}
{"task_id": "BigCodeBench/32", "solution": "import requests\nfrom bs4 import BeautifulSoup\ndef task_func(url, tag):\n    \"\"\"\n    Scrape a web page for the first occurrence of a specified HTML tag and return its text content.\n\n    Parameters:\n    url (str): The URL of the website to scrape.\n    tag (str): The HTML tag to find and retrieve text from.\n\n    Returns:\n    str: The text content of the specified HTML tag if found, otherwise returns None.\n    \"\"\"\n    try:\n        # Send a GET request to the URL\n        response = requests.get(url)\n        \n        # Ensure the request was successful\n        response.raise_for_status()\n        \n        # Parse the HTML content\n        soup = BeautifulSoup(response.text, 'html.parser')\n        \n        # Find the first occurrence of the specified tag\n        element = soup.find(tag)\n        \n        # Return the text content if the tag is found, otherwise return None\n        return element.text if element else None\n    \n    except requests.RequestException as e:\n        print(f\"Error occurred: {e}\")\n        return None\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return None"}
{"task_id": "BigCodeBench/33", "solution": "import numpy as np\nfrom functools import reduce\ndef task_func(list_of_pairs):\n    \"\"\"\n    Calculate the product of the second values in each tuple in a list of tuples and return the product as a single-element numeric array.\n    \"\"\"\n    # Extract the second elements from each tuple\n    second_values = [pair[1] for pair in list_of_pairs]\n    \n    # Calculate the product using functools.reduce\n    product = reduce(lambda x, y: x * y, second_values)\n    \n    # Return the product as a single-element numpy array\n    return np.array([product])\nlist_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef remove_urls(text):\n    \"\"\"Remove URLs from the text.\"\"\"\n    return re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)\ndef task_func(text):\n    \"\"\"\n    Create a word cloud from text after removing URLs and plot it.\n    \"\"\"\n    # Remove URLs from the text\n    cleaned_text = remove_urls(text)\n    \n    # Check if there's any text left after removing URLs\n    if not cleaned_text:\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n    \n    # Generate the word cloud\n    wordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = None, \n                min_font_size = 10).generate(cleaned_text)\n    \n    # Plot the WordCloud image\n    plt.figure(figsize = (8, 8), facecolor = None) \n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n    \n    # Display the plot\n    plt.show()\n    \n    # Return the word cloud object for demonstration purposes, though it's not typically used directly\n    return wordcloud"}
{"task_id": "BigCodeBench/35", "solution": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_values=[1, 3, 4]):\n    \"\"\"\n    The function replaces non-target values with zeros in each DataFrame column and plots their distribution.\n    \"\"\"\n    # Replace values not in target_values with zero\n    for col in df.columns:\n        df[col] = df[col].apply(lambda x: x if x in target_values else 0)\n    \n    # Plot the distribution of each column\n    fig, axs = plt.subplots(nrows=len(df.columns), figsize=(10, len(df.columns)*5) if len(df.columns)>1 else (10, 5))\n    \n    for i, col in enumerate(df.columns):\n        sns.histplot(df[col], ax=axs[i], kde=False)\n        axs[i].set_title(col)\n        axs[i].set_xlabel('Value')\n        axs[i].set_ylabel('Frequency')\n    \n    # If only one subplot, adjust layout to prevent extra space\n    if len(df.columns) == 1:\n        fig.tight_layout()\n\n    return axs"}
{"task_id": "BigCodeBench/36", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nTARGET_VALUES = np.array([1, 3, 4])\ndef task_func(df):\n    # Replace non-target values with zeros\n    for col in df.columns:\n        df[col] = np.where(np.isin(df[col], TARGET_VALUES), df[col], 0)\n    \n    # Perform Box-Cox transformation\n    transformed_df = pd.DataFrame()\n    for col in df.columns:\n        # Add 1 to account for zeros after replacement, to avoid Box-Cox issues with zero values\n        data_adjusted = df[col] + (np.sum(df[col] == 0) > 0)\n        # Box-Cox transform\n        transformed_data = stats.boxcox(data_adjusted)[0] if np.var(data_adjusted) > 0 else data_adjusted  # Avoid Box-Cox on constant data\n        transformed_df[col] = transformed_data\n    \n    # Create KDE plots\n    fig, axs = plt.subplots(len(transformed_df.columns), 1, figsize=(10, 3*len(transformed_df.columns)))\n    for i, col in enumerate(transformed_df.columns):\n        axs[i].kdeplot(transformed_df[col], fill=True)\n        axs[i].set_title(f'KDE Plot of Transformed {col}')\n    \n    return transformed_df, fig"}
{"task_id": "BigCodeBench/37", "solution": "from sklearn.ensemble import RandomForestClassifier\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_column):\n    # Split the dataframe into features and target\n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n    \n    # Train a Random Forest Classifier\n    model = RandomForestClassifier(random_state=42)\n    model.fit(X, y)\n    \n    # Get the feature importances\n    importances = model.feature_importances_\n    features = X.columns.tolist()\n    \n    # Sort the feature importances in descending order\n    sorted_idx = importances.argsort()[::-1]\n    features = [features[i] for i in sorted_idx]\n    importances = importances[sorted_idx]\n    \n    # Create a bar plot for feature importances\n    plt.figure(figsize=(10, 6))\n    ax = sns.barplot(x=importances, y=features, palette=\"viridis\")\n    ax.set_xlabel('Feature Importance Score')\n    ax.set_ylabel('Features')\n    ax.set_title('Visualizing Important Features')\n    \n    # Return the trained model and the Axes object of the plotted data\n    return model, ax"}
{"task_id": "BigCodeBench/38", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nFEATURE_NAMES = [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\"]\ndef task_func(data_matrix):\n    # Standardize the data\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data_matrix)\n    \n    # Compute the mean of each row\n    means = standardized_data.mean(axis=1)\n    \n    # Convert to DataFrame\n    df = pd.DataFrame(standardized_data, columns=FEATURE_NAMES)\n    df['Mean'] = means\n    \n    # Plot the histogram of mean values\n    fig, ax = plt.subplots()\n    ax.hist(df['Mean'], bins='auto')  # arguments are passed to np.histogram\n    ax.set_title('Distribution of Means')\n    ax.set_xlabel('Mean Value')\n    ax.set_ylabel('Frequency')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/39", "solution": "import numpy as np\nfrom scipy.stats import ttest_1samp\nimport matplotlib.pyplot as plt\nALPHA = 0.05\ndef task_func(data_matrix):\n    \"\"\"\n    The function implementation remains the same as described in the problem.\n    \"\"\"\n    # Calculate the mean of each row\n    row_means = np.mean(data_matrix, axis=1)\n    \n    # Calculate the mean of the whole data matrix (population mean)\n    pop_mean = np.mean(data_matrix)\n    \n    # Perform t-test for each row\n    ttest_results = [ttest_1samp(data_matrix[i], pop_mean) for i in range(data_matrix.shape[0])]\n    significant_indices = [i for i, result in enumerate(ttest_results) if result.pvalue < ALPHA]\n    \n    # Create a new figure for plotting\n    fig, ax = plt.subplots()\n    \n    # Plot the mean of rows\n    ax.plot(row_means, color='red', label='Means')\n    \n    # Plot the significant means\n    if significant_indices:\n        ax.plot(significant_indices, [row_means[i] for i in significant_indices], color='blue', marker='o', linestyle='', label='Significant Means')\n    \n    # Plot the population mean\n    ax.axhline(y=pop_mean, color='green', linestyle='--', label='Population Mean')\n    \n    # Set labels and legend\n    ax.set_xlabel('Row Index')\n    ax.set_ylabel('Mean Value')\n    ax.legend()\n    \n    return significant_indices, ax"}
{"task_id": "BigCodeBench/40", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\ndef task_func(data_matrix):\n    # Calculate Z-scores for each column (feature)\n    z_scores = pd.DataFrame(zscore(data_matrix, axis=1), columns=[f'Feature {i+1}' for i in range(data_matrix.shape[1])])\n    \n    # Calculate mean of z-scores for each row\n    z_scores['Mean'] = z_scores.mean(axis=1)\n    \n    # Visualize the correlation matrix of the Z-values with a heatmap\n    corr_matrix = z_scores.corr()\n    fig, ax = plt.subplots()\n    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)\n    \n    return z_scores, ax"}
{"task_id": "BigCodeBench/41", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\ndef task_func(data_matrix):\n    \"\"\"\n    Calculate the skew of each row in a 2D data matrix and plot the distribution.\n\n    Parameters:\n    - data_matrix (numpy.array): The 2D data matrix.\n\n    Returns:\n    pandas.DataFrame: A DataFrame containing the skewness of each row.\n    matplotlib.axes.Axes: The Axes object of the plotted distribution.\n    \"\"\"\n    # Calculate skew for each row\n    skewness_values = np.apply_along_axis(skew, 1, data_matrix)\n\n    # Create DataFrame\n    df = pd.DataFrame(skewness_values, columns=['Skewness'])\n\n    # Plot the distribution of skewness values\n    fig, ax = plt.subplots()\n    ax.hist(df['Skewness'], bins='auto')  # arguments are passed to np.histogram\n    ax.set_title(\"Distribution of Row Skewness\")\n    ax.set_xlabel(\"Skewness\")\n    ax.set_ylabel(\"Frequency\")\n\n    return df, ax"}
{"task_id": "BigCodeBench/42", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nimport numpy as np\ndef task_func(data_matrix, n_components=2):\n    \"\"\"\n    Apply PCA with n_components components to a 2D data matrix, calculate the mean value of each component, \n    and then return the cumulative explained variance of the components in a plot.\n    \"\"\"\n    # Apply PCA\n    pca = PCA(n_components=n_components)\n    pca_result = pca.fit_transform(data_matrix)\n    \n    # Create a DataFrame for PCA results\n    df_pca = pd.DataFrame(data=pca_result, columns=[f'Component {i+1}' for i in range(n_components)])\n    \n    # Add mean of each component as a new column\n    df_pca['Mean'] = df_pca.mean(axis=1)\n    \n    # Calculate explained variance ratio and prepare for cumulative sum\n    explained_variance = pca.explained_variance_ratio_\n    cumulative_explained_variance = np.cumsum(explained_variance)\n    \n    # Plot cumulative explained variance\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(range(1, n_components+1), cumulative_explained_variance, marker='o')\n    ax.set_xlabel('Number of Components')\n    ax.set_ylabel('Cumulative Explained Variance')\n    ax.grid(True)\n    \n    return df_pca, ax"}
{"task_id": "BigCodeBench/43", "solution": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Fill NaN values with the mean of the column\n    df.fillna(df.mean(), inplace=True)\n    \n    # Describe the dataframe\n    description = df.describe()\n    \n    # Initialize a list to hold the plot Axes\n    plots = []\n    \n    # Iterate over numeric columns to create distribution plots\n    for col in df.select_dtypes(include=np.number).columns:\n        plt.figure(figsize=(10, 6))  # Adjust the figure size as needed\n        ax = sns.histplot(df[col], bins=10, kde=False)\n        ax.set_title(f'Distribution of {col}')\n        plots.append(ax)\n        \n    # Clear the current figure after all plots are created\n    plt.clf()\n    \n    return description, plots"}
{"task_id": "BigCodeBench/44", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    \"\"\"\n    Normalize numeric columns in a DataFrame and draw a box plot for each column. Missing values are replaced by column's average.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame.\n\n    Returns:\n    DataFrame: A pandas DataFrame after normalization.\n    Axes: A matplotlib Axes displaying a box plot for each column.\n    \"\"\"\n    # Fill missing values with column mean\n    df.fillna(df.mean(), inplace=True)\n\n    # Initialize MinMaxScaler and fit_transform the DataFrame\n    scaler = MinMaxScaler()\n    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()\n    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n\n    # Draw box plots\n    fig, ax = plt.subplots()\n    df.boxplot(ax=ax)\n\n    return df, ax"}
{"task_id": "BigCodeBench/45", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame):\n    # Drop non-numeric columns\n    numeric_df = df.select_dtypes(include=[np.number])\n    \n    # Fill missing values with column mean\n    df_filled = numeric_df.fillna(numeric_df.mean())\n    \n    # Perform PCA\n    pca = PCA(n_components=2)\n    principalComponents = pca.fit_transform(df_filled)\n    \n    # Create a DataFrame for the principal component values\n    principalDf = pd.DataFrame(data = principalComponents, columns = ['Component 1', 'Component 2'])\n    \n    # Draw a scatter plot\n    fig, ax = plt.subplots()\n    sns.scatterplot(x = 'Component 1', y = 'Component 2', data = principalDf, ax=ax)\n    ax.set_xlabel('Component 1')\n    ax.set_ylabel('Component 2')\n    \n    return principalDf, ax"}
{"task_id": "BigCodeBench/46", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    \"\"\"\n    Calculate Z-scores for numeric columns in a DataFrame and draw a histogram for each column.\n    - Missing values are replaced by the column's average.\n    - The histograms are plotted with 10 bins.\n    \n    Parameters:\n    - df (pandas.DataFrame): The input pandas DataFrame with numeric columns.\n    \n    Returns:\n    - tuple:\n        1. pandas.DataFrame: A DataFrame with computed z-scores.\n        2. list: A list of Axes objects representing the histograms of the numeric columns.\n    \"\"\"\n    # Fill missing values with column means\n    df.fillna(df.mean(), inplace=True)\n    \n    # Calculate z-scores for numeric columns\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    df_zscore = df.copy()\n    for col in numeric_cols:\n        df_zscore[col] = zscore(df[col])\n    \n    # Create histograms\n    fig, axs = plt.subplots(nrows=len(numeric_cols), ncols=1, figsize=(10, 3*len(numeric_cols)) if len(numeric_cols) > 1 else (10, 3))\n    axs = axs.flatten() if len(numeric_cols) > 1 else [axs]\n    \n    for idx, col in enumerate(numeric_cols):\n        axs[idx].hist(df_zscore[col], bins=10, color='blue', edgecolor='black')\n        axs[idx].set_title(f'Z-Score Histogram for {col}')\n        axs[idx].set_xlabel('Z-Score')\n        axs[idx].set_ylabel('Frequency')\n    \n    # Show plots\n    plt.tight_layout()\n    plt.show()\n    \n    return df_zscore, axs"}
{"task_id": "BigCodeBench/47", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    \"\"\"\n    Standardize numeric columns in a DataFrame and return the heatmap of the correlation matrix. Missing values are replaced by the column's average.\n    \n    Parameters:\n    - df (pandas.DataFrame): The pandas DataFrame to be standardized.\n    \n    Returns:\n    - DataFrame: The pandas DataFrame after standardization.\n    - Axes: A heatmap of the correlation matrix.\n    \"\"\"\n    # Fill missing values with column means\n    df.fillna(df.mean(), inplace=True)\n    \n    # Select numeric columns for standardization\n    numeric_df = df.select_dtypes(include=np.number)\n    \n    # Standardize numeric columns\n    scaler = StandardScaler()\n    standardized = scaler.fit_transform(numeric_df)\n    standardized_df = pd.DataFrame(standardized, columns=numeric_df.columns, index=df.index)\n    \n    # Compute the correlation matrix\n    corr_matrix = standardized_df.corr()\n    \n    # Plot heatmap\n    plt.figure(figsize=(10, 8))\n    heatmap = sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True)\n    plt.title('Correlation Matrix Heatmap')\n    \n    return standardized_df, heatmap"}
{"task_id": "BigCodeBench/48", "solution": "import time\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(n, output_path=None):\n    \"\"\"\n    Generate n random Unix timestamps and convert them to strings formatted as UTC DATE_FORMAT.\n    Plot a histogram of the distribution of the generated timestamps. If an output path is provided,\n    save the histogram to the specified path. Otherwise, display the plot.\n    \"\"\"\n    # Generate n random Unix timestamps\n    random_timestamps = [int(time.mktime(datetime.utcfromtimestamp(random.randint(1, int(time.time()))).timetuple())) for _ in range(n)]\n    \n    # Convert timestamps to formatted strings\n    formatted_timestamps = [datetime.utcfromtimestamp(ts).strftime(DATE_FORMAT) for ts in random_timestamps]\n    \n    # Plotting the histogram\n    plt.hist(random_timestamps, bins=20, alpha=0.7, color='blue', edgecolor='black')\n    plt.title('Distribution of Random Timestamps')\n    plt.xlabel('Unix Timestamp')\n    plt.ylabel('Frequency')\n    \n    if output_path:\n        plt.savefig(output_path)\n        print(f\"Plot saved to {output_path}\")\n    else:\n        plt.show()\n    \n    return formatted_timestamps"}
{"task_id": "BigCodeBench/49", "solution": "from datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(timestamps):\n    if not timestamps:\n        raise ValueError(\"Input list of timestamps is empty.\")\n    \n    # Convert Unix timestamps to datetime objects\n    datetimes = [datetime.fromtimestamp(ts).strftime(DATE_FORMAT) for ts in timestamps]\n    \n    # Create a DataFrame\n    df = pd.DataFrame({\n        'Timestamp': timestamps,\n        'Datetime': datetimes\n    })\n    \n    # Draw a histogram\n    ax = plt.figure(figsize=(10, 6)).gca()\n    ax.hist(pd.to_datetime(df['Datetime']), bins=10, color='blue', edgecolor='black')\n    plt.title('Distribution of Timestamps')\n    plt.xlabel('Datetime')\n    plt.ylabel('Frequency')\n    plt.grid(axis='y', alpha=0.75)\n    \n    # Show the plot (optional, can be commented out if not needed in the script run)\n    plt.show()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/50", "solution": "from datetime import datetime\nimport pandas as pd\nimport pytz\nimport matplotlib.pyplot as plt\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nTIMEZONES = [\n    \"America/New_York\",\n    \"Europe/London\",\n    \"Asia/Shanghai\",\n    \"Asia/Tokyo\",\n    \"Australia/Sydney\",\n]\ndef task_func(timestamp):\n    # Convert Unix timestamp to datetime\n    utc_dt = datetime.utcfromtimestamp(timestamp).strftime(DATE_FORMAT)\n    \n    # Convert datetime to different timezones\n    datetime_tz = {tz: datetime.strptime(utc_dt, DATE_FORMAT).astimezone(pytz.timezone(tz)).strftime(DATE_FORMAT) \n                   for tz in TIMEZONES}\n    \n    # Create DataFrame\n    df = pd.DataFrame(list(datetime_tz.items()), columns=['Timezone', 'Datetime'])\n    \n    # Create bar chart\n    ax = df.plot(kind='bar', x='Timezone', y='Datetime', figsize=(10, 6))\n    ax.set_xlabel('Timezone')\n    ax.set_ylabel('Datetime')\n    ax.set_title('Datetime = f(Timezone)')\n    \n    # Show plot\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n    \n    return df, ax"}
{"task_id": "BigCodeBench/51", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, age: int, height: int):\n    # Filter the DataFrame based on the given conditions\n    filtered_df = df[(df['Age'] <= age) & (df['Height'] >= height)]\n    \n    # If the filtered DataFrame has less than 3 columns, add a 'Cluster' column with 0s\n    if len(filtered_df.columns) < 3:\n        filtered_df['Cluster'] = 0\n        ax = None  # No plot if less than 3 columns\n    else:\n        # Perform KMeans clustering with 2 features (Age, Height) and 3 clusters\n        kmeans = KMeans(n_clusters=3)\n        kmeans.fit(filtered_df[['Age', 'Height']])\n        filtered_df['Cluster'] = kmeans.labels_\n        \n        # Plot the scatter plot\n        ax = plt.figure().add_subplot(111)\n        ax.scatter(filtered_df['Age'], filtered_df['Height'], c=filtered_df['Cluster'], cmap='viridis')\n        ax.set_xlabel('Age')\n        ax.set_ylabel('Height')\n        ax.set_title('KMeans Clustering based on Age and Height')\n        plt.grid(True)\n        plt.show()\n\n    return filtered_df, ax"}
{"task_id": "BigCodeBench/52", "solution": "import pandas as pd\nimport regex as re\nSTOPWORDS = [\"a\", \"an\", \"the\", \"in\", \"is\", \"are\"]\ndef task_func(text):\n    \"\"\"\n    Count the frequency of each word in a text after removing specific stopwords.\n    \"\"\"\n    # Remove punctuation and convert text to lowercase\n    cleaned_text = re.sub(r'[^\\w\\s]', '', text).lower()\n    \n    # Split the text into words\n    words = cleaned_text.split()\n    \n    # Remove stopwords\n    words = [word for word in words if word not in STOPWORDS]\n    \n    # Count the frequency of each word\n    word_counts = pd.Series(words).value_counts()\n    \n    return word_counts"}
{"task_id": "BigCodeBench/53", "solution": "import pandas as pd\nimport regex as re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = [\"Name\", \"Email\", \"Age\", \"Country\"]\ndef task_func(text):\n    pattern = r\"Name: (.*?), Email: (.*?), Age: (.*?), Country: (.*?)($|\\n)\"\n    matches = re.findall(pattern, text)\n    \n    data = {name: [] for name in COLUMN_NAMES}\n    for match in matches:\n        for i, name in enumerate(COLUMN_NAMES):\n            data[name].append(match[i])\n    \n    df = pd.DataFrame(data)\n    \n    # Plotting the age distribution\n    plt.figure(figsize=(10, 6))\n    sns.histplot(df['Age'], kde=False, bins=range(0, 100, 10))\n    plt.title('Age Distribution')\n    plt.xlabel('Age')\n    plt.ylabel('Count')\n    plt.show()\n    \n    return df\nexample_text = 'Name: John Doe, Email: john.doe@example.com, Age: 30, Country: USA\\nName: Jane Doe, Email: jane.doe@example.com, Age: 25, Country: UK'"}
{"task_id": "BigCodeBench/54", "solution": "import pandas as pd\nimport regex as re\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(text):\n    \"\"\"\n    Analyze a text by creating a document term matrix with CountVectorizer. The text contains several sentences, each separated by a period.\n    Ignore empty sentences.\n\n    Parameters:\n    text (str): The text to analyze.\n\n    Returns:\n    DataFrame: A pandas DataFrame with the document-term matrix. Its column names should be adapted from the vectorizer feature names.\n    \"\"\"\n    # Split the text into sentences\n    sentences = re.split(r'\\. ', text)\n    # Filter out empty sentences\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n    \n    # Initialize CountVectorizer\n    vectorizer = CountVectorizer()\n    \n    # Fit and transform the sentences\n    dtm = vectorizer.fit_transform(sentences)\n    \n    # Convert the sparse matrix to a DataFrame\n    df_dtm = pd.DataFrame(dtm.toarray(), columns=vectorizer.get_feature_names_out())\n    \n    # Since the requirement implies each sentence should be a separate row, we need to reshape the data\n    # If there's only one sentence, it will remain single-row; otherwise, we'll have multiple rows\n    if len(sentences) > 1:\n        df_dtm = pd.concat([df_dtm]*len(sentences), ignore_index=True)\n    else:\n        df_dtm.insert(0, 'Sentence', [1])  # Add a dummy column to indicate the single sentence\n    \n    return df_dtm\ntext = \"This is a sample sentence. This sentence contains sample words.\""}
{"task_id": "BigCodeBench/55", "solution": "import re\nimport pandas as pd\nSTOPWORDS = [\"Those\", \"are\", \"the\", \"words\", \"to\", \"ignore\"]\ndef task_func(text):\n    # Split the text into sentences\n    sentences = re.split(r'[.!?]+', text)\n    sentence_dict = {}\n    \n    # Iterate over sentences, ignore empty ones and stopwords\n    for i, sentence in enumerate(sentences):\n        sentence = sentence.strip()\n        if sentence:\n            # Remove stopwords and split into words\n            words = [word for word in sentence.split() if word.lower() not in STOPWORDS]\n            sentence_dict[f\"Sentence {i+1}\"] = len(words)\n    \n    # Convert the dictionary to a pandas Series\n    return pd.Series(sentence_dict)\ntext = \"I am good at programming. I learned it in college.\""}
{"task_id": "BigCodeBench/56", "solution": "import pandas as pd\nimport regex as re\ndef task_func(text):\n    \"\"\"\n    Extract data from a text and create a Pandas DataFrame. The text contains several lines, each formatted as 'Score: 85, Category: Math'. Make sure to convert the scores in integer.\n\n    Parameters:\n    text (str): The text to analyze.\n\n    Returns:\n    DataFrame: A pandas DataFrame with extracted data.\n    \"\"\"\n    # Use regex to find all matches of the pattern in the text\n    matches = re.findall(r'Score: (\\d+), Category: (\\w+)', text)\n    \n    # Convert the matches into a list of dictionaries for DataFrame construction\n    data = [{'Score': int(score), 'Category': category} for score, category in matches]\n    \n    # Create a DataFrame from the list of dictionaries\n    df = pd.DataFrame(data)\n    \n    return df"}
{"task_id": "BigCodeBench/57", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(csv_file_path: str, title: str) -> tuple[pd.DataFrame, plt.Axes]:\n    \"\"\"\n    Create a heatmap of the correlation matrix of a DataFrame built from a CSV file. Round each correlation to 2 decimals.\n\n    Parameters:\n    csv_file_path (str): The path to the CSV file containing the input data.\n    title (str): The title of the heatmap.\n\n    Returns:\n    DataFrame: correlation dataframe where each row and each column correspond to a specific column.\n    matplotlib.axes.Axes: The Axes object of the plotted data.\n    \"\"\"\n    # Load the data from the CSV file\n    df = pd.read_csv(csv_file_path)\n    \n    # Compute the correlation matrix\n    corr = df.corr().round(2)\n    \n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(corr, dtype=bool))\n    \n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n    \n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(230, 20, as_cmap=True)\n    \n    # Draw the heatmap with the mask and correct aspect ratio\n    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n                square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n    ax.set_title(title)\n    \n    # Return the correlation dataframe and the axes object\n    return corr, ax"}
{"task_id": "BigCodeBench/58", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, num_samples):\n    \"\"\"\n    Display a plot showing a normal distribution with a given mean and standard deviation and overlay a histogram of randomly generated samples from this distribution.\n    The plot title should be 'Normal Distribution'.\n\n    Parameters:\n    mu (float): The mean of the distribution.\n    sigma (float): The standard deviation of the distribution.\n    num_samples (int): The number of samples to generate.\n\n    Returns:\n    fig (matplotlib.figure.Figure): The generated figure. Useful for testing purposes.\n    \"\"\"\n    # Generate random samples\n    samples = np.random.normal(mu, sigma, num_samples)\n    \n    # Calculate the PDF (Probability Density Function) for the given normal distribution\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    pdf = stats.norm.pdf(x, mu, sigma)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(x, pdf, 'k', linewidth=2, label='Normal Distribution N(\u03bc, \u03c3\u00b2)')\n    ax.hist(samples, density=True, bins='auto', alpha=0.6, color='b', label='Sampled Data')\n    \n    # Adding labels and title\n    ax.set_xlabel('Values')\n    ax.set_ylabel('Probability Density')\n    ax.set_title('Normal Distribution')\n    ax.legend()\n    \n    # Show the plot\n    plt.show()\n    \n    return fig"}
{"task_id": "BigCodeBench/59", "solution": "import wikipedia\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(page_title):\n    \"\"\"\n    Create a word cloud from the text of a Wikipedia page.\n\n    Parameters:\n    page_title (str): The title of the Wikipedia page.\n\n    Returns:\n    matplotlib.axes.Axes: The Axes object of the plotted data. Is None if there is no Wikipedia page with the title given as input.\n    \"\"\"\n    try:\n        # Fetch the Wikipedia page\n        page = wikipedia.page(page_title)\n    except wikipedia.exceptions.PageError:\n        print(f\"No Wikipedia page found for '{page_title}'.\")\n        return None\n\n    # Extract the page content\n    text = page.content\n    \n    # Create a WordCloud object\n    wordcloud = WordCloud(width=800, height=800, background_color='white', min_font_size=10).generate(text)\n    \n    # Plot the WordCloud image\n    plt.figure(figsize=(8, 8), facecolor=None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n    \n    # Show the plot\n    plt.show()\n    \n    # Return the Axes object\n    return plt.gca()"}
{"task_id": "BigCodeBench/60", "solution": "import json\nimport pandas as pd\ndef task_func(result, csv_file_path=\"test.csv\", json_file_path=\"test.json\"):\n    \"\"\"\n    Save the list of dictionaries provided in the 'result' parameter to a CSV file (without index) and a JSON file.\n\n    Parameters:\n    - result (list): A list of dictionaries.\n    - csv_file_path (str): A path to a CSV file.\n    - json_file_path (str): A path to a JSON file.\n\n    Returns:\n    None\n    \"\"\"\n    # Convert list of dictionaries to DataFrame\n    df = pd.DataFrame(result)\n    \n    # Save DataFrame to CSV without index\n    df.to_csv(csv_file_path, index=False)\n    \n    # Save list of dictionaries to JSON\n    with open(json_file_path, 'w') as json_file:\n        json.dump(result, json_file)"}
{"task_id": "BigCodeBench/61", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nPLOT_TITLE = 'Square root plot'\nX_LABEL = 'x'\nY_LABEL = 'sqrt(x)'\nTIME_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n    \"\"\"\n    (Details as provided in the question)\n    \"\"\"\n    # Extract relevant values\n    values = np.array([d['from_user'] for d in result if 'from_user' in d])\n    \n    # Compute square roots and round to 2 decimals\n    square_roots = np.round(np.sqrt(values), 2)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(values, square_roots, marker='o', linestyle='-', color='blue')\n    \n    # Annotate with current date and time\n    now = datetime.now().strftime(TIME_FORMAT)\n    ax.annotate(f'Generated: {now}', (0.05, 0.95), xycoords='axes fraction', fontsize=10, backgroundcolor='white')\n    \n    # Labels and title\n    ax.set_xlabel(X_LABEL)\n    ax.set_ylabel(Y_LABEL)\n    ax.set_title(PLOT_TITLE)\n    \n    # Show plot\n    plt.grid(True)\n    plt.show()\n    \n    return square_roots, ax\nresult = [{\"hi\": 7, \"bye\": 4, \"from_user\": 16}, {\"some_key\": 2, \"another_key\": 4, \"from_user\": 9}]"}
{"task_id": "BigCodeBench/62", "solution": "import random\nimport matplotlib.pyplot as plt\ndef task_func(result, colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']):\n    \"\"\"\n    Draws a histogram of the \"from_user\" values in the provided result. The color of the histogram bars is selected at random from the provided colors list.\n    \"\"\"\n    # Extracting 'from_user' values\n    from_users = [d['from_user'] for d in result]\n    \n    # Randomly selecting a color\n    color = random.choice(colors)\n    \n    # Plotting histogram\n    plt.hist(from_users, color=color, bins=max(from_users)+1, edgecolor='black')\n    plt.title('Histogram of \"from_user\" Values')\n    plt.xlabel('from_user Value')\n    plt.ylabel('Frequency')\n    plt.show()\nresult = [{\"from_user\": 0}, {\"from_user\": 0}, {\"from_user\": 1}, {\"from_user\": 2}, {\"from_user\": 2}]"}
{"task_id": "BigCodeBench/63", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(car_dict):\n    \"\"\"\n    With a dictionary of cars as keys and their colors as values, create a DataFrame and visualize the distribution of vehicle colors in a bar chart.\n    \"\"\"\n    # Create a DataFrame from the dictionary\n    df = pd.DataFrame(list(car_dict.items()), columns=['Car', 'Color'])\n    \n    # Plotting the distribution of vehicle colors\n    ax = df['Color'].value_counts().plot(kind='bar', figsize=(10, 6), color='skyblue')\n    ax.set_title('Distribution of Vehicle Colors')\n    ax.set_xlabel('Color')\n    ax.set_ylabel('Number of Cars')\n    \n    # Return DataFrame and Axes object\n    return df, ax\ncar_dict = {'Ford': 'Red', 'Toyota': 'Blue', 'Mercedes': 'Black', 'Tesla': 'White', 'BMW': 'Silver'}"}
{"task_id": "BigCodeBench/64", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    \"\"\"\n    The function to create a heatmap based on the given data.\n    \"\"\"\n    # Convert the data into a pandas DataFrame\n    df = pd.DataFrame(data, columns=COLUMNS)\n    \n    # Pivot the DataFrame to create a matrix suitable for a heatmap\n    # Counting the occurrences of each combination of col1 and col2 for each value in col3\n    pivot_df = df.pivot_table(index='col1', columns='col2', values='col3', aggfunc=lambda x: len(x.unique()))\n\n    # Normalize the pivot table if you want to see the distribution (percentage/frequency)\n    # pivot_df = pivot_df.div(pivot_df.sum(axis=1), axis=0)\n\n    # Create the heatmap using seaborn\n    ax = sns.heatmap(pivot_df, annot=True, fmt=\"d\", cmap='coolwarm', cbar=True)\n\n    # Display the heatmap\n    plt.title('Heatmap of col3 distribution grouped by col1 and col2')\n    plt.show()\n\n    return pivot_df, ax\ndata = [[1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 3], [2, 2, 3], [2, 2, 3]]"}
{"task_id": "BigCodeBench/65", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    \"\"\"\n    Given problem's function implementation.\n    \"\"\"\n    # Convert data to DataFrame\n    df = pd.DataFrame(data, columns=COLUMNS)\n    \n    # Create a multi-index by grouping columns except the last one\n    grouped = df.set_index(COLUMNS[:-1])\n    \n    # Unstack the last column to prepare for plotting\n    unstacked = grouped.unstack()\n    \n    # Plotting\n    ax = unstacked.plot(kind='line', figsize=(10, 6))\n    \n    # Setting labels\n    x_label = '-'.join(COLUMNS[:-1])\n    y_label = COLUMNS[-1]\n    ax.set_xlabel(x_label)\n    ax.set_ylabel(y_label)\n    \n    # Return the analyzed DataFrame (first part of the tuple) and the plot Axes (second part)\n    return df, ax\ndata = [[1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3], \n        [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 3], [2, 2, 3], [2, 2, 3]]"}
{"task_id": "BigCodeBench/66", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    # Step 1: Build a pandas DataFrame\n    df = pd.DataFrame(data, columns=COLUMNS)\n    \n    # Step 2: Create a new dataframe by grouping the values in 'col3' by ['col1', 'col2']\n    grouped_df = df.groupby(['col1', 'col2'])['col3'].apply(list).reset_index(name='col3_grouped')\n    \n    # Step 3: The grouped DataFrame is already processed. Now for the visualization.\n    \n    # Step 4: Create a distribution plot. However, since the requirement seems to mix concepts (grouping and distribution plot which typically doesn't group), \n    # we'll adjust to a common interpretation: a count plot which is a kind of distribution plot that can show frequencies grouped by categories.\n    plot = sns.countplot(data=df, x='col3', hue=['col1', 'col2'])\n    plt.xlabel('col3')\n    \n    return grouped_df, plot.figure\ndata = [[1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 3], [2, 2, 3], [2, 2, 3]]"}
{"task_id": "BigCodeBench/67", "solution": "import pandas as pd\nimport re\nimport os\ndef task_func(dir_path: str, pattern: str = '^EMP'):\n    \"\"\"\n    Look for all ascendingly sorted files in a directory that start with a given pattern, and return the number of files against their size. You should return a pandas DataFrame with 2 columns 'File' and 'Size' with correspond to the file name and the size respectively.\n\n    Parameters:\n    - dir_path (str): The path to the directory.\n    - pattern (str): The pattern to match. Default is '^EMP' (files starting with 'EMP').\n\n    Returns:\n    - pandas.DataFrame: A pandas DataFrame with file names and their sizes.\n    \"\"\"\n    # Validate if the directory exists\n    if not os.path.isdir(dir_path):\n        return pd.DataFrame(columns=['File', 'Size'])\n    \n    # List all files in the directory\n    files = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))]\n    \n    # Filter files based on the pattern\n    matched_files = [f for f in files if re.match(pattern, f)]\n    \n    # Get file sizes\n    file_sizes = [(f, os.path.getsize(os.path.join(dir_path, f))) for f in matched_files]\n    \n    # Sort files by size in ascending order\n    file_sizes.sort(key=lambda x: x[1])\n    \n    # Convert to DataFrame\n    df = pd.DataFrame(file_sizes, columns=['File', 'Size'])\n    \n    return df"}
{"task_id": "BigCodeBench/68", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(data='data.csv', emp_prefix='EMP'):\n    \"\"\"\n    Load a CSV file into a DataFrame, filter the lines in which the employee ID begins with a specified prefix, \n    and draw a histogram of the 'Age'.\n    \n    Parameters:\n    - data (str): The path to the data file. Default is 'data.csv'.\n    - emp_prefix (str): The prefix of the employee IDs. Default is 'EMP'.\n    \n    Returns:\n    - DataFrame: Filtered data with 'Employee ID' and 'Age' columns.\n    - Axes: Histogram plot of 'Age'.\n    \"\"\"\n    # Load the data\n    df = pd.read_csv(data)\n    \n    # Filter the DataFrame where 'Employee ID' starts with the given prefix\n    filtered_df = df[df['Employee ID'].str.startswith(emp_prefix)]\n    \n    # Check if the required columns exist\n    required_columns = {'Employee ID', 'Age'}\n    if not required_columns.issubset(filtered_df.columns):\n        raise ValueError(\"Data must contain 'Employee ID' and 'Age' columns.\")\n    \n    # Draw histogram of 'Age'\n    ax = sns.histplot(filtered_df['Age'], kde=False)\n    plt.title('Age Distribution')\n    plt.xlabel('Age')\n    plt.ylabel('Count')\n    \n    # Show the plot (optional, can be commented out if not needed in the function output)\n    plt.show()\n    \n    return filtered_df, ax"}
{"task_id": "BigCodeBench/69", "solution": "import random\nimport matplotlib.pyplot as plt\nSALARY_RANGE = (20000, 100000)\ndef task_func(dict1):\n    \"\"\"\n    Analyze the salary distribution within the department with code 'EMPXX'.\n    \"\"\"\n    if 'EMPXX' not in dict1:\n        raise ValueError(\"The dictionary does not contain 'EMPXX' department.\")\n    \n    # Generate random salaries for 'EMPXX' department\n    salaries = [random.randint(*SALARY_RANGE) for _ in range(dict1['EMPXX'])]\n    \n    # Create a histogram\n    fig, ax = plt.subplots()\n    ax.hist(salaries, bins=20, edgecolor='black')\n    \n    # Set the title and labels\n    ax.set_title('Salary Distribution in EMPXX Department')\n    ax.set_xlabel('Salary')\n    ax.set_ylabel('Number of Employees')\n    \n    # Show the plot (optional, can be commented out if only the Axes object is needed)\n    plt.show()\n    \n    return ax\nd = {'EMPXX': 10, 'MANXX': 5, 'DEVXX': 8, 'HRXX': 7}"}
{"task_id": "BigCodeBench/70", "solution": "import pandas as pd\nimport json\nimport numpy as np\nimport matplotlib.pyplot as plt\nCOLUMNS = ['email', 'list']\ndef task_func(json_file):\n    try:\n        # Load data from JSON file\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n            \n        # Convert to DataFrame\n        df = pd.DataFrame(data)\n        \n        # Check if DataFrame is empty\n        if df.empty:\n            return pd.DataFrame(columns=COLUMNS), None\n        \n        # Calculate sum and mean\n        df['sum'] = df['list'].apply(np.sum)\n        df['mean'] = df['list'].apply(np.mean)\n        \n        # Plotting\n        fig, ax = plt.subplots()\n        df.plot(kind='bar', x='email', y=['sum', 'mean'], ax=ax)\n        ax.set_title('Sum and Mean of Lists per Email')\n        \n        return df, ax\n    \n    except FileNotFoundError:\n        print(f\"The file {json_file} was not found.\")\n        return pd.DataFrame(columns=COLUMNS), None\n    except json.JSONDecodeError:\n        print(\"Error decoding JSON. Please ensure the file is correctly formatted.\")\n        return pd.DataFrame(columns=COLUMNS), None\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return pd.DataFrame(columns=COLUMNS), None"}
{"task_id": "BigCodeBench/71", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport ast\ndef task_func(csv_file):\n    \"\"\"\n    Load e-mail data from a CSV file, convert it into a Pandas DataFrame, and calculate the sum, mean, and standard deviation of the list associated with each e-mail. Additionally, this function will\n    draw a histogram of the mean values and return both the DataFrame and the histogram plot.\n    \n    Parameters:\n    - csv_file (str): The path to the CSV file containing email data.\n    \n    Returns:\n    - tuple: A DataFrame and a histogram plot.\n    \"\"\"\n    # Load data from CSV\n    df = pd.read_csv(csv_file)\n    \n    # Assuming 'list' column contains string representations of lists that need to be converted back to lists\n    df['list'] = df['list'].apply(ast.literal_eval)\n    \n    # Calculate sum, mean, and std for each 'list' and add them as new columns\n    df['sum'] = df['list'].apply(np.sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['std'] = df['list'].apply(np.std)\n    \n    # Draw histogram of mean values\n    plt.figure(figsize=(10, 6))\n    plot = sns.histplot(df['mean'], kde=True, bins=20, color='skyblue', edgecolor='black')\n    plt.title('Histogram of Mean List Values per Email')\n    plt.xlabel('Mean Value')\n    plt.ylabel('Frequency')\n    \n    return df, plot.get_figure()"}
{"task_id": "BigCodeBench/72", "solution": "import pandas as pd\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ast\ndef task_func(directory):\n    # Check if directory exists and is not empty\n    if not os.path.isdir(directory) or not os.listdir(directory):\n        return pd.DataFrame(columns=['email', 'sum', 'mean', 'median']), None\n    \n    # Find the longest filename in the directory\n    longest_file = max(os.listdir(directory), key=len)\n    file_path = os.path.join(directory, longest_file)\n    \n    # Check if the longest file is a csv\n    if not file_path.endswith('.csv'):\n        return pd.DataFrame(columns=['email', 'sum', 'mean', 'median']), None\n    \n    # Load the data\n    data = pd.read_csv(file_path)\n    \n    # Convert the 'list' column from string to list\n    data['list'] = data['list'].apply(ast.literal_eval)\n    \n    # Calculate sum, mean, and median\n    data['sum'] = data['list'].apply(np.sum)\n    data['mean'] = data['list'].apply(np.mean)\n    data['median'] = data['list'].apply(np.median)\n    \n    # Plot histogram of the median\n    fig, ax = plt.subplots()\n    ax.hist(data['median'], bins='auto')  # arguments are passed to np.histogram\n    ax.set_title(\"Histogram of the median\")\n    \n    return data, ax"}
{"task_id": "BigCodeBench/73", "solution": "import pandas as pd\nimport sqlite3\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ast\ndef task_func(db_file):\n    # Connect to SQLite database\n    conn = sqlite3.connect(db_file)\n    # Load e-mail data into DataFrame\n    df = pd.read_sql_query(\"SELECT * from EmailData\", conn)\n    \n    # Convert the 'list' column from string to Python list\n    df['list'] = df['list'].apply(ast.literal_eval)\n    \n    # Calculate sum, mean, and variance for each email's list\n    df['sum'] = df['list'].apply(np.sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['var'] = df['list'].apply(np.var)\n    \n    # Close the SQLite connection\n    conn.close()\n    \n    # Plotting the sum, mean, and variance\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', x='email', y=['sum', 'mean', 'var'], ax=ax)\n    ax.set_title('Email Data Statistics')\n    ax.set_ylabel('Values')\n    ax.set_xlabel('Email')\n    \n    # Return DataFrame and Axes object\n    return df, ax"}
{"task_id": "BigCodeBench/74", "solution": "import socket\nimport requests\ndef task_func(host):\n    if not host:\n        raise ValueError(\"Host must be a non-empty string.\")\n    \n    try:\n        # Resolve IP address\n        ip_address = socket.gethostbyname(host)\n    except socket.gaierror as e:\n        raise ConnectionError(f\"Unable to resolve host '{host}': {e}\")\n\n    try:\n        # Fetch geolocation information\n        response = requests.get(f'https://ipinfo.io/{ip_address}', timeout=10)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx or 5xx)\n        geolocation = response.json()\n    except requests.RequestException as e:\n        raise ConnectionError(f\"Problem fetching geolocation: {e}\")\n\n    # Combine results into a dictionary\n    result = {'ip_address': ip_address, 'geolocation': geolocation}\n    return result"}
{"task_id": "BigCodeBench/75", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\nfrom datetime import datetime, timedelta\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, fruits=None, days=None, seed=None, sales_lower_bound=1, sales_upper_bound=50):\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"df must be a pandas DataFrame\")\n    if not df.empty:\n        raise ValueError(\"df must be empty\")\n    if sales_lower_bound >= sales_upper_bound:\n        raise ValueError(\"sales_lower_bound must be less than sales_upper_bound\")\n    \n    if fruits is None:\n        fruits = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry']\n    if days is None:\n        start_date = datetime(2024, 1, 1)\n        end_date = datetime(2024, 1, 7)\n        days = [start_date + timedelta(days=x) for x in range((end_date - start_date).days + 1)]\n    \n    np.random.seed(seed)\n    \n    sales_data = []\n    for fruit, day in itertools.product(fruits, days):\n        sales = np.random.randint(sales_lower_bound, sales_upper_bound)\n        sales_data.append({'Fruit': fruit, 'Day': day, 'Sales': sales})\n    \n    report_df = pd.DataFrame(sales_data)\n    df = pd.concat([df, report_df], ignore_index=True)\n    \n    plt.figure(figsize=(10, 6))\n    plot = sns.boxplot(x='Fruit', y='Sales', data=report_df)\n    plot.set_title('Fruit Sales Data')\n    plot.set_xlabel('Fruit')\n    plot.set_ylabel('Sales')\n    \n    return df, plot"}
{"task_id": "BigCodeBench/76", "solution": "import random\nimport string\nclass HttpResponseMock:\n    def __init__(self):\n        self.cookies = {}\n\n    def set_cookie(self, key, value, max_age):\n        self.cookies[key] = value\n        self.cookies[key]['max-age'] = max_age\nclass DjangoSettingsMock:\n    def __init__(self):\n        self.SESSION_COOKIE_NAME = 'session_key'\nsettings = DjangoSettingsMock()\ndef task_func(request, session_expire_time):\n    if not isinstance(request, HttpRequestMock):\n        raise TypeError(\"request must be an instance of HttpRequestMock\")\n\n    session_key = ''.join(random.choices(string.ascii_letters + string.digits, k=20))\n    \n    if not (any(c.isdigit() for c in session_key) and any(c.isalpha() for c in session_key)):\n        raise ValueError(\"Session key must contain both letters and digits\")\n    \n    if len(session_key) != 20:\n        raise ValueError(\"Session key length must be 20\")\n    \n    response = HttpResponseMock()\n    response.set_cookie(settings.SESSION_COOKIE_NAME, session_key, session_expire_time)\n    response.content = \"Session key generated successfully.\"\n    return response\nclass HttpRequestMock:\n    def __init__(self):\n        pass\nrequest = HttpRequestMock()"}
{"task_id": "BigCodeBench/77", "solution": "import hashlib\nimport base64\nfrom django.http import HttpResponseBadRequest, HttpResponse\ndef task_func(data):\n    try:\n        username = data.get('username')\n        password_base64 = data.get('password')\n        \n        if not username or not password_base64:\n            return HttpResponseBadRequest('Bad Request. Missing username or password.')\n        \n        # Decode the base64 encoded password\n        password_bytes = base64.b64decode(password_base64)\n        \n        # Hash the expected password and compare\n        expected_password_hash = hashlib.sha256('password'.encode()).digest()\n        if password_bytes == expected_password_hash:\n            return HttpResponse('Login successful.', status=200)\n        else:\n            return HttpResponse('Login failed.', status=401)\n    except (binascii.Error, ValueError) as e:\n        # Handle decoding errors or value errors\n        return HttpResponseBadRequest(f'Bad Request. Invalid password format: {str(e)}')\n    except Exception as e:\n        # Handle other unexpected exceptions\n        return HttpResponseServerError(f'Server Error: {str(e)}')"}
{"task_id": "BigCodeBench/78", "solution": "from django.http import HttpResponse\nimport csv\nimport io\ndef task_func(request, header, csv_data):\n    \"\"\"\n    Generate a CSV file response from a Django HttpRequest.\n    \"\"\"\n    # Create a CSV in memory\n    csv_buffer = io.StringIO()\n    csv_writer = csv.writer(csv_buffer)\n    \n    # Write the header\n    csv_writer.writerow(header)\n    \n    # Write the data rows\n    for row in csv_data:\n        csv_writer.writerow(row)\n    \n    # Prepare the Django response\n    response = HttpResponse(csv_buffer.getvalue(), content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"data.csv\"'\n    \n    return response"}
{"task_id": "BigCodeBench/79", "solution": "import zipfile\nimport io\nfrom django.http import FileResponse\nfrom django.conf import settings\ndef task_func(request, file_paths):\n    \"\"\"\n    Generates a ZIP file response for a Django HttpRequest, zipping the specified files.\n    \"\"\"\n    # Ensure Django settings are configured, for demonstration purposes in a standalone script\n    if not settings.configured:\n        settings.configure()\n\n    # Create an in-memory file to hold the zip archive\n    zip_buffer = io.BytesIO()\n\n    # Create a ZipFile object\n    with zipfile.ZipFile(zip_buffer, 'w') as zip_file:\n        for file_path in file_paths:\n            # If file_paths contain file names or paths, adjust this part to handle actual file reading\n            # For simplicity, assuming file_paths are actual file paths that we can open\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                # Add each file to the zip archive\n                zip_file.writestr(file_path.split('/')[-1], file_content)\n\n    # Set the in-memory file position to the beginning\n    zip_buffer.seek(0)\n\n    # Create a Django FileResponse with the zip file\n    response = FileResponse(zip_buffer, content_type='application/zip')\n    response['Content-Disposition'] = 'attachment; filename=\"files.zip\"'\n\n    return response"}
{"task_id": "BigCodeBench/80", "solution": "from flask import Flask, render_template, request\nimport json\nimport logging\ndef task_func(template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n\n    @app.route('/', methods=['POST'])\n    def root():\n        try:\n            data = request.get_json()\n            logging.info(json.dumps(data, indent=2))\n            return render_template('index.html', data=data)\n        except Exception as e:\n            logging.error(f\"Error processing request: {str(e)}\")\n            return \"An error occurred\", 500\n\n    return app"}
{"task_id": "BigCodeBench/81", "solution": "from flask import Flask\nfrom flask_restful import Resource, Api\nimport requests\ndef task_func(api_url, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    \n    class DataFetch(Resource):\n        def get(self):\n            response = requests.get(api_url)\n            if response.status_code == 200:\n                return response.json(), 200\n            else:\n                return {\"error\": \"Failed to fetch data\"}, response.status_code\n    \n    api = Api(app)\n    api.add_resource(DataFetch, '/data')\n    \n    return app"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\nclass User(UserMixin):\n    def __init__(self, id, username, password):\n        self.id = id\n        self.username = username\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\ndef task_func(secret_key, template_folder):\n    app = Flask(__name__)\n    app.config['SECRET_KEY'] = secret_key\n    app.template_folder = template_folder\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n\n    users = {1: User(1, 'admin', 'password')}  # Simple in-memory user database\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return users.get(int(user_id))\n\n    @app.route('/')\n    def home():\n        return render_template('home.html')\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = users.get(form.username.data)\n            if user and user.check_password(form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n        return render_template('login.html', form=form)\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return render_template('protected.html', name=current_user.username)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('login'))\n\n    return app"}
{"task_id": "BigCodeBench/83", "solution": "from flask import Flask\nfrom flask_mail import Mail, Message\ndef task_func(smtp_server, smtp_port, smtp_user, smtp_password, template_folder):\n    \"\"\"\n    Creates a Flask application configured to send emails using Flask-Mail.\n    \"\"\"\n    # Create a Flask instance\n    app = Flask(__name__)\n    \n    # Configure Flask-Mail with provided SMTP details\n    app.config['MAIL_SERVER'] = smtp_server\n    app.config['MAIL_PORT'] = smtp_port\n    app.config['MAIL_USERNAME'] = smtp_user\n    app.config['MAIL_PASSWORD'] = smtp_password\n    app.config['MAIL_USE_TLS'] = True  # Assuming secure connection; change if using SSL\n    app.config['MAIL_DEFAULT_SENDER'] = smtp_user\n    app.config['MAIL_TEMPLATE_FOLDER'] = template_folder\n\n    # Initialize Flask-Mail extension\n    mail = Mail(app)\n\n    # Define a route to send a test email (uncomment and use with caution as it will send an email on every request)\n    # @app.route('/send-test-email')\n    # def send_test_email():\n    #     msg = Message('Test Email', recipients=['recipient@example.com'])\n    #     msg.html = \"<h1>This is a test email from Flask-Mail.</h1>\"\n    #     mail.send(msg)\n    #     return 'Test email sent!'\n\n    return app"}
{"task_id": "BigCodeBench/84", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(products, n_samples=100, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42):\n    if not isinstance(products, list) or not all(isinstance(product, str) for product in products):\n        raise TypeError(\"Products must be a list of strings.\")\n    if not isinstance(n_samples, int) or n_samples <= 0:\n        raise ValueError(\"n_samples must be a positive integer.\")\n    if sales_lower > sales_upper:\n        raise ValueError(\"sales_lower must not be greater than sales_upper.\")\n    if not (isinstance(profit_margin_min, (int, float)) and 0 <= profit_margin_min < 1):\n        raise TypeError(\"profit_margin_min must be a numeric value between 0 and 1.\")\n    if not (isinstance(profit_margin_max, (int, float)) and 0 <= profit_margin_max < 1):\n        raise TypeError(\"profit_margin_max must be a numeric value between 0 and 1.\")\n    \n    np.random.seed(random_seed)\n    \n    # Generate random sales data\n    sales_data = {product: np.random.randint(sales_lower, sales_upper, n_samples) for product in products}\n    \n    # Calculate profit for each sale (assuming cost is the sales value minus profit margin)\n    profit_data = {product: sales_data[product] * np.random.uniform(profit_margin_min, profit_margin_max, n_samples) for product in products}\n    \n    # Combine sales and profit data, then aggregate and calculate total profit\n    df = pd.DataFrame([(product, sale, profit) for product in products for sale, profit in zip(sales_data[product], profit_data[product])], columns=['Product', 'Sales', 'Profit'])\n    df = df.groupby('Product').agg({'Sales': 'sum', 'Profit': 'sum'}).sort_values(by='Profit', ascending=False)\n    \n    return df\nproducts = [\"iPhone\", \"iPad\", \"Macbook\", \"Airpods\", \"Apple Watch\"]"}
{"task_id": "BigCodeBench/85", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\ndef task_func(start_date, end_date, random_seed=42):\n    if end_date < start_date:\n        raise ValueError(\"'end_date' must not be before 'start_date'.\")\n\n    np.random.seed(random_seed)\n    \n    dates = pd.date_range(start_date, end_date, freq='D')\n    temperatures = np.random.uniform(-10, 40, len(dates))\n    humidity = np.random.uniform(20, 100, len(dates))\n    wind_speed = np.random.uniform(0, 20, len(dates))\n    \n    weather_data = pd.DataFrame({\n        'Date': dates,\n        'Temperature': temperatures,\n        'Humidity': humidity,\n        'Wind Speed': wind_speed\n    })\n    \n    fig, ax = plt.subplots(figsize=(14, 7))\n    ax.plot(weather_data['Date'], weather_data['Temperature'], label='Temperature')\n    ax.plot(weather_data['Date'], weather_data['Humidity'], label='Humidity')\n    ax.plot(weather_data['Date'], weather_data['Wind Speed'], label='Wind Speed')\n    ax.set_title('Simulated Daily Weather Data')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Value')\n    ax.legend()\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    \n    return weather_data, ax\nstart_date = datetime(2021, 1, 1)\nend_date = datetime(2021, 12, 31)"}
{"task_id": "BigCodeBench/86", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(students=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"], seed=42):\n    np.random.seed(seed)  # Set the seed for reproducibility\n    \n    # Generate random scores for each student\n    scores = np.random.randint(0, 100, len(students))\n    \n    # Create a DataFrame\n    data = {'Student': students, 'Score': scores}\n    df = pd.DataFrame(data)\n    \n    # Sort the DataFrame by 'Score' in ascending order\n    df_sorted = df.sort_values(by='Score')\n    \n    # Create a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(df_sorted['Student'], df_sorted['Score'])\n    ax.set_xlabel('Student')\n    ax.set_ylabel('Score')\n    ax.set_title('Scores of Students')\n    \n    # Return the sorted DataFrame and the plot's Axes object\n    return df_sorted, ax"}
{"task_id": "BigCodeBench/87", "solution": "import pandas as pd\nfrom random import choices, seed\ndef task_func(products, ratings, weights, random_seed=42):\n    \"\"\"\n    (Details as provided in the question)\n    \"\"\"\n    # Set the random seed for reproducibility\n    seed(random_seed)\n    \n    # Generate random ratings for each product based on weights\n    ratings_data = [choices(ratings, weights=weights)[0] for _ in products]\n    \n    # Create a DataFrame\n    data = {'Product': products, 'Rating': ratings_data}\n    df = pd.DataFrame(data)\n    \n    # Sort the DataFrame by 'Rating' in descending order\n    df_sorted = df.sort_values(by='Rating', ascending=False)\n    \n    return df_sorted"}
{"task_id": "BigCodeBench/88", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\ndef task_func(start_date, end_date, seed=42):\n    np.random.seed(seed)\n    \n    # Generate date range\n    dates = pd.date_range(start_date, end_date)\n    \n    # Generate random sales data\n    sales = np.random.randint(0, 501, size=len(dates))\n    \n    # Create DataFrame\n    data = pd.DataFrame({'Date': dates, 'Sales': sales})\n    \n    # Plot sales over time\n    fig, ax = plt.subplots()\n    ax.plot(data['Date'], data['Sales'], marker='o', linestyle='-', color='b')\n    ax.set_title('Sales Over Time')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n    plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels\n    \n    return data, ax"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n    # Standardize the specified column\n    scaler = StandardScaler()\n    standardized_col = scaler.fit_transform(data[:, np.newaxis, column]).flatten()\n\n    # Calculate Z-scores\n    z_scores = stats.zscore(standardized_col)\n\n    # Identify outliers\n    outliers = np.where(np.abs(z_scores) > outlier_z_score)\n\n    # Remove outliers from the original data\n    data_without_outliers = np.delete(data, outliers, axis=0)\n\n    # Visualize data\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.scatter(range(data.shape[0]), data[:, column], label='Data with Outliers')\n    plt.title('Data with Outliers')\n    plt.legend()\n\n    plt.subplot(1, 2, 2)\n    plt.scatter(range(data_without_outliers.shape[0]), data_without_outliers[:, column], label='Data without Outliers')\n    plt.title('Data without Outliers')\n    plt.legend()\n\n    plt.tight_layout()\n    plt.show()\n\n    return data, data_without_outliers, outliers\ndata = np.array([[14, 25], [1, 22], [7, 8], [100, 200]])\ncolumn = 1\noutlier_z_score = 3.0"}
{"task_id": "BigCodeBench/90", "solution": "import numpy as np\nimport math\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the Haversine distance between two points on the Earth.\n    \"\"\"\n    lat1, lon1, lat2, lon2 = map(np.radians, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2)**2\n    c = 2 * np.arcsin(np.sqrt(a))\n    return 6371 * c\ndef task_func(data, target, k):\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a non-negative integer.\")\n    \n    # Convert DataFrame to numpy array for easier computation\n    data_array = data[['Latitude', 'Longitude']].values\n    target_array = np.array(target)\n    \n    # Calculate distances from the target to each data point\n    distances = [haversine_distance(*target, *data_point) for data_point in data_array]\n    \n    # Pair distances with data points and sort by distance\n    paired_data = list(zip(distances, data_array))\n    paired_data.sort()\n    \n    # Return the 'k' nearest neighbors\n    return [data_point for _, data_point in paired_data[:k]]"}
{"task_id": "BigCodeBench/91", "solution": "import pandas as pd\nfrom scipy.stats import linregress\nimport matplotlib.pyplot as plt\ndef task_func(data, column1, column2):\n    \"\"\"\n    Perform a linear regression on two columns of a dataset and record the result.\n    Additionally, generates a plot representing the original data and the fitted line.\n\n    Parameters:\n    data (DataFrame): The dataset.\n    column1 (str): The name of the first column.\n    column2 (str): The name of the second column.\n\n    Returns:\n    tuple: The slope, intercept, r-value, p-value, and standard error of the regression.\n    Axes: The matplotlib Axes object containing the plot.\n\n    Raises:\n    ValueError: If the specified columns do not exist in the DataFrame.\n    \"\"\"\n    # Check if columns exist in the DataFrame\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(f\"Columns {column1} or {column2} do not exist in the DataFrame.\")\n\n    # Perform linear regression\n    regression = linregress(data[column1], data[column2])\n\n    # Plotting the data and the regression line\n    fig, ax = plt.subplots()\n    ax.scatter(data[column1], data[column2], color='blue', label='Data Points')\n    ax.plot(data[column1], regression.intercept + regression.slope * data[column1], color='red', label='Fitted Line')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.legend()\n\n    return regression, ax"}
{"task_id": "BigCodeBench/92", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=3):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n    \n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    labels = kmeans.fit_predict(data)\n    \n    # Generate scatter plot\n    plt.figure(figsize=(8, 6))\n    plt.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, s=50, cmap='viridis')\n    \n    # Plot the centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], \n                c='red', s=200, alpha=0.5, label='Centroids')\n    \n    plt.title('K-Means Clustering')\n    plt.xlabel('Feature1')\n    plt.ylabel('Feature2')\n    plt.legend()\n    \n    return labels, plt.gca()"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer.\")\n    \n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    \n    # Convert transformed data back to DataFrame for return (optional)\n    columns = [f\"PC{i+1}\" for i in range(n_components)]\n    transformed_data = pd.DataFrame(transformed_data, columns=columns)\n    \n    # Generate a scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(transformed_data.iloc[:, 0], transformed_data.iloc[:, 1])\n    ax.set_xlabel(columns[0])\n    ax.set_ylabel(columns[1])\n    ax.set_title('PCA Scatter Plot')\n    \n    # Return transformed data and the plot's Axes object\n    return transformed_data, ax"}
{"task_id": "BigCodeBench/94", "solution": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, num_samples):\n    np.random.seed(0)  # For reproducible results\n    samples = np.random.normal(mean, std_dev, num_samples)\n    \n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True, alpha=0.6, color='b')\n    \n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mean, std_dev)\n    ax.plot(x, p, 'k', linewidth=2)\n    ax.set_title('Fit results: mean = %.2f, std = %.2f' % (mean, std_dev))\n    ax.set_xlabel('Values')\n    ax.set_ylabel('Probability Density')\n    \n    return samples, fig"}
{"task_id": "BigCodeBench/95", "solution": "import pandas as pd\nfrom random import randint, uniform, seed\ndef task_func(categories=None, months=None, random_seed=42):\n    if categories is None:\n        categories = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Beauty & Personal Care']\n    if months is None:\n        months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if not all(isinstance(lst, list) and lst for lst in [categories, months]):\n        raise ValueError(\"Both 'categories' and 'months' must be non-empty lists.\")\n    \n    seed(random_seed)  # Ensure reproducibility\n    \n    data = []\n    for month in months:\n        for category in categories:\n            sales = randint(100, 500) + uniform(0, 1)  # Combine integer and float for diverse sales data\n            data.append([month, category, sales])\n    \n    return pd.DataFrame(data, columns=['Month', 'Category', 'Sales'])"}
{"task_id": "BigCodeBench/96", "solution": "import csv\nfrom collections import Counter\nimport operator\ndef task_func(csv_file, csv_delimiter):\n    \"\"\"\n    The function reads a CSV file and counts the most common words in the file.\n    \"\"\"\n    # Initialize an empty Counter object\n    word_counts = Counter()\n\n    # Open the CSV file\n    with open(csv_file, 'r', encoding='utf-8') as file:\n        # Read the CSV file, assuming each cell contains a single word\n        reader = csv.reader(file, delimiter=csv_delimiter)\n        for row in reader:\n            # Flatten the row (in case of more than one column) and update the word counts\n            for word in row:\n                word_counts[word] += 1\n\n    # Convert the Counter object to a list of tuples and sort it by count in descending order\n    sorted_word_counts = sorted(word_counts.items(), key=operator.itemgetter(1), reverse=True)\n\n    return sorted_word_counts"}
{"task_id": "BigCodeBench/97", "solution": "import math\nimport itertools\nfrom functools import reduce\ndef task_func(numbers):\n    \"\"\"\n    Generates all possible combinations of the provided numbers in a given list for\n    each possible length. For each combination, it computes the product of the numbers\n    in the combination. It then computes the logarithm of each product and sums these\n    logarithms to produce the final result.\n\n    Parameters:\n        numbers (list of int): A list of integers for which combinations are formed.\n\n    Returns:\n        float: The sum of the logarithms of the products of all combinations of numbers.\n    \"\"\"\n    # Generate all combinations of the given numbers for each possible length\n    all_combinations = (itertools.combinations(numbers, r) for r in range(1, len(numbers) + 1))\n    \n    # Calculate the product of numbers in each combination and then the sum of their logarithms\n    log_sum = sum(math.log(reduce(lambda x, y: x * y, comb, 1)) for comb in itertools.chain(*all_combinations))\n    \n    return log_sum\nnumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"}
{"task_id": "BigCodeBench/98", "solution": "import random\nimport string\nfrom collections import Counter\ndef task_func(num_strings, string_length):\n    \"\"\"\n    The function to generate random strings and count character frequencies.\n    \"\"\"\n    # Generate random strings\n    random_strings = [''.join(random.choices(string.ascii_lowercase, k=string_length)) for _ in range(num_strings)]\n    \n    # Count the frequency of each character across all strings\n    char_frequency = Counter(''.join(random_strings))\n    \n    # Sort the characters by frequency in descending order\n    sorted_frequency = char_frequency.most_common()\n    \n    return sorted_frequency"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef set_arial_font():\n    \"\"\"Sets the Arial font for the plot.\"\"\"\n    plt.rcParams['font.family'] = 'Arial'\ndef task_func():\n    \"\"\"\n    Draws a seaborn pair plot of the iris dataset using Arial font.\n    \"\"\"\n    set_arial_font()  # Set Arial as the font for the plot\n    \n    # Load the iris dataset\n    iris = load_iris()\n    df = pd.DataFrame(iris.data, columns=iris.feature_names)\n    df['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)\n    \n    # Create a pair plot\n    g = sns.pairplot(df, hue='species', diag_kind='hist')\n    \n    # Set the title and labels\n    g.fig.suptitle('Iris Dataset Pair Plot', fontname=\"Arial\", fontsize=16)\n    for ax in g.axes.flat:\n        for label in ax.get_xticklabels() + ax.get_yticklabels():\n            label.set_fontname(\"Arial\")\n    \n    return g.fig"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime, timedelta\ndef task_func(seed=42):\n    \"\"\"\n    Generates a plot of random time series data for the past 30 days with reproducibility \n    controlled by an optional seed parameter.\n    \n    Parameters:\n    seed (int, optional): Seed for the random number generator to ensure reproducibility. Defaults to 42.\n    \n    Returns:\n    matplotlib.axes.Axes: The Axes object containing a line plot of the time series data.\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Generate dates for the past 30 days\n    dates = [datetime.now() - timedelta(days=x) for x in range(30)]\n    \n    # Generate random values\n    values = [random.random() for _ in range(30)]\n    \n    # Create a DataFrame\n    df = pd.DataFrame({'Date': dates, 'Value': values})\n    \n    # Ensure the date column is recognized as datetime\n    df['Date'] = pd.to_datetime(df['Date'])\n    \n    # Sort the DataFrame by date\n    df.sort_values('Date', inplace=True)\n    \n    # Plotting\n    plt.figure(figsize=(10, 5))\n    ax = df.plot(x='Date', y='Value', title='Random Time Series Data', xlabel='Date', ylabel='Value', style='.-')\n    \n    # Setting the font to Arial for better readability\n    plt.rcParams['font.family'] = 'Arial'\n    \n    # Show the plot\n    plt.tight_layout()\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport requests\nfrom io import StringIO\ndef load_data(url):\n    \"\"\"Load data from a URL into a DataFrame.\"\"\"\n    response = requests.get(url)\n    data = pd.read_csv(StringIO(response.text))\n    return data\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42, savefig_path=None):\n    \"\"\"\n    Draw the correlation heatmap of the Boston Housing dataset using Seaborn.\n    \"\"\"\n    np.random.seed(seed)  # Set seed for reproducibility\n    \n    # Load the data\n    try:\n        data = load_data(data_url)\n    except Exception as e:\n        raise ValueError(\"Error loading data: \" + str(e))\n    \n    # Compute the correlation matrix\n    corr = data.corr()\n\n    # Set up the matplotlib figure\n    plt.figure(figsize=(11, 9))\n\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n    # Draw the heatmap with the mask and correct aspect ratio\n    ax = sns.heatmap(corr, cmap=cmap, vmax=.3, center=0,\n                    square=True, linewidths=.5, cbar_kws={\"shrink\": .5},\n                    annot=True, fmt=\".2f\", font_family=\"sans-serif\", font_weight='bold', annot_kws={\"size\": 10})\n\n    if savefig_path:\n        try:\n            plt.savefig(savefig_path, dpi=300, bbox_inches='tight')\n        except Exception as e:\n            raise ValueError(\"Error saving the plot: \" + str(e))\n    \n    return ax"}
{"task_id": "BigCodeBench/102", "solution": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\ndef set_arial_font():\n    \"\"\"Set the default font to Arial in matplotlib.\"\"\"\n    plt.rcParams['font.family'] = 'Arial'\ndef task_func():\n    set_arial_font()  # Set Arial as the font for the plot\n    \n    # Load the diabetes dataset\n    diabetes = load_diabetes()\n    df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)\n    df['target'] = diabetes.target\n    \n    # Create a pairplot\n    fig = sns.pairplot(df, diag_kind='kde')\n    \n    return fig, df"}
{"task_id": "BigCodeBench/103", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\ndef task_func(temperatures):\n    if not isinstance(temperatures, pd.DataFrame) or 'temperature' not in temperatures.columns or temperatures.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame with a 'temperature' column.\")\n    \n    # Ensure the DataFrame index is DateTime and in the correct timezone if not already set\n    if not isinstance(temperatures.index, pd.DatetimeIndex) or temperatures.index.tz.zone != 'America/New_York':\n        temperatures = temperatures.set_index(pd.DatetimeIndex(temperatures.index).tz_convert('America/New_York'))\n    \n    plt.figure(figsize=(14, 7))\n    ax = temperatures['temperature'].plot(kind='line', xlabel='Date', ylabel='Temperature (\u00b0C)', title='Daily Temperatures in New York', fontfamily='Arial')\n    \n    # Improve readability by setting a grid and rotating date labels\n    ax.grid(True)\n    plt.xticks(rotation=45)\n    \n    return ax\ntemperatures = pd.DataFrame({\n    'temperature': [random.randint(-10, 30) for _ in range(365)],\n    'date': pd.date_range(start='01-01-2023', periods=365, tz='America/New_York')\n}).set_index('date')"}
{"task_id": "BigCodeBench/104", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\ndef task_func(df, groups=['A', 'B', 'C', 'D', 'E']):\n    if not isinstance(df, pd.DataFrame) or set(['group', 'date', 'value']).issubset(set(df.columns)):\n        raise ValueError(\"Input must be a DataFrame with 'group', 'date', and 'value' columns.\")\n    \n    # Convert date to ordinal\n    df['date_ordinal'] = df['date'].apply(lambda x: x.toordinal())\n    \n    # Setup plot\n    fig, ax = plt.subplots()\n    colors = cycle(['r', 'g', 'b', 'y', 'm'])  # cycle through colors for different groups\n    \n    for group in groups:\n        # Check if the group exists in the DataFrame\n        if group not in df['group'].values:\n            continue\n        group_df = df[df['group'] == group]\n        ax.scatter(group_df['date_ordinal'], group_df['value'], color=next(colors), label=group)\n    \n    ax.set_title('Scatterplot of Values for Each Group Over Time')\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n    ax.legend()\n    \n    return ax"}
{"task_id": "BigCodeBench/105", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\ndef task_func(df):\n    if df.empty:\n        raise ValueError(\"The dataframe is empty.\")\n    if not set(['group', 'date', 'value']).issubset(set(df.columns)):\n        raise ValueError(\"Missing required columns in the dataframe.\")\n    if not pd.api.types.is_datetime64_any_dtype(df['date']):\n        raise ValueError(\"'date' column is not in datetime format.\")\n    \n    # Convert 'date' to ordinal format\n    df['date_ordinal'] = df['date'].apply(lambda x: x.toordinal())\n    \n    # Create a correlation matrix\n    corr_matrix = df.corr()\n    \n    # Generate a heatmap for the correlation matrix\n    heatmap_fig, heatmap_ax = plt.subplots(figsize=(8, 6))\n    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=heatmap_ax)\n    heatmap_ax.set_title('Correlation Matrix')\n    \n    # Generate a pair plot\n    pairplot_grid = sns.pairplot(df, hue=\"group\")\n    \n    return heatmap_fig, pairplot_grid"}
{"task_id": "BigCodeBench/106", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Validate DataFrame and columns\n    if not isinstance(df, pd.DataFrame) or set(['group', 'date', 'value']).issubset(df.columns):\n        raise ValueError(\"Input must be a DataFrame with 'group', 'date', and 'value' columns.\")\n    if df['date'].dtype != 'datetime64[ns]':\n        raise ValueError(\"'date' column must be in datetime format.\")\n    \n    # Convert date to ordinal (number of days since 01-01-0001)\n    df['date_ordinal'] = df['date'].apply(lambda x: x.toordinal())\n    \n    # Linear Regression per group\n    models = {}\n    predictions = {}\n    for group in df['group'].unique():\n        group_df = df[df['group'] == group]\n        X = group_df['date_ordinal'].values.reshape(-1,1)\n        y = group_df['value'].values.reshape(-1,1)\n        \n        model = LinearRegression()\n        model.fit(X, y)\n        models[group] = model\n        predictions[group] = model.predict(X)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    for group in df['group'].unique():\n        group_df = df[df['group'] == group]\n        ax.plot(group_df['date'], group_df['value'], label=f'Original {group}', marker='o')\n        ax.plot(group_df['date'], predictions[group].flatten(), label=f'Predicted {group}', linestyle='--')\n    ax.set_title('Value vs Date (Linear Regression Prediction)')\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n    ax.legend()\n    ax.grid(True)\n    \n    return models, predictions, ax"}
{"task_id": "BigCodeBench/107", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(df, n_clusters=3, random_state=0):\n    if df.empty or not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"DataFrame is empty or lacks required columns: 'group', 'date', 'value'.\")\n\n    # Convert 'date' column to ordinal\n    df['Date (ordinal)'] = df['date'].apply(lambda x: x.toordinal())\n\n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state)\n    df['Cluster'] = kmeans.fit_predict(df[['Date (ordinal)', 'value']])\n\n    # Plotting\n    plt.figure(figsize=(10, 6))\n    scatter = plt.scatter(df['Date (ordinal)'], df['value'], c=df['Cluster'], cmap='viridis', label=df['Cluster'].astype(str))\n    plt.colorbar(scatter, label='Cluster')\n    plt.title('KMeans Clustering of Value vs Date')\n    plt.xlabel('Date (ordinal)')\n    plt.ylabel('Value')\n    \n    return plt.gca()"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    if not isinstance(df, pd.DataFrame) or set(df.columns) != {'group', 'date', 'value'}:\n        raise ValueError(\"Input must be a DataFrame with columns 'group', 'date', and 'value'\")\n    \n    if freq not in pd.date_range(start='2020-01-01', periods=2, freq=freq).freqstr:\n        raise ValueError(\"Invalid frequency string.\")\n    \n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"Decomposition model must be 'additive' or 'multiplicative'.\")\n\n    # Ensure the 'date' column is of datetime type\n    df['date'] = pd.to_datetime(df['date'])\n    \n    # Set 'date' as the index for time series analysis\n    df.set_index('date', inplace=True)\n    \n    # Perform decomposition\n    result = seasonal_decompose(df['value'], model=decomposition_model, freq=int(freq[1:]))\n\n    # Plot the decomposition\n    fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(10, 8), sharex=True)\n    result.trend.plot(ax=ax1)\n    ax1.set_ylabel('Trend')\n    result.seasonal.plot(ax=ax2)\n    ax2.set_ylabel('Seasonality')\n    result.resid.plot(ax=ax3)\n    ax3.set_ylabel('Residuals')\n    df['value'].plot(ax=ax4)\n    ax4.set_ylabel('Value')\n    ax4.set_title('Time Series Decomposition')\n    \n    # Return the result and the axes for further manipulation if needed\n    return result, ax4"}
{"task_id": "BigCodeBench/109", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, items=None, locations=None):\n    # Default items and locations if not provided\n    default_items = ['apple', 'banana', 'grape', 'orange', 'pineapple']\n    default_locations = ['store1', 'store2', 'store3', 'store4', 'store5']\n    \n    # Validate input DataFrame and columns\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' must be a pandas DataFrame.\")\n    if 'Item' not in df.columns or 'Location' not in df.columns:\n        raise ValueError(\"DataFrame must contain 'Item' and 'Location' columns.\")\n    \n    # Filter DataFrame based on provided items and locations\n    if items:\n        df = df[df['Item'].isin(items)]\n    if locations:\n        df = df[df['Location'].isin(locations)]\n    else:\n        df = df[df['Location'].isin(default_locations)]\n        items = items if items else default_items\n    \n    # Group by 'Location' and 'Item', then count occurrences\n    item_counts = df.groupby(['Location', 'Item']).size().unstack(fill_value=0)\n    \n    # Plotting\n    ax = item_counts.plot(kind='bar', stacked=True)\n    ax.set_title('Item Distribution by Location')\n    ax.set_xlabel('Location')\n    ax.set_ylabel('Count')\n    ax.legend(title='Item')\n    \n    return ax"}
{"task_id": "BigCodeBench/110", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or 'Date' not in df.columns or 'Sales' not in df.columns:\n        raise ValueError(\"Input must be a DataFrame with 'Date' and 'Sales' columns.\")\n    \n    if df['Sales'].empty:\n        raise ValueError(\"DataFrame contains no data to plot.\")\n    \n    # Ensure 'Date' is the index for correct plotting\n    df.set_index('Date', inplace=True)\n    \n    # Plotting\n    ax = df['Sales'].plot(kind='line', title='Daily Turnover', ylabel='Sales')\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/111", "solution": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['Date', 'Time', 'Temperature']):\n        raise ValueError(\"Input must be a DataFrame with 'Date', 'Time', and 'Temperature' columns.\")\n    \n    # Ensure the 'Date' and 'Time' columns are appropriately formatted for the heatmap (if not already)\n    df['DateTime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'])\n    df.set_index('DateTime', inplace=True)\n    \n    # Resample data to get a temperature average per time slot if there are multiple entries for the same time.\n    # This step assumes if there are multiple entries for the same date and time, it might be for different locations or measurements, and we're averaging them.\n    df = df.resample('D').mean()\n    \n    # Pivot the data to create the matrix for the heatmap\n    heatmap_data = df.pivot_table(index=df.index.date, columns=df.index.time, values='Temperature')\n    \n    # Draw the heat map\n    ax = sns.heatmap(heatmap_data, cmap='coolwarm', annot=True, fmt=\".1f\")\n    ax.set_title('Temperature Heatmap')\n    plt.tight_layout()  # Adjusts the plot to ensure everything fits without overlap\n    \n    return ax\nexample_df = pd.DataFrame({\n    'Date': pd.date_range(start='1/1/2021', end='12/31/2021'),\n    'Time': ['12:00']*365,\n    'Temperature': np.random.randint(-10, 35, size=365)\n})"}
{"task_id": "BigCodeBench/112", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or 'Status' not in df.columns:\n        raise ValueError(\"Input must be a DataFrame with a 'Status' column.\")\n    \n    # Count the frequency of each status\n    status_counts = df['Status'].value_counts()\n    \n    # Draw a pie chart\n    fig, ax = plt.subplots()\n    ax.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', startangle=140)\n    ax.set_title('Status Distribution')\n    \n    return ax"}
{"task_id": "BigCodeBench/113", "solution": "import json\nfrom collections import Counter\nimport random\ndef task_func(my_dict, keys):\n    if len(set(keys)) != 10:\n        raise ValueError(\"The 'keys' parameter must contain exactly 10 unique elements.\")\n    \n    # Add 10 random elements to the dictionary\n    for key in keys:\n        my_dict[key] = random.randint(1, 100)\n    \n    # Save the updated dictionary to a JSON file\n    json_path = 'updated_dictionary.json'\n    with open(json_path, 'w') as json_file:\n        json.dump(my_dict, json_file)\n    \n    # Save the counts of each key to a text file\n    txt_path = 'key_frequencies.txt'\n    with open(txt_path, 'w') as txt_file:\n        counter = Counter(my_dict)\n        for key, value in counter.items():\n            txt_file.write(f\"{key}: {value}\\n\")\n    \n    return my_dict, json_path, txt_path"}
{"task_id": "BigCodeBench/114", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(my_dict):\n    \"\"\"\n    The function definition is the same as provided in the question.\n    \"\"\"\n    if 'array' not in my_dict:\n        raise KeyError(\"The dictionary must contain an 'array' key.\")\n    \n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    \n    scaler = MinMaxScaler()\n    normalized_array = scaler.fit_transform(my_dict['array'].reshape(-1, 1))\n    \n    my_dict['normalized_array'] = normalized_array.flatten()\n    return my_dict"}
{"task_id": "BigCodeBench/115", "solution": "import numpy as np\nfrom scipy.stats import mode\nfrom scipy.stats import entropy\ndef task_func(numbers):\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    # Convert list to numpy array\n    numbers_array = np.array(numbers)\n    \n    # Calculate mode\n    mode_result = mode(numbers_array).mode[0]\n    \n    # Calculate entropy (base 2)\n    # First, get the probability distribution for each unique number\n    unique, counts = np.unique(numbers_array, return_counts=True)\n    probabilities = counts / len(numbers_array)\n    # Then, calculate entropy\n    entropy_result = entropy(probabilities, base=2)\n    \n    # Create and return the dictionary\n    return {'mode': mode_result, 'entropy': entropy_result}"}
{"task_id": "BigCodeBench/116", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, sample_size):\n    # Generate random samples\n    data = np.random.normal(mu, sigma, sample_size)\n    \n    # Plot histogram\n    plt.figure(figsize=(10, 6))\n    plt.hist(data, bins=30, alpha=0.75, color='blue', edgecolor='black')\n    plt.title('Histogram of Generated Samples')\n    plt.xlabel('Sample values')\n    plt.ylabel('Frequency')\n    plt.grid(axis='y', alpha=0.75)\n    \n    # Show the plot\n    plt.show()\n    \n    return data"}
{"task_id": "BigCodeBench/117", "solution": "import pandas as pd\nimport numpy as np\nfrom random import choice, seed as set_seed\ndef task_func(num_of_students, seed=42, name_list=None, gender_list=None, age_range=(15, 20), score_range=(50, 100)):\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer\")\n\n    # Set the seed for reproducibility\n    set_seed(seed)\n\n    # Default lists if not provided\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    # Generate the DataFrame\n    data = {\n        'Name': [choice(name_list) for _ in range(num_of_students)],\n        'Age': [np.random.randint(age_range[0], age_range[1]+1) for _ in range(num_of_students)],\n        'Gender': [choice(gender_list) for _ in range(num_of_students)],\n        'Score': [np.random.randint(score_range[0], score_range[1]+1) for _ in range(num_of_students)]\n    }\n\n    return pd.DataFrame(data)"}
{"task_id": "BigCodeBench/118", "solution": "import os\nimport shutil\ndef task_func(directory, backup_directory):\n    \"\"\"\n    Scans a specified directory for JSON files and copies them to a backup directory.\n    If the backup directory does not exist, it is created.\n    The function returns a list of paths to the copied files in the backup directory.\n    \"\"\"\n    # Ensure the backup directory exists\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n    \n    copied_files = []\n    \n    # Walk through the directory to find JSON files\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.json'):\n                source_file_path = os.path.join(root, file)\n                # Construct the destination path\n                destination_file_path = os.path.join(backup_directory, file)\n                # Copy the file to the backup directory\n                shutil.copy2(source_file_path, destination_file_path)\n                # Add the copied file's path to the list\n                copied_files.append(destination_file_path)\n    \n    return copied_files"}
{"task_id": "BigCodeBench/119", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    \"\"\"\n    Creates and displays a diagram of a parabola represented by the equation y = x^2.\n    \"\"\"\n    # Generate x values from -10 to 10 with 400 points\n    x = np.linspace(-10, 10, 400)\n    \n    # Calculate corresponding y values\n    y = x**2\n    \n    # Create a new plot\n    plt.figure()\n    \n    # Plot the parabola\n    plt.plot(x, y, label='y = x^2')\n    \n    # Set the title and labels\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    \n    # Enable the grid\n    plt.grid(True)\n    \n    # Show the legend\n    plt.legend()\n    \n    # Display the plot\n    plt.show()"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"Both start_date and end_date must be datetime.datetime instances.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must not be later than end_date.\")\n    \n    random_seed(seed)\n    \n    date_range = end_date - start_date\n    random_days = [start_date + timedelta(days=randint(0, date_range.days)) for _ in range(date_range.days + 1)]\n    \n    return pd.Series(random_days)"}
{"task_id": "BigCodeBench/121", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(my_list, seed=42):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list.\")\n    \n    # Add \"12\" to the list\n    my_list.append(\"12\")\n    \n    # Set the seed for reproducibility\n    np.random.seed(seed)\n    \n    # Define categories\n    categories = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n    \n    # Simulate sales data\n    sales_data = pd.DataFrame({\n        'Category': categories,\n        'Sales': np.random.randint(100, 5000, size=len(categories))\n    })\n    \n    # Sort the sales data for better readability (optional)\n    sales_data.sort_values(by='Sales', inplace=True, ascending=False)\n    \n    # Create a bar plot\n    ax = sales_data.plot(kind='bar', x='Category', y='Sales', title='Category-wise Sales Data')\n    \n    return sales_data, ax\nmy_list = [1, 2, 3]"}
{"task_id": "BigCodeBench/122", "solution": "import numpy as np\nimport random\ndef task_func(my_list):\n    # Append a random integer between 0 and 100 to the list\n    my_list.append(random.randint(0, 100))\n    \n    # Calculate the sum of the list which will determine the size of the numpy array\n    total_sum = sum(my_list)\n    \n    # Generate a numpy array of random floating-point numbers of size equal to the sum\n    result_array = np.random.rand(total_sum)\n    \n    return result_array"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    if not isinstance(my_list, list):\n        raise TypeError(\"Input 'my_list' must be a list.\")\n    \n    # Modify the list by adding '12'\n    my_list.append('12')\n    \n    # Check if there are any files to concatenate\n    files = glob.glob(os.path.join(file_dir, f'*{file_ext}'))\n    if not files:\n        raise FileNotFoundError(f\"No files found in directory {file_dir} with extension {file_ext}\")\n    \n    # Determine the number of files to concatenate\n    num_files_to_concat = sum([int(i) for i in my_list if i.isdigit()])\n    \n    # If the sum exceeds the number of available files, use all files\n    num_files_to_concat = min(num_files_to_concat, len(files))\n    \n    # Select files to concatenate\n    files_to_concat = files[:num_files_to_concat]\n    \n    # Concatenate the selected CSV files into a single DataFrame\n    df_concat = pd.concat((pd.read_csv(f) for f in files_to_concat), ignore_index=True)\n    \n    return df_concat"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint, seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n    if not isinstance(my_list, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(item, (int, float)) for item in my_list):\n        raise ValueError(\"All elements in the list must be numeric.\")\n\n    # Append 12 to the list\n    my_list.append(12)\n    \n    # Seed the random number generator for reproducibility\n    random_seed(seed)\n    \n    # Calculate the size for the random numbers list based on the sum of 'my_list'\n    rand_list_size = min(sum(my_list), size)\n    \n    # Generate the list of random integers\n    random_numbers = [randint(1, 100) for _ in range(rand_list_size)]\n    \n    # Measure the time taken\n    start_time = time.time()\n    # No explicit time-consuming operation after list creation, but assuming this as the process\n    time_taken = time.time() - start_time\n    \n    # Plot the histogram\n    plt.hist(random_numbers, bins=range(1, 102), edgecolor='black')\n    plt.title('Histogram of Random Numbers')\n    plt.xlabel('Number')\n    plt.ylabel('Frequency')\n    plt.xticks(range(1, 101))\n    ax = plt.gca()  # Get the current Axes object\n    \n    # Show the plot (comment this line if you're running this in a non-interactive environment)\n    plt.show()\n    \n    return time_taken, ax"}
{"task_id": "BigCodeBench/125", "solution": "from collections import defaultdict\nimport itertools\nimport json\nimport random\ndef task_func(LETTERS, n):\n    \"\"\"\n    Generates all possible combinations of a given set of letters of length 'n'.\n    Counts the occurrences of each letter in these combinations and saves the results\n    in a JSON file. The name of the file is prefix_<random-number-here>.json. The value of\n    <random-number-here> is between 0 and 100. \n\n    Parameters:\n        LETTERS (list): The list of letters to generate combinations from.\n        n (int): The length of the combinations.\n\n    Returns:\n        str: The name of the generated JSON file containing letter counts.\n    \"\"\"\n    # Generate all combinations\n    combinations = [''.join(comb) for comb in itertools.product(LETTERS, repeat=n)]\n    \n    # Count letter occurrences\n    letter_counts = defaultdict(int)\n    for combination in combinations:\n        for letter in combination:\n            letter_counts[letter] += 1\n    \n    # Generate a random number for the file name\n    random_num = random.randint(0, 100)\n    \n    # Define the file name\n    file_name = f'letter_combinations_{random_num}.json'\n    \n    # Save to JSON file\n    with open(file_name, 'w') as f:\n        json.dump(dict(letter_counts), f)\n    \n    return file_name"}
{"task_id": "BigCodeBench/126", "solution": "import pandas as pd\nfrom random import randint, seed as random_seed\nimport statistics\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(animals=None, seed=42):\n    random_seed(seed)\n    if animals is None:\n        animals = ['Lion', 'Elephant', 'Tiger', 'Giraffe', 'Panda']\n    \n    data = []\n    for animal in animals:\n        counts = [randint(1, 100) for _ in range(10)]\n        data.append({\n            'Animal': animal,\n            'Mean': statistics.mean(counts),\n            'Median': statistics.median(counts),\n            'Standard Deviation': np.std(counts)\n        })\n    \n    report = pd.DataFrame(data)\n    \n    # Bar chart generation\n    plt.figure(figsize=(10, 6))\n    report.set_index('Animal').plot(kind='bar')\n    plt.title('Number of Animals in Zoo')\n    plt.ylabel('Count')\n    plt.show()\n    \n    return report"}
{"task_id": "BigCodeBench/127", "solution": "import os\nimport shutil\nimport hashlib\ndef task_func(ROOT_DIR, DEST_DIR, SPECIFIC_HASH):\n    \"\"\"\n    Moves all files from a specified root directory (ROOT_DIR) to a target directory (DEST_DIR) if they match a specific hash value (SPECIFIC_HASH).\n    \"\"\"\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    count = 0\n    for root, dirs, files in os.walk(ROOT_DIR):\n        for file in files:\n            file_path = os.path.join(root, file)\n            with open(file_path, 'rb') as f:\n                file_hash = hashlib.md5(f.read()).hexdigest()\n            if file_hash == SPECIFIC_HASH:\n                shutil.move(file_path, os.path.join(DEST_DIR, file))\n                count += 1\n    return count"}
{"task_id": "BigCodeBench/128", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(POINTS=100):\n    \"\"\"\n    Simulates a random walk in a two-dimensional space and draws the path using matplotlib.\n    \"\"\"\n    # Initialize the starting point\n    x = [0]\n    y = [0]\n    \n    # Simulate the random walk\n    for _ in range(POINTS):\n        direction = randint(1, 4)  # Choose a random direction (1: right, 2: up, 3: left, 4: down)\n        if direction == 1:\n            x.append(x[-1] + 1)\n            y.append(y[-1])\n        elif direction == 2:\n            x.append(x[-1])\n            y.append(y[-1] + 1)\n        elif direction == 3:\n            x.append(x[-1] - 1)\n            y.append(y[-1])\n        else:\n            x.append(x[-1])\n            y.append(y[-1] - 1)\n    \n    # Plotting the random walk\n    plt.figure(figsize=(10, 10))  # Create a new figure\n    plt.plot(x, y, '-o', color='blue')  # Draw the path with blue color\n    plt.title('Random Walk')\n    plt.xlabel('X coordinate')\n    plt.ylabel('Y coordinate')\n    plt.grid(True)\n    plt.axis('equal')  # Ensure the aspect ratio is equal to show the walk correctly in all directions\n    plt.show()\n    \n    # Return the figure for verification\n    return plt.gcf()"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n    try:\n        # Send a GET request\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx, 5xx)\n        \n        # Parse the HTML content\n        soup = BeautifulSoup(response.text, 'html.parser')\n        \n        # Find the first table in the HTML\n        table = soup.find('table')\n        if table is None:\n            raise ValueError(\"No table found on the page.\")\n        \n        # Extract headers if available\n        header = table.find('thead')\n        header_rows = header.find_all('th') if header else []\n        headers = [th.get_text(strip=True) for th in header_rows] if header_rows else [f'Column {i}' for i in range(1, len(table.find('tr').find_all('td')) + 1)]\n        \n        # Extract data rows\n        data_rows = table.find('tbody').find_all('tr') if table.find('tbody') else table.find_all('tr')\n        data = []\n        for row in data_rows:\n            cols = row.find_all('td')\n            cols = [col.get_text(strip=True) for col in cols]\n            data.append(cols)\n        \n        # Create DataFrame\n        df = pd.DataFrame(data, columns=headers)\n        \n        return df\n    \n    except requests.RequestException as e:\n        raise ConnectionError(f\"Failed to connect to the URL: {e}\")\n    except ValueError as e:\n        raise ValueError(e)"}
{"task_id": "BigCodeBench/130", "solution": "import base64\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    \"\"\"\n    Converts a hex string to bytes, salts it with a random value of specified size, and computes its SHA256 hash.\n    \"\"\"\n    # Convert hex string to bytes\n    hex_bytes = bytes.fromhex(hex_str)\n    \n    # Generate a random salt\n    salt = os.urandom(salt_size)\n    \n    # Append salt to the hex string's bytes\n    salted_data = hex_bytes + salt\n    \n    # Compute SHA256 hash\n    sha256_hash = hashlib.sha256(salted_data).hexdigest()\n    \n    # Encode salt in base64 for easier and safer transmission\n    base64_salt = base64.b64encode(salt).decode('utf-8')\n    \n    # Return salt and hash as a tuple\n    return (base64_salt, sha256_hash)"}
{"task_id": "BigCodeBench/131", "solution": "import base64\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    \"\"\"\n    Converts a hex string to bytes, salts it with a random value of specified size, and computes its SHA256 hash.\n    \"\"\"\n    # Convert hex string to bytes\n    hex_bytes = bytes.fromhex(hex_str)\n    \n    # Generate a random salt\n    salt = os.urandom(salt_size)\n    \n    # Append salt to the hex string's bytes\n    salted_data = hex_bytes + salt\n    \n    # Compute SHA256 hash\n    sha256_hash = hashlib.sha256(salted_data).hexdigest()\n    \n    # Encode salt in base64 for easier and safer text-based storage/transfer\n    base64_salt = base64.b64encode(salt).decode('utf-8')\n    \n    # Return salt and hash as a tuple\n    return (base64_salt, sha256_hash)"}
{"task_id": "BigCodeBench/132", "solution": "import binascii\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(hex_str):\n    try:\n        # Remove '\\\\x' prefix if present and decode the hex string into bytes\n        byte_values = bytearray.fromhex(hex_str.replace(\"\\\\x\", \"\"))\n    except ValueError:\n        raise ValueError(\"Invalid hex string\")\n\n    # Count the frequency of each byte value\n    byte_frequency = np.bincount(byte_values, minlength=256)\n\n    # Create a DataFrame\n    df = pd.DataFrame({\n        'Byte Value': np.arange(256),\n        'Frequency': byte_frequency\n    })\n\n    # Filter out rows with zero frequency for cleaner display\n    df = df[df['Frequency'] > 0]\n\n    # Plotting\n    ax = df.plot(kind='bar', x='Byte Value', y='Frequency', color='skyblue')\n    ax.set_title('Byte Value Frequency')\n    ax.set_xlabel('Byte Value')\n    ax.set_ylabel('Frequency')\n\n    return df, ax"}
{"task_id": "BigCodeBench/133", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df, bins=20):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame.\")\n    \n    # Normalize the last column\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(df.iloc[:, -1].values.reshape(-1, 1))\n    df.iloc[:, -1] = normalized_data\n    \n    # Plotting the normalized data\n    fig, ax = plt.subplots()\n    ax.hist(df.iloc[:, -1], bins=bins, alpha=0.7, color='blue', edgecolor='black')\n    ax.set_title(f'Normalized Data of {df.columns[-1]}')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Normalized Value')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/134", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=20):\n    \"\"\"\n    Draw a histogram of the last column of the DataFrame and return the plot.\n    \"\"\"\n    # Validate input\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"DataFrame cannot be empty.\")\n    \n    # Prepare the histogram\n    column_name = df.columns[-1]\n    plt.figure(figsize=(10, 6))\n    ax = plt.hist(df[column_name], bins=bins, color='blue', edgecolor='black')\n    \n    # Set the title and labels\n    plt.title(f'Histogram of {column_name}')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    \n    return ax"}
{"task_id": "BigCodeBench/135", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame.\")\n    \n    # Ensure the last column has numeric data for mean imputation\n    if not np.issubdtype(df.iloc[:, -1].dtype, np.number):\n        raise ValueError(\"The last column must contain numeric data for mean imputation.\")\n    \n    # Impute missing values in the last column using mean imputation\n    imputer = SimpleImputer(strategy='mean')\n    df.iloc[:, -1] = imputer.fit_transform(df.iloc[:, -1].values.reshape(-1, 1))\n    \n    # Create a box plot\n    plt.figure(figsize=(10, 6))\n    ax = sns.boxplot(y=df.iloc[:, -1])\n    ax.set_title('Boxplot of Last Column')\n    ax.set_xlabel(df.columns[-1])\n    \n    return df, ax"}
{"task_id": "BigCodeBench/136", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"DataFrame cannot be empty.\")\n    \n    # Perform PCA\n    pca = PCA(n_components=2)\n    principal_components = pca.fit_transform(df)\n    pca_df = pd.DataFrame(data = principal_components, columns = ['Principal Component 1', 'Principal Component 2'])\n    \n    # Visualize the PCA\n    fig, ax = plt.subplots()\n    ax.scatter(pca_df['Principal Component 1'], pca_df['Principal Component 2'])\n    ax.set_title('2 Component PCA')\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    \n    return pca_df, ax"}
{"task_id": "BigCodeBench/137", "solution": "import pandas as pd\nfrom scipy.stats import skew\ndef task_func(df):\n    \"\"\"\n    Calculate the skewness of the last column of the dataframe.\n\n    Parameters:\n    df (DataFrame): The input dataframe.\n\n    Returns:\n    float: The skewness of the last column of the dataframe.\n\n    Raises:\n    ValueError: If the input is not a DataFrame or has no columns.\n    \"\"\"\n    # Validate input\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    if df.empty:\n        raise ValueError(\"DataFrame cannot be empty.\")\n    \n    # Calculate skewness of the last column\n    skewness = skew(df.iloc[:, -1])\n    \n    return skewness"}
{"task_id": "BigCodeBench/138", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, letters=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n    if not isinstance(df, pd.DataFrame) or 'Letters' not in df.columns:\n        raise ValueError(\"Input must be a DataFrame with a 'Letters' column.\")\n    \n    # Count the frequency of each letter\n    letter_counts = df['Letters'].value_counts(normalize=True) * 100  # Convert to percentage\n    letter_counts = letter_counts.reindex(letters, fill_value=0)  # Ensure all letters are present\n\n    # Create a bar chart\n    ax = letter_counts.plot(kind='bar', figsize=(12, 6), color='skyblue')\n    \n    # Set labels and title\n    ax.set_xlabel('Letters')\n    ax.set_ylabel('Frequency (%)')\n    ax.set_title('Letter Frequency')\n    \n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=0)\n    \n    return ax"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame.\")\n    numeric_cols = df.select_dtypes(include=np.number).columns.tolist()\n    if not numeric_cols:\n        raise ValueError(\"DataFrame must contain at least one numeric column.\")\n    \n    axes = []\n    for col in numeric_cols:\n        fig, ax = plt.subplots()\n        df[col].hist(ax=ax)\n        ax.set_title(col)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n    \n    return axes"}
{"task_id": "BigCodeBench/140", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, cols):\n    \"\"\"\n    Standardize specified numeric columns in a dataframe.\n\n    Parameters:\n    df (DataFrame): The dataframe.\n    cols (list): The columns to standardize.\n\n    Returns:\n    DataFrame: The dataframe with standardized columns.\n\n    Raises:\n    ValueError: If 'df' is not a DataFrame, 'cols' is not a list, or columns in 'cols' don't exist in 'df'.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame.\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list.\")\n    for col in cols:\n        if col not in df.columns:\n            raise ValueError(f\"Column '{col}' does not exist in the dataframe.\")\n\n    # Create a scaler object\n    scaler = StandardScaler()\n\n    # Fit and transform the specified columns\n    df[cols] = scaler.fit_transform(df[cols])\n\n    return df"}
{"task_id": "BigCodeBench/141", "solution": "import numpy as np\nimport pandas as pd\nimport statistics\ndef task_func(rows, columns=['A', 'B', 'C', 'D', 'E', 'F'], seed=42):\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n    \n    np.random.seed(seed)\n    \n    # Generate DataFrame\n    data = {col: np.random.randint(1, 101, rows) for col in columns}\n    df = pd.DataFrame(data)\n    \n    # Calculate statistics\n    stats = {col: {'mean': df[col].mean(), 'median': df[col].median()} for col in columns}\n    \n    return df, stats"}
{"task_id": "BigCodeBench/142", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    # Generate data\n    x = np.linspace(0, 2*np.pi, 400)\n    y_sin = np.sin(x)\n    y_cos = np.cos(x)\n\n    # Create a new figure\n    fig, axs = plt.subplots(2, 1, figsize=(10, 8))\n\n    # Plot Sine function\n    axs[0].plot(x, y_sin)\n    axs[0].set_title('Sine function')\n    axs[0].set_xlabel('x')\n    axs[0].set_ylabel('sin(x)')\n\n    # Plot Cosine function\n    axs[1].plot(x, y_cos)\n    axs[1].set_title('Cosine function')\n    axs[1].set_xlabel('x')\n    axs[1].set_ylabel('cos(x)')\n\n    # Adjust layout to prevent overlap\n    plt.tight_layout()\n\n    return fig, axs"}
{"task_id": "BigCodeBench/143", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    # Generate x values\n    x = np.linspace(-10, 10, 400)\n    \n    # Calculate corresponding y values for the line equation y = 2x + 1\n    y = 2*x + 1\n    \n    # Create a new plot\n    fig, ax = plt.subplots()\n    \n    # Plot the line y = 2x + 1\n    ax.plot(x, y, 'r', label='y=2x+1')\n    \n    # Mark the solution for x = 2 with a green circle\n    ax.plot(2, 5, 'go', label='Solution at x=2, y=5')\n    \n    # Set the title and labels\n    ax.set_title('Solution of the equation y=2x+1 at x=2')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    \n    # Set the x-axis limits\n    ax.set_xlim(-10, 10)\n    \n    # Add a legend\n    ax.legend()\n    \n    # Automatically adjust the y-axis limits based on the data\n    ax.relim()\n    ax.autoscale_view()\n    \n    return ax"}
{"task_id": "BigCodeBench/144", "solution": "import ipaddress\nimport requests\ndef task_func(ip_range, timeout):\n    \"\"\"\n    Scans a specified IP address range and sends an HTTP GET request to each IP to verify if it is an active web server.\n    \"\"\"\n    try:\n        network = ipaddress.ip_network(ip_range)\n    except ValueError:\n        raise ValueError(\"Invalid IP range provided.\")\n\n    active_ips = []\n    for ip in network:\n        try:\n            response = requests.get(f\"http://{ip}\", timeout=timeout)\n            if response.status_code == 200:\n                active_ips.append(str(ip))\n        except requests.exceptions.RequestException:\n            # Ignore exceptions for unreachable IPs or other network issues\n            continue\n\n    return active_ips"}
{"task_id": "BigCodeBench/145", "solution": "import csv\nfrom ipaddress import IPv4Network\ndef task_func(ip_range, csv_path):\n    \"\"\"\n    Generates a CSV file listing all IP addresses in the specified IP range.\n    Each IP address is written as a row in the CSV file.\n\n    Parameters:\n        ip_range (str): The IP range in CIDR notation (e.g., \"192.168.0.0/16\").\n        csv_path (str): The path where the CSV file will be saved.\n\n    Returns:\n        str: The path to the generated CSV file.\n    \"\"\"\n    # Create a network object\n    network = IPv4Network(ip_range)\n    \n    # Open the CSV file for writing\n    with open(csv_path, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        # Write each IP address as a row\n        for ip in network:\n            writer.writerow([ip])\n    \n    return csv_path"}
{"task_id": "BigCodeBench/146", "solution": "import subprocess\nfrom ipaddress import IPv4Network\ndef task_func(ip_range):\n    \"\"\"\n    Scans the specified IP address range and pings each IP to check if it is active.\n    The function returns a dictionary with IP addresses as keys and a boolean value indicating\n    their active status.\n\n    Parameters:\n        ip_range (str): The IP range to scan, in CIDR notation.\n\n    Returns:\n        dict: A dictionary where keys are IP addresses and values are booleans indicating activity.\n    \"\"\"\n    network = IPv4Network(ip_range)\n    ping_results = {}\n\n    for ip in network:\n        if ip.is_loopback or ip.is_unspecified:\n            continue\n        try:\n            # Using '-c 1' to send only one ICMP request for faster scanning\n            subprocess.check_output(['ping', '-c', '1', str(ip)], stderr=subprocess.STDOUT)\n            ping_results[str(ip)] = True\n        except subprocess.CalledProcessError:\n            ping_results[str(ip)] = False\n\n    return ping_results"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread, Lock\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans a specified IP address range and checks if a specified port is open on each IP.\n    The function returns a dictionary with IP addresses as keys and a boolean indicating\n    the port's status (True if open, False otherwise).\n\n    Parameters:\n        ip_range (str): The IP address range to scan, in CIDR notation.\n        port (int): The port number to check on each IP in the range.\n\n    Returns:\n        dict: A dictionary mapping IP addresses to their port status (True if open).\n    \"\"\"\n    result = {}\n    lock = Lock()\n\n    def scan_ip(ip):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(1)  # Set a timeout for the connection attempt\n            result_with_lock = {ip: sock.connect_ex((ip, port)) == 0}\n            with lock:\n                result.update(result_with_lock)  # Update the dictionary safely\n            sock.close()\n        except socket.error:\n            pass  # Ignore errors, e.g., from unreachable hosts\n\n    network = IPv4Network(ip_range)\n    threads = []\n\n    for ip in network:\n        if ip.is_host:\n            thread = Thread(target=scan_ip, args=(str(ip),))\n            threads.append(thread)\n            thread.start()\n\n    # Wait for all threads to finish\n    for thread in threads:\n        thread.join()\n\n    return result"}
{"task_id": "BigCodeBench/148", "solution": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\n    \"\"\"\n    Encrypt the categorical data in a specific column of a DataFrame using LabelEncoder.\n\n    Parameters:\n    df (pd.DataFrame): The DataFrame that contains the data.\n    column_name (str): The name of the column to encode.\n\n    Returns:\n    pd.DataFrame: The DataFrame with the encoded column.\n    \"\"\"\n    # Create a LabelEncoder object\n    le = LabelEncoder()\n\n    # Fit and transform the specified column in the DataFrame\n    df[column_name] = le.fit_transform(df[column_name])\n\n    return df"}
{"task_id": "BigCodeBench/149", "solution": "import pandas as pd\ndef task_func(elements, include_index=False):\n    \"\"\"\n    Constructs a DataFrame that enumerates the character counts of each string in a provided list of elements. This\n    function can optionally include an index column for each row in the DataFrame.\n\n    Parameters:\n    elements (List[str]): A list of strings whose character counts are to be calculated.\n    include_index (bool): Flag to decide whether to add an index column in the resulting DataFrame.\n\n    Returns: DataFrame: Returns a pandas DataFrame with columns for elements and their respective character counts.\n    Includes an 'Index' column if requested.\n    \"\"\"\n    # Calculate character counts\n    data = {'Element': elements, 'Count': [len(s) for s in elements]}\n    \n    # Create DataFrame\n    df = pd.DataFrame(data)\n    \n    # If include_index is True, reset index to start from 0 and name the index column as 'Index'\n    if include_index:\n        df.reset_index(inplace=True, names=['Index'])\n        # Adjust column order if necessary\n        if 'Index' in df.columns:\n            df = df[['Index', 'Element', 'Count']]\n    \n    return df"}
{"task_id": "BigCodeBench/150", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(product_dict, product_keys):\n    \"\"\"\n    The function definition remains the same as provided.\n    \"\"\"\n    # Initialize lists to store data\n    product_names = []\n    quantities = []\n    prices = []\n    profits = []\n    \n    # Calculate profit for each product and store data\n    for key in product_keys:\n        quantity, price = product_dict[key]\n        profit = quantity * (price - 1)  # Assuming a fixed cost of 1 per unit for simplicity\n        product_names.append(key)\n        quantities.append(quantity)\n        prices.append(price)\n        profits.append(profit)\n    \n    # Create DataFrame\n    data = {\n        'Product': product_names,\n        'Quantity': quantities,\n        'Price': prices,\n        'Profit': profits\n    }\n    report = pd.DataFrame(data)\n    \n    # Calculate average price and profit\n    avg_price = np.mean(prices)\n    avg_profit = np.mean(profits)\n    \n    # Add average columns\n    report['Average Price'] = avg_price\n    report['Average Profit'] = avg_profit\n    \n    # Plot profit for each product\n    ax = None\n    if report.shape[0] > 0:\n        ax = report['Profit'].plot(kind='bar', figsize=(10, 6), title='Profit per Product')\n        ax.set_xlabel('Product')\n        ax.set_ylabel('Profit')\n    \n    return report, ax\nproduct_dict = {'Apple': [100, 2.5], 'Orange': [80, 3.5], 'Banana': [120, 1.5]}\nproduct_keys = ['Apple', 'Banana']"}
{"task_id": "BigCodeBench/151", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict, data_keys):\n    \"\"\"\n    Normalize data specified by keys in a dictionary using MinMax scaling and plot the results.\n    \"\"\"\n    # Check if all keys are in the data_dict\n    if not all(key in data_dict for key in data_keys):\n        raise ValueError(\"Not all keys in 'data_keys' are present in 'data_dict'.\")\n\n    # Initialize the scaler\n    scaler = MinMaxScaler()\n\n    # Prepare data for scaling\n    data_to_scale = pd.DataFrame(data_dict)\n\n    # Perform MinMax scaling\n    normalized_data = scaler.fit_transform(data_to_scale[data_keys])\n\n    # Convert back to DataFrame\n    normalized_df = pd.DataFrame(normalized_data, columns=data_keys)\n\n    # Plot the normalized data\n    fig, ax = plt.subplots()\n    for key in data_keys:\n        ax.plot(normalized_df[key], label=key)\n    ax.set_title('Normalized Data')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Normalized Value')\n    ax.legend()\n\n    # Show plot\n    plt.tight_layout()\n    plt.show()\n\n    return normalized_df, ax"}
{"task_id": "BigCodeBench/152", "solution": "import pandas as pd\nimport numpy as np\nfrom random import randint, seed\nSTUDENTS = ['Joe', 'Amy', 'Mark', 'Sara', 'John', 'Emily', 'Zoe', 'Matt']\nCOURSES = ['Math', 'Physics', 'Chemistry', 'Biology', 'English', 'History', 'Geography', 'Computer Science']\ndef task_func():\n    np.random.seed(0)  # For reproducible results\n    # Generate a DataFrame with random grades\n    grades_df = pd.DataFrame(np.random.randint(0, 101, size=(len(COURSES), len(STUDENTS))),\n                             columns=STUDENTS, index=COURSES)\n    \n    # Calculate average grades for each student\n    average_grades = grades_df.mean(axis=1)\n    \n    # Add names as a new column\n    grades_df['Name'] = grades_df.index\n    grades_df = grades_df.reset_index(drop=True)  # Reset index to align with students list\n    grades_df = grades_df[['Name'] + STUDENTS + ['Average Grade']]  # Reorder columns\n    \n    # Add average grade column\n    grades_df['Average Grade'] = average_grades\n    \n    return grades_df"}
{"task_id": "BigCodeBench/153", "solution": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(data):\n    \"\"\"\n    Transforms categorical data into a numerical format suitable for machine learning algorithms using sklearn's\n    LabelEncoder. This function generates a DataFrame that pairs original categorical values with their numerical\n    encodings.\n    \"\"\"\n    # Initialize LabelEncoder\n    le = LabelEncoder()\n    \n    # Encode the categorical data\n    encoded = le.fit_transform(data)\n    \n    # Pair original categories with their encodings in a DataFrame\n    df = pd.DataFrame({'Category': data, 'Encoded': encoded})\n    \n    return df"}
{"task_id": "BigCodeBench/154", "solution": "import re\nimport os\nimport glob\nimport mimetypes\ndef task_func(directory, file_pattern, suffix):\n    \"\"\"\n    Scans a specified directory for files matching a given pattern and with a certain suffix, then determines their file types.\n    The function returns a dictionary with file names as keys and their corresponding MIME types as values.\n    \"\"\"\n    # Construct the full pattern to match files with the given suffix\n    full_pattern = os.path.join(directory, file_pattern + suffix)\n    \n    # Find all files matching the pattern\n    matching_files = glob.glob(full_pattern)\n    \n    # Initialize an empty dictionary to store the results\n    file_types_dict = {}\n    \n    # Iterate over the files, determine their MIME types, and add them to the dictionary\n    for file_path in matching_files:\n        # Ensure we don't include directories or non-existent paths\n        if os.path.isfile(file_path):\n            # Get the MIME type of the file\n            mime_type, _ = mimetypes.guess_type(file_path)\n            # Add the file name and its MIME type to the dictionary\n            file_name = os.path.basename(file_path)\n            file_types_dict[file_name] = mime_type\n    \n    return file_types_dict"}
{"task_id": "BigCodeBench/155", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n    \"\"\"\n    Computes the average of each row in a provided 2D array and appends these averages as a new column.\n    Additionally, it plots the averages against their respective row indices.\n    \n    Parameters:\n    data (numpy.array): A 2D numpy array with exactly eight columns, corresponding to 'A' through 'H'.\n    \n    Returns:\n    tuple: A tuple containing:\n        - DataFrame: A pandas DataFrame which includes the original data and an additional 'Average' column.\n        - Axes: A matplotlib Axes object with the plot of row averages.\n    \"\"\"\n    # Validate the data has exactly 8 columns\n    if data.shape[1] != len(COLUMN_NAMES):\n        raise ValueError(\"Data must have exactly 8 columns.\")\n    \n    # Compute row averages\n    averages = np.mean(data, axis=1)\n    \n    # Create DataFrame\n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    df['Average'] = averages\n    \n    # Plotting the averages\n    fig, ax = plt.subplots()\n    ax.plot(range(1, data.shape[0] + 1), averages, marker='o')\n    ax.set_xlabel('Row Index')\n    ax.set_ylabel('Average')\n    ax.set_title('Average of Each Row')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/156", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Normalizes a given dataset using MinMax scaling and calculates the average of each row. This average is then\n    added as a new column 'Average' to the resulting DataFrame. The function also visualizes these averages in a plot.\n\n    Parameters:\n    data (numpy.array): A 2D array where each row represents a sample and each column a feature.\n\n    Returns:\n    DataFrame: A pandas DataFrame with normalized data and an additional 'Average' column.\n    Axes: A matplotlib Axes object with a bar plot of the averages.\n    \"\"\"\n    # Normalize the data using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n    \n    # Convert to DataFrame\n    df = pd.DataFrame(normalized_data, columns=[f'Feature_{i}' for i in range(1, 9)])\n    \n    # Calculate the average of each row\n    df['Average'] = df.mean(axis=1)\n    \n    # Visualize the averages in a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(df.index, df['Average'], color='skyblue')\n    ax.set_title('Average Values Across Dataset')\n    ax.set_xlabel('Sample Index')\n    ax.set_ylabel('Average Value')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/157", "solution": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"Input data must be a 2D numpy array.\")\n    \n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"All elements in the data must be numeric.\")\n    \n    # Calculate the average across each row and add it as a new column to a DataFrame\n    df = pd.DataFrame(data)\n    df['Average'] = df.mean(axis=1)\n    \n    # Calculate the correlation matrix\n    corr = df.corr()\n    \n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(corr, dtype=bool))\n    \n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n    \n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(230, 20, as_cmap=True)\n    \n    # Draw the heatmap with the mask and correct aspect ratio\n    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n                square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n    \n    return df, ax\ndata = np.array([[1, 2, 3, 4, 5, 6, 7, 8], [8, 7, 6, 5, 4, 3, 2, 1]])"}
{"task_id": "BigCodeBench/158", "solution": "import json\nimport urllib.request\nimport urllib.parse\nimport gzip\ndef task_func(url_str, file_path):\n    \"\"\"\n    Fetches JSON data from a given URL, decodes the json-formatted data, and compresses it into a gzip file.\n\n    Parameters:\n        url_str (str): The URL string pointing to the JSON data.\n        file_path (str): The path where the compressed gzip file should be saved.\n\n    Returns:\n        str: The path to the compressed gzip file containing the JSON data.\n    \"\"\"\n    # Fetch JSON data from URL\n    with urllib.request.urlopen(url_str) as response:\n        data = response.read()\n    \n    # Decode JSON data\n    json_data = json.loads(data.decode('utf-8'))\n    \n    # Compress JSON data into gzip file\n    with gzip.open(file_path, 'wb') as f:\n        f.write(json.dumps(json_data, ensure_ascii=False).encode('utf-8'))\n    \n    return file_path"}
{"task_id": "BigCodeBench/159", "solution": "import numpy as np\nimport struct\nimport io\nimport gzip\ndef task_func(newArray):\n    \"\"\"\n    Compresses a given NumPy array using gzip compression and returns the compressed data.\n\n    Parameters:\n        newArray (numpy.array): The NumPy array to be compressed. The array should contain numerical data.\n\n    Returns:\n        bytes: The gzipped data of the NumPy array.\n    \"\"\"\n    # Ensure the input is a NumPy array\n    if not isinstance(newArray, np.ndarray):\n        raise ValueError(\"Input must be a NumPy array.\")\n    \n    # Check if the array contains numerical data\n    if not np.issubdtype(newArray.dtype, np.number):\n        raise ValueError(\"Array must contain numerical data.\")\n    \n    # Convert the array to bytes\n    byte_arr = bytearray(newArray.tobytes())\n    \n    # Use gzip to compress the byte array\n    compressed_stream = io.BytesIO()\n    with gzip.GzipFile(fileobj=compressed_stream, mode='wb') as gzip_file:\n        gzip_file.write(byte_arr)\n    \n    # Get the compressed data as bytes\n    compressed_data = compressed_stream.getvalue()\n    \n    return compressed_data\nexample_array = np.array([1, 2, 3, 4, 5])"}
{"task_id": "BigCodeBench/160", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n    if data.shape[1] != 8:\n        raise ValueError(\"Input data must have exactly eight columns.\")\n    \n    # Convert numpy array to DataFrame\n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    \n    # Compute the average of each row and add as a new column\n    df['Average'] = df.mean(axis=1)\n    \n    # Plot the distribution of averages\n    ax = sns.distplot(df['Average'], kde=True)\n    plt.title('Distribution of Row Averages')\n    \n    # Perform normality test if there are at least 20 data points\n    if len(df) >= 20:\n        p_value = stats.normaltest(df['Average'])[1]\n    else:\n        p_value = None\n    \n    # Return DataFrame, plot's Axes object, and p-value\n    return df, ax, p_value"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(log_file):\n    \"\"\"\n    Extracts logging information from a log file and stores it in a CSV.\n\n    Parameters:\n    log_file (str): Path to the log file.\n\n    Returns:\n    str: Path to the created CSV file.\n    \"\"\"\n    # Regular expression pattern to match log entries\n    pattern = re.compile(r'^(ERROR|INFO|DEBUG): \\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (.+)$')\n    \n    # List to store parsed log data\n    log_data = []\n    \n    try:\n        with open(log_file, 'r') as file:\n            for line in file:\n                match = pattern.match(line)\n                if match:\n                    log_type, timestamp, message = match.groups()\n                    # Convert timestamp string to datetime object\n                    datetime_obj = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')\n                    log_data.append([log_type, datetime_obj, message])\n                else:\n                    raise ValueError(\"Invalid log entry format.\")\n                    \n        if not log_data:\n            raise ValueError(\"No valid log entries found.\")\n        \n        # Convert list to DataFrame\n        df = pd.DataFrame(log_data, columns=['Type', 'Timestamp', 'Message'])\n        \n        # Save DataFrame to CSV\n        output_path = 'log_data.csv'\n        df.to_csv(output_path, index=False)\n        \n        return output_path\n    \n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {log_file} was not found.\")\n    except ValueError as e:\n        raise e"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n    \"\"\"\n    Analyzes and visualizes the distribution of word lengths in a text.\n    \"\"\"\n    # Extract words from the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Calculate word lengths\n    word_lengths = np.array([len(word) for word in words])\n    \n    # Check if there are any words in the text\n    if len(word_lengths) == 0:\n        print(\"No words found in the text to create a histogram.\")\n        return None\n    \n    # Create a histogram of word lengths\n    fig, ax = plt.subplots()\n    ax.hist(word_lengths, bins=np.arange(0, max(word_lengths) + 2) - 0.5, rwidth=rwidth)\n    \n    # Labeling\n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Distribution of Word Lengths in Text')\n    \n    # Show plot\n    plt.tight_layout()\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/163", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(rows=5, cols=5):\n    if cols > 5:\n        raise ValueError(\"Number of columns exceeds the number of available categories.\")\n    \n    # Define categories\n    categories = ['A', 'B', 'C', 'D', 'E']\n    \n    # Generate random data\n    data = {cat: np.random.randint(0, 100, rows) for cat in categories[:cols]}\n    df = pd.DataFrame(data)\n    \n    # Plot stacked bar chart\n    ax = df.plot(kind='bar', stacked=True)\n    \n    # Set labels and title for clarity\n    ax.set_xlabel('Rows')\n    ax.set_ylabel('Values')\n    ax.set_title('Stacked Bar Chart for DataFrame Categories')\n    \n    # Show legend\n    ax.legend(title='Categories')\n    \n    return ax"}
{"task_id": "BigCodeBench/164", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_labels=5, data_range=(0, 1)):\n    \"\"\"\n    Generate random numeric data across a specified range for a given number of categories and visualize it with\n    a stacked bar chart.\n\n    Parameters:\n    num_labels (int): Specifies the number of distinct categories or labels to generate data for. Defaults to 5.\n    data_range (tuple): Defines the lower and upper bounds for the random data values. Defaults to (0, 1).\n\n    Returns:\n    matplotlib.figure.Figure: A Figure object containing the stacked bar chart of the generated data.\n    \"\"\"\n    # Generate random data\n    np.random.seed(0)  # For reproducible results\n    data = {f'Category_{i+1}': np.random.randint(data_range[0], data_range[1], size=num_labels) \n            for i in range(num_labels)}\n    df = pd.DataFrame(data)\n\n    # Plot stacked bar chart\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', stacked=True, ax=ax)\n    \n    # Adding labels and title for clarity\n    ax.set_xlabel('Categories')\n    ax.set_ylabel('Random Values')\n    ax.set_title('Stacked Bar Chart of Random Numeric Data across Categories')\n    ax.legend(title='Categories')\n\n    return fig"}
{"task_id": "BigCodeBench/165", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_rows=5, rand_range=(0, 100)):\n    \"\"\"\n    Create a DataFrame containing random integer values within a specified range for categories 'A' through 'E',\n    and visualize this data with a stacked bar chart.\n\n    Parameters:\n    num_rows (int): Specifies the number of rows in the DataFrame.\n    rand_range (tuple): Defines the lower and upper bounds for the random number generation, inclusive.\n\n    Returns:\n    matplotlib.figure.Figure: The matplotlib Figure object containing the plotted data.\n    \"\"\"\n    # Create DataFrame with random values\n    data = {chr(65+i): [randint(*rand_range) for _ in range(num_rows)] for i in range(5)}\n    df = pd.DataFrame(data)\n\n    # Plot stacked bar chart\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', stacked=True, ax=ax)\n\n    # Set labels and title\n    ax.set_xlabel('Categories')\n    ax.set_ylabel('Random Values')\n    ax.set_title('Stacked Bar Chart of Random Values for Categories A-E')\n\n    # Return the figure containing the plot\n    return fig"}
{"task_id": "BigCodeBench/166", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport holidays\ndef task_func(start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31), country='US'):\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"Both start_date and end_date must be datetime objects.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must not be after end_date.\")\n    \n    # Fetch holidays for the specified country\n    country_holidays = holidays.CountryHoliday(country)\n    \n    # Generate all days between start_date and end_date\n    all_days = pd.date_range(start_date, end_date, freq='D')\n    \n    # Filter out weekends (Saturday = 5, Sunday = 6 in pandas)\n    business_days = all_days[all_days.to_series().dt.dayofweek < 5]\n    \n    # Exclude holidays\n    business_days = business_days[~business_days.isin(country_holidays)]\n    \n    return business_days.tolist()"}
{"task_id": "BigCodeBench/167", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_types=5, integer_range=(0, 100)):\n    \"\"\"\n    Generate DataFrame and plot.\n    \"\"\"\n    # Generate random data\n    data = {f'Category_{i+1}': [randint(*integer_range) for _ in range(num_types)] for i in range(num_types)}\n    df = pd.DataFrame(data)\n\n    # Plotting\n    fig, ax = plt.subplots()\n    df.plot(kind='barh', stacked=True, ax=ax)\n\n    # Adding titles and labels\n    ax.set_xlabel('Values')\n    ax.set_ylabel('Categories')\n    ax.set_title('Horizontal Stacked Bar Chart')\n\n    # Return the figure and axes\n    return fig, ax"}
{"task_id": "BigCodeBench/168", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_groups=5, data_size=5, labels=None):\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    \n    # Generating random data\n    np.random.seed(0)  # For reproducible results\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    \n    # Creating a stacked bar chart\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    ax.set_title('Stacked Bar Chart')\n    ax.set_xlabel('Groups')\n    ax.set_ylabel('Values')\n    ax.legend(title='Categories')\n    \n    # Saving the plot to a file\n    plot_filename = 'test_plot.png'\n    plt.savefig(plot_filename)\n    \n    return fig, data, plot_filename"}
{"task_id": "BigCodeBench/169", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import gaussian_filter\ndef task_func(image, sigma=2):\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input image must be a numpy array.\")\n    if sigma <= 0:\n        raise ValueError(\"Sigma value must be positive.\")\n    \n    # Apply Gaussian filter\n    filtered_image = gaussian_filter(image, sigma=sigma)\n    \n    # Create a figure to plot the images side by side\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n    \n    # Original Image\n    axs[0].imshow(image, cmap='gray')\n    axs[0].set_title('Original')\n    axs[0].axis('off')\n    \n    # Filtered Image\n    axs[1].imshow(filtered_image, cmap='gray')\n    axs[1].set_title('Filtered')\n    axs[1].axis('off')\n    \n    # Show the plot\n    plt.tight_layout()\n    plt.show()\n    \n    return axs, filtered_image"}
{"task_id": "BigCodeBench/170", "solution": "import pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url, sort_by_column=\"title\"):\n    \"\"\"\n    Fetches data from a given CSV URL and returns a pandas DataFrame sorted based on the specified column.\n\n    Parameters:\n    - csv_url (str): The URL to fetch the CSV data from.\n    - sort_by_column (str): The column name based on which the data needs to be sorted. Default is \"title\".\n\n    Returns:\n    DataFrame: The pandas DataFrame sorted based on the specified column.\n\n    Raises:\n    Exception: If the response status code is not 200.\n    \"\"\"\n    # Fetch CSV data from URL\n    response = requests.get(csv_url)\n    \n    # Raise an exception if the request was not successful\n    if response.status_code != 200:\n        raise Exception(f\"Request failed with status {response.status_code}\")\n    \n    # Use StringIO to read the CSV data from the response\n    data_string = StringIO(response.text)\n    \n    # Load data into a pandas DataFrame\n    data_df = pd.read_csv(data_string)\n    \n    # Sort the DataFrame by the specified column\n    sorted_df = data_df.sort_values(by=sort_by_column)\n    \n    return sorted_df"}
{"task_id": "BigCodeBench/171", "solution": "import random\nimport pandas as pd\nimport collections\ndef task_func(vegetable_dict, seed=0):\n    random.seed(seed)  # Seed the random number generator for reproducibility\n    \n    # Reverse the dictionary to map vegetables to people, and generate random counts\n    veg_to_people = collections.defaultdict(list)\n    for person, veg in vegetable_dict.items():\n        veg_to_people[veg].append(person)\n    veg_counts = {veg: random.randint(1, 10) for veg in veg_to_people.keys()}\n    \n    # Calculate total counts\n    total_count = sum(veg_counts.values())\n    \n    # Calculate percentages\n    veg_stats = {veg: (count, round(count / total_count * 100, 2)) for veg, count in veg_counts.items()}\n    \n    # Convert to DataFrame\n    df = pd.DataFrame.from_dict(veg_stats, orient='index', columns=['Count', 'Percentage'])\n    \n    return df\nvegetable_dict = {'John': 'Carrot', 'Alice': 'Potato', 'Bob': 'Tomato', 'Eve': 'Carrot', 'Charlie': 'Spinach'}"}
{"task_id": "BigCodeBench/172", "solution": "import json\nfrom datetime import datetime\ndef task_func(json_data):\n    \"\"\"\n    Determine if the given datetime is a weekend.\n\n    Parameters:\n    - json_data (str): JSON string containing the datetime in UTC format.\n\n    Returns:\n    bool: True if the date is a weekend (Saturday or Sunday), False otherwise.\n    \"\"\"\n    # Parse the JSON data\n    data = json.loads(json_data)\n    \n    # Extract the datetime and convert it to a datetime object\n    utc_datetime_str = data['utc_datetime']\n    utc_datetime = datetime.fromisoformat(utc_datetime_str.replace(\"Z\", \"+00:00\"))\n    \n    # Check if the datetime is a weekend\n    return utc_datetime.weekday() >= 5"}
{"task_id": "BigCodeBench/173", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(country_dict):\n    \"\"\"\n    Generates a DataFrame representing the GDP for a predefined set of countries based on their presence in the provided dictionary.\n    The GDP values are simulated with random integers to model economic data.\n\n    Parameters:\n    country_dict (dict): A dictionary mapping individual names to country names. The country names must correspond to\n    the predefined set of countries: ['USA', 'UK', 'China', 'Japan', 'Australia'].\n\n    Returns:\n    DataFrame: A pandas DataFrame with each country's name from the input as the index and a randomly generated GDP\n    value as the column. GDP values range between 1,000,000,000 and 100,000,000,000.\n    \"\"\"\n    predefined_countries = ['USA', 'UK', 'China', 'Japan', 'Australia']\n    # Validate that all countries in the dictionary are part of the predefined set\n    if not all(country in predefined_countries for country in country_dict.values()):\n        raise ValueError(\"All country values in the dictionary must be one of: \" + ', '.join(predefined_countries))\n    \n    # Generate random GDP values\n    np.random.seed(0)  # For reproducibility\n    gdp_values = np.random.randint(1000000000, 100000000000, size=len(country_dict))\n    \n    # Create DataFrame\n    df = pd.DataFrame(data={'GDP': gdp_values}, index=country_dict.values())\n    \n    return df\ncountry_dict = {'John': 'USA', 'Alice': 'UK', 'Bob': 'China', 'Charlie': 'Japan', 'David': 'Australia'}"}
{"task_id": "BigCodeBench/174", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(data, key, min_value, max_value):\n    '''\n    The function is already well-defined in the question, so we implement it directly.\n    '''\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n    \n    np.random.seed(0)  # For reproducibility\n    data[key] = np.random.randint(min_value, max_value + 1, size=len(data))\n    return data"}
{"task_id": "BigCodeBench/175", "solution": "import pandas as pd\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Check if required columns exist\n    required_columns = ['Title', 'Views', 'Likes']\n    if not all(column in df.columns for column in required_columns):\n        print(\"DataFrame is missing one or more required columns: \", required_columns)\n        return plt.subplots()[1]\n\n    # Filter videos with titles containing 'how' or 'what'\n    filtered_df = df[df['Title'].str.contains(r'how|what', case=False)]\n\n    # Check if there are any videos that match the criteria\n    if filtered_df.empty:\n        print(\"No videos match the search criteria.\")\n        return plt.subplots()[1]\n\n    # Calculate like ratios\n    filtered_df['Like Ratio'] = filtered_df['Likes'] / filtered_df['Views']\n\n    # Plotting\n    ax = filtered_df.plot(kind='bar', x='Title', y='Like Ratio', figsize=(10, 6), legend=False)\n    ax.set_title('Like Ratios for Videos with \"How\" or \"What\" in Title')\n    ax.set_ylabel('Like Ratio')\n    ax.set_xlabel('Video Title')\n    plt.xticks(rotation=45)\n    plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels\n\n    return ax"}
{"task_id": "BigCodeBench/176", "solution": "import re\nimport socket\ndef task_func(ip_addresses: list) -> dict:\n    \"\"\"\n    Given a list of IP addresses, this function returns a dictionary mapping each valid IP address to its \n    respective hostname. If the hostname cannot be determined, the value will be None.\n    \n    Parameters:\n    ip_addresses (list): A list of IP addresses.\n    \n    Returns:\n    dict: A dictionary with IP addresses as keys and their hostnames as values. If the hostname cannot be determined,\n          the value will be None.\n    \"\"\"\n    results = {}\n    for ip in ip_addresses:\n        # Validate if the input is a correct IP address format using regex\n        if re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip):\n            try:\n                # Get the hostname for the IP address\n                hostname = socket.gethostbyaddr(ip)[0]\n                results[ip] = hostname\n            except socket.herror:\n                # If the hostname cannot be determined, map it to None\n                results[ip] = None\n        else:\n            # If the input is not a valid IP address, ignore it\n            continue\n    return results"}
{"task_id": "BigCodeBench/177", "solution": "import pandas as pd\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom string import punctuation\ndef task_func(df):\n    if df.empty or not all(column in df.columns for column in ['Title', 'Content']):\n        raise ValueError(\"DataFrame is empty or does not contain 'Title' and 'Content' columns.\")\n    \n    # Define keywords\n    keywords = ['like', 'what']\n    \n    # Filter articles by title containing keywords (case-insensitive)\n    filtered_articles = df[df['Title'].str.lower().str.contains('|'.join(keywords))]\n    \n    if filtered_articles.empty:\n        return {}\n    \n    # Function to clean and tokenize text\n    def clean_tokenize(text):\n        # Remove punctuation\n        text = re.sub(f\"[{re.escape(punctuation)}]\", \" \", text)\n        # Tokenize\n        words = nltk.word_tokenize(text)\n        # Remove stopwords\n        words = [word for word in words if word.lower() not in stopwords.words('english')]\n        return words\n    \n    # Apply cleaning and tokenization to the 'Content' of filtered articles\n    tokenized_contents = filtered_articles['Content'].apply(clean_tokenize)\n    \n    # Flatten the list of lists and count frequencies\n    all_words = [word for sublist in tokenized_contents.tolist() for word in sublist]\n    word_freq = nltk.FreqDist(all_words)\n    \n    return dict(word_freq)\ndata = {'Title': ['What is happening', 'Nothing special', 'I like coding'], 'Content': ['Like what you see?', 'Just normal text.', 'I really like it!']}\ndf = pd.DataFrame(data)"}
{"task_id": "BigCodeBench/178", "solution": "import re\nimport json\nimport urllib.request\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef validate_ip(ip):\n    \"\"\"Validates if the given string is an IP address.\"\"\"\n    if re.match(IP_REGEX, ip):\n        return True\n    return False\ndef task_func(ip_address):\n    \"\"\"\n    Get the public IP address from a JSON response containing the IP address.\n    \n    Parameters:\n    ip_address (str): JSON-formatted string containing the IP address. \n\n    Returns:\n    str: The public IP address or 'Invalid IP address received'.\n    \n    \"\"\"\n    try:\n        # Parse the input JSON string\n        data = json.loads(ip_address)\n        provided_ip = data.get('ip', '')\n        \n        # Validate the provided IP address\n        if validate_ip(provided_ip):\n            return provided_ip\n        else:\n            return 'Invalid IP address received'\n    except json.JSONDecodeError:\n        # If JSON parsing fails, return error message\n        return 'Invalid JSON format'\nip_address = '{\"ip\": \"192.168.1.1\"}'"}
{"task_id": "BigCodeBench/179", "solution": "import re\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\nimport numpy as np\ndef task_func(df):\n    if 'Title' not in df.columns or 'Content' not in df.columns:\n        print(\"DataFrame must contain 'Title' and 'Content' columns.\")\n        return plt.gca()\n\n    # Filter articles with titles containing 'how' or 'what'\n    relevant_titles = df[df['Title'].str.contains(r'\\b(how|what)\\b', case=False)]\n    if relevant_titles.empty:\n        print(\"No articles with titles containing 'how' or 'what'.\")\n        return plt.gca()\n\n    # Create TF-IDF vectorizer and fit-transform on the content of selected articles\n    vectorizer = TfidfVectorizer(stop_words='english')\n    tfidf = vectorizer.fit_transform(relevant_titles['Content'])\n\n    # Get feature names\n    feature_names = np.array(vectorizer.get_feature_names_out())\n\n    # Get the words with non-zero TF-IDF scores\n    nonzero_features = [(feature_names[i], tfidf[0, i]) for i in np.nonzero(tfidf.toarray())[1]]\n\n    # Sort by TF-IDF score\n    nonzero_features.sort(key=lambda x: x[1], reverse=True)\n\n    # Plotting\n    plt.figure(figsize=(10, 5))\n    axes = plt.gca()\n    axes.barh([f[0] for f in nonzero_features], [f[1] for f in nonzero_features])\n    axes.set_xlabel('TF-IDF Score')\n    axes.set_ylabel('Words')\n    plt.yticks(rotation=0)  # Words are displayed horizontally by default, corrected for vertical display\n    plt.title('TF-IDF Scores for Words in Selected Articles')\n    return axes"}
{"task_id": "BigCodeBench/180", "solution": "from PIL import Image\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(img_path, scale_factors=[0.5, 0.75, 1.5, 2.0]):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"The image file {img_path} cannot be found.\")\n    \n    original_image = Image.open(img_path)\n    original_image = np.array(original_image)\n    \n    scaled_images_with_axes = []\n    \n    for factor in scale_factors:\n        scaled_image = resize(original_image, (int(original_image.shape[0]*factor), int(original_image.shape[1]*factor)), anti_aliasing=True)\n        fig, ax = plt.subplots()\n        ax.imshow(scaled_image)\n        ax.set_title(f\"Scale factor: {factor}\")\n        ax.axis('off')  # Hide axes for better display\n        scaled_images_with_axes.append((ax, scaled_image))\n    \n    plt.show()  # Display all images\n    \n    return scaled_images_with_axes"}
{"task_id": "BigCodeBench/181", "solution": "import json\nimport random\nimport time\nclass MockHttpResponse:\n    def __init__(self, content, status_code=200):\n        self.content = content\n        self.status_code = status_code\ndef task_func(data, min_delay, max_delay):\n    \"\"\"\n    Simulates a task with network latency in a Django-like environment.\n    \"\"\"\n    # Simulate delay\n    delay = random.randint(min_delay, max_delay)\n    time.sleep(delay)\n    \n    # Prepare the response as if it's from Django's HttpResponse with JSON content\n    response_content = json.loads(data)  # Though data is expected as JSON string, we parse it to simulate processing\n    \n    # Normally you'd do: return HttpResponse(json.dumps(response_content), content_type='application/json')\n    # Here we use our mock class\n    return MockHttpResponse(json.dumps(response_content), status_code=200)"}
{"task_id": "BigCodeBench/182", "solution": "import pandas as pd\nimport re\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(df):\n    \"\"\"\n    Analyzes articles by their titles for specific case-insensitive keywords (\"how\" or \"what\"), vectorizes the content using\n    CountVectorizer, and groups them into clusters using KMeans clustering. This function is intended for basic\n    content analysis and clustering to understand common themes or topics among articles asking questions starting\n    with \"how\" or \"what\".\n\n    Parameters:\n    df (pd.DataFrame): DataFrame containing article data with columns 'Title' for the article titles and 'Content' for\n    the article text.\n\n    Returns:\n    list: List of cluster labels for the filtered articles, indicating the cluster to which each article belongs.\n    \"\"\"\n    # Filter titles containing 'how' or 'what'\n    df_filtered = df[df['Title'].str.contains(r'\\b(how|what)\\b', flags=re.IGNORECASE)]\n    \n    # Vectorize the content of the filtered titles\n    vectorizer = CountVectorizer()\n    title_vectors = vectorizer.fit_transform(df_filtered['Title'])\n    \n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=2, random_state=0)  # Assuming we want to find 2 main clusters\n    clusters = kmeans.fit_predict(title_vectors)\n    \n    return clusters.tolist()"}
{"task_id": "BigCodeBench/183", "solution": "from django.http import JsonResponse\nimport json\nimport uuid\ndef task_func(data):\n    \"\"\"\n    Create a Django JsonResponse with JSON data, and include a UUID in the HTTP headers to track requests.\n\n    Parameters:\n    data (str): The JSON-formatted data to be included in the response body.\n\n    Returns:\n    JsonResponse: A Django JsonResponse with JSON data and UUID in headers.\n    \"\"\"\n    # Create a unique UUID\n    unique_id = str(uuid.uuid4())\n    \n    # Create the JsonResponse with the data\n    response = JsonResponse(json.loads(data))\n    \n    # Add the UUID to the response headers\n    response['UUID'] = unique_id\n    \n    return response"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\ndef clean_text(text):\n    \"\"\"Removes stopwords, numbers, and punctuation from text.\"\"\"\n    text = re.sub(r'\\d+', '', text)  # remove numbers\n    text = re.sub(r'[^\\w\\s]', '', text)  # remove punctuation\n    words = text.split()\n    cleaned_words = [word for word in words if word.lower() not in STOPWORDS]\n    return ' '.join(cleaned_words)\ndef task_func(dataframe, text_column):\n    \"\"\"\n    Prepares and transforms text data from a specified column in a DataFrame.\n    \"\"\"\n    # Clean the text data\n    dataframe[text_column] = dataframe[text_column].apply(clean_text)\n    \n    # Vectorize the text data\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(dataframe[text_column])\n    \n    # Convert sparse matrix to DataFrame\n    result = pd.DataFrame(vectorized_data.toarray(), columns=vectorizer.get_feature_names_out())\n    \n    return result"}
{"task_id": "BigCodeBench/185", "solution": "import pandas as pd\nimport numpy as np\nimport folium\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    if 'Lon' not in dic or 'Lat' not in dic or not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Dictionary must contain 'Lon' and 'Lat' keys with tuple values for coordinate ranges.\")\n    \n    # Generate random coordinates\n    coordinates = pd.DataFrame({\n        'City': cities,\n        'Longitude': np.random.uniform(dic['Lon'][0], dic['Lon'][1], len(cities)),\n        'Latitude': np.random.uniform(dic['Lat'][0], dic['Lat'][1], len(cities))\n    })\n    \n    # Create a map centered at the mean of generated coordinates\n    map_obj = folium.Map(location=[coordinates['Latitude'].mean(), coordinates['Longitude'].mean()], zoom_start=2)\n    \n    # Add markers to the map\n    for name, lon, lat in coordinates.itertuples(index=False):\n        folium.Marker([lat, lon], popup=name).add_to(map_obj)\n    \n    return map_obj, coordinates"}
{"task_id": "BigCodeBench/186", "solution": "from geopy.distance import geodesic\nimport folium\ndef task_func(dic):\n    if not dic:\n        raise ValueError(\"Input dictionary cannot be empty.\")\n    \n    # Initialize the Folium map centered at the first location\n    first_loc = next(iter(dic.values()))\n    map_center = [first_loc['Lat'], first_loc['Lon']]\n    m = folium.Map(location=map_center, zoom_start=10)\n    \n    # Add markers for each location\n    markers = {}\n    for loc_name, loc_coords in dic.items():\n        folium.Marker([loc_coords['Lat'], loc_coords['Lon']], popup=loc_name).add_to(m)\n        markers[loc_name] = folium.Marker([loc_coords['Lat'], loc_coords['Lon']])\n    \n    # Calculate distances between each pair of locations\n    distances = {}\n    for i, (name1, marker1) in enumerate(markers.items()):\n        for name2, marker2 in markers.items():\n            if name1 != name2:\n                dist = geodesic((marker1.location), (marker2.location)).km\n                distances[(name1, name2)] = dist\n                \n    return m, distances"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    # Validate input\n    for key, value in dic.items():\n        if key not in ['Lon', 'Lat'] or not isinstance(value, tuple) or len(value) != 2:\n            raise ValueError(\"Dictionary keys must be 'Lon' and 'Lat', and their values must be tuples of (min, max).\")\n    \n    # Generate random coordinates\n    coordinates = [(np.random.uniform(dic['Lon'][0], dic['Lon'][1]), \n                   np.random.uniform(dic['Lat'][0], dic['Lat'][1])) for _ in cities]\n    \n    # Create GeoDataFrame\n    geometry = [Point(coord) for coord in coordinates]\n    gdf = gpd.GeoDataFrame({'City': cities, 'Coordinates': geometry}, geometry='Coordinates')\n    \n    return gdf"}
{"task_id": "BigCodeBench/188", "solution": "import pandas as pd\nimport folium\nfrom geopy.geocoders import Photon\ndef task_func(dic):\n    # Instantiate geolocator\n    geolocator = Photon(user_agent=\"geoapiExercises\")\n    \n    # Initialize Folium map at the center of the Earth\n    map_center = [0, 0]\n    m = folium.Map(location=map_center, zoom_start=2)\n    \n    for place, coord in dic.items():\n        if isinstance(coord, dict):  # If coordinate is a dictionary\n            lat, lon = coord['Lat'], coord['Lon']\n        else:  # If coordinate is a string (address)\n            location = geolocator.geocode(coord)\n            if location:  # Ensure location is found\n                lat, lon = location.latitude, location.longitude\n            else:\n                print(f\"Location not found for {place}. Skipping.\")\n                continue\n            \n        # Add marker to the map\n        folium.Marker([lat, lon], popup=place).add_to(m)\n    \n    return m"}
{"task_id": "BigCodeBench/189", "solution": "import re\nimport json\nimport requests\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom io import BytesIO\ndef task_func(data_url: str) -> list:\n    try:\n        response = requests.get(data_url)\n        data = response.json()\n        # Using regex to find names not enclosed in square brackets\n        names = re.findall(r'\"([^[\\]]+)\"', json.dumps(data), re.UNICODE)\n        return names\n    except Exception as e:\n        return \"Invalid url input\""}
{"task_id": "BigCodeBench/190", "solution": "import sqlite3\nimport pandas as pd\nimport csv\nfrom io import StringIO\nDATABASE_NAME = 'test.db'\nTABLE_NAME = 'test_table'\ndef task_func(csv_input):\n    # Connect to SQLite database\n    conn = sqlite3.connect(DATABASE_NAME)\n    cursor = conn.cursor()\n    \n    # Create table if not exists\n    cursor.execute(f\"\"\"\n    CREATE TABLE IF NOT EXISTS {TABLE_NAME} (\n        id INTEGER PRIMARY KEY,\n        name TEXT NOT NULL\n    )\n    \"\"\")\n    \n    # If csv_input is a file path\n    if isinstance(csv_input, str):\n        with open(csv_input, 'r') as file:\n            reader = csv.reader(file)\n            next(reader)  # Skip header if any\n            data_to_insert = [(row[0], row[1]) for row in reader]\n    # If csv_input is a StringIO object\n    else:\n        reader = csv.reader(csv_input)\n        next(reader)  # Skip header if any\n        data_to_insert = [(row[0], row[1]) for row in reader]\n    \n    # Insert data into the table\n    cursor.executemany(f\"INSERT INTO {TABLE_NAME} (id, name) VALUES (?, ?)\", data_to_insert)\n    conn.commit()\n    \n    # Retrieve data as a DataFrame\n    df = pd.read_sql_query(f\"SELECT * FROM {TABLE_NAME}\", conn)\n    \n    # Close the connection\n    conn.close()\n    \n    return df\ntest_csv_data = \"id,name\\n1,Alice\\n2,Bob\"\ntest_csv_file = StringIO(test_csv_data)"}
{"task_id": "BigCodeBench/191", "solution": "import random\nfrom scipy import stats\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a Poisson-distributed number of customers.\n    \"\"\"\n    # Generate the number of customers based on a Poisson distribution\n    num_customers = stats.poisson.rvs(mu=mean)\n    \n    # Initialize a dictionary to hold sales data\n    sales_summary = {animal: 0 for animal in animals}\n    \n    # Simulate sales for each customer\n    for _ in range(num_customers):\n        chosen_animal = random.choice(animals)\n        sales_summary[chosen_animal] += 1\n    \n    # Display and return the sales summary\n    for animal, count in sales_summary.items():\n        print(f\"{animal}: {count}\")\n    \n    return sales_summary"}
{"task_id": "BigCodeBench/192", "solution": "import re\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nTEXT = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\"\nRECIPIENT_ADDRESS = \"names@gmail.com\"\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(text=TEXT, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, recepient_address=RECIPIENT_ADDRESS):\n    \"\"\"\n    Extract all names from a string that is not enclosed by square brackets and send the names in an email.\n    \"\"\"\n    # Extract names using regex\n    names = re.findall(r'\\b[A-Za-z\\s]+(?![\\s]\\[)', text)\n    \n    # Prepare email\n    msg = MIMEMultipart()\n    msg['From'] = email_address\n    msg['To'] = recepient_address\n    msg['Subject'] = \"Extracted Names\"\n    body = \"\\n\".join(names)\n    msg.attach(MIMEText(body, 'plain'))\n\n    # Send email\n    server = smtplib.SMTP(smtp_server, smtp_port)\n    server.starttls()\n    server.login(email_address, email_password)\n    text = msg.as_string()\n    server.sendmail(email_address, recepient_address, text)\n    server.quit()\n    \n    return names"}
{"task_id": "BigCodeBench/193", "solution": "import pandas as pd\nimport numpy as np\nfrom random import choice, randint\nDATA_TYPES = [str, int, float, list, tuple, dict, set]\nALPHABET = 'abcdefghijklmnopqrstuvwxyz'\ndef generate_random_data(data_type):\n    if data_type is str:\n        return ''.join(choice(ALPHABET) for _ in range(5))\n    elif data_type is int:\n        return randint(0, 9)\n    elif data_type is float:\n        return float(randint(0, 9))\n    elif data_type in [list, tuple, set]:\n        length = randint(1, 5)\n        return data_type([randint(0, 9) for _ in range(length)])\n    elif data_type is dict:\n        return {randint(0, 9): randint(0, 9) for _ in range(randint(1, 5))}\n    else:\n        raise ValueError(\"Unsupported data type\")\ndef task_func(rows, columns):\n    data = {f'col{i}': [generate_random_data(choice(DATA_TYPES)) for _ in range(rows)] for i in range(columns)}\n    return pd.DataFrame(data)"}
{"task_id": "BigCodeBench/194", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nBAR_COLOR = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\ndef task_func(data_size):\n    \"\"\"\n    Generates random numeric data and creates a histogram of the data.\n    The color of the histogram bars is randomly selected from a predefined list.\n\n    Parameters:\n    data_size (int): The number of data points to generate.\n\n    Returns:\n    tuple:\n        - ndarray: The array of randomly generated data.\n        - str: The color used for the histogram bars.\n    \"\"\"\n    # Generate random data\n    data = np.random.rand(data_size)\n    \n    # Randomly select a color\n    color = np.random.choice(BAR_COLOR)\n    \n    # Create histogram\n    plt.hist(data, bins=10, color=color, edgecolor='black')\n    plt.title(f'Random Data Histogram (Color: {color})')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    \n    # Show the plot (optional, can be commented out for just data and color return)\n    plt.show()\n    \n    return data, color"}
{"task_id": "BigCodeBench/195", "solution": "import subprocess\nimport platform\nimport time\ndef task_func(url):\n    \"\"\"\n    Open a web page in the default web browser in a background process.\n\n    Parameters:\n    url (str): The URL of the webpage to be opened.\n\n    Returns:\n    int: The return code of the subprocess.\n\n    Requirements:\n    - subprocess\n    - platform\n    - time\n\n    Example:\n    >>> task_func('https://www.google.com')\n    0\n    \"\"\"\n    # Check the operating system to use the appropriate command\n    os_system = platform.system()\n    \n    if os_system == \"Windows\":\n        browser_command = 'start \"\" {}'.format(url)\n    elif os_system == \"Darwin\":  # macOS\n        browser_command = 'open {}'.format(url)\n    elif os_system == \"Linux\":\n        browser_command = 'xdg-open {}'.format(url)\n    else:\n        raise OSError(\"Unsupported operating system: {}\".format(os_system))\n    \n    # Run the command in a subprocess\n    process = subprocess.Popen(browser_command, shell=True)\n    \n    # Wait for the process to finish (though it shouldn't block as it's in background)\n    # Here, we just wait a short while to allow the subprocess to start before returning\n    time.sleep(1)\n    \n    # Return code can't be fetched for background processes this way.\n    # Actual return code checking isn't applicable for commands that don't terminate (like opening a browser).\n    # So, we'll assume 0 for success as per the example.\n    return 0"}
{"task_id": "BigCodeBench/196", "solution": "import random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(length, range_limit=100, seed=0):\n    if range_limit <= 1:\n        raise ValueError(\"range_limit must be greater than 1.\")\n    \n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Generate the list of random numbers\n    random_numbers = [random.randint(1, range_limit) for _ in range(length)]\n    \n    # Sort the list\n    sorted_numbers = sorted(random_numbers)\n    \n    # Set up the matplotlib figure\n    fig, ax = plt.subplots()\n    \n    # Use seaborn to plot the histogram\n    sns.histplot(sorted_numbers, ax=ax, kde=False)\n    \n    # Set plot title and labels\n    ax.set_title('Distribution of Random Numbers')\n    ax.set_xlabel('Random Numbers')\n    ax.set_ylabel('Frequency')\n    \n    # Show the plot\n    plt.tight_layout()\n    \n    return ax, sorted_numbers"}
{"task_id": "BigCodeBench/197", "solution": "import heapq\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(l1, l2, N=10):\n    \"\"\"\n    The function calculates the N biggest squared root of squared differences between elements of l1 and l2, then plots them.\n    \"\"\"\n    # Calculate differences, square them, and find the N largest\n    squared_diffs = [(math.sqrt((l1[i] - l2[i])**2), i) for i in range(len(l1)) if l1[i] != l2[i]]\n    largest_diffs = heapq.nlargest(N, squared_diffs, key=lambda x: x[0])\n\n    # Extract the y-values (squared differences) for plotting\n    y_values = [diff[0] for diff in largest_diffs]\n\n    # Create a matplotlib plot\n    fig, ax = plt.subplots()\n    \n    # If we want to plot the differences, we need x-values. Here we can use the index of the elements\n    x_values = [i for i in range(N)]\n    ax.plot(x_values, y_values, marker='o', linestyle='-', color='b')\n    \n    # Labeling\n    ax.set_title(f'Top {N} Squared Root of Squared Differences')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Squared Root of Squared Difference')\n    \n    # Show plot\n    plt.grid(True)\n    plt.show()\n\n    return ax\nl1 = [99, 86, 90, 70, 86, 95, 56, 98, 80, 81]\nl2 = [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]"}
{"task_id": "BigCodeBench/198", "solution": "import numpy as np\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(data, value):\n    if not data:  # Check if the data list is empty\n        return np.array([]), 0\n\n    # Calculate the average of the data\n    avg = statistics.mean(data)\n    \n    # Filter data to include only values greater than the average\n    greater_avg = np.array([i for i in data if i > avg])\n    \n    # Count how many values are greater than the given value\n    count = bisect.bisect_left(data, value) if value <= max(data) else len(data)\n    \n    # Plot the histogram of the sorted numbers\n    plt.hist(data, bins='auto')\n    plt.title('Histogram of Sorted Numbers')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.show()\n    \n    return greater_avg, count\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvalue = 5"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    set_seed(seed)\n    \n    if not isinstance(utc_datetime, datetime) or utc_datetime.tzinfo != pytz.UTC:\n        raise ValueError(\"utc_datetime must be a datetime object with tzinfo set to UTC.\")\n    \n    # Create a DataFrame\n    data = []\n    for city in cities:\n        tz = pytz.timezone(timezones[city])\n        local_time = utc_datetime.astimezone(tz)\n        weather = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        data.append([city, local_time.strftime('%Y-%m-%d %H:%M:%S %Z'), weather])\n    \n    return pd.DataFrame(data, columns=['City', 'Local Time', 'Weather Condition'])"}
{"task_id": "BigCodeBench/200", "solution": "import random\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(n, value):\n    # Generate 'n' random numbers between 0 and 1\n    random_numbers = [random.random() for _ in range(n)]\n    \n    # Calculate the average of the generated numbers\n    avg = statistics.mean(random_numbers)\n    \n    # Find numbers greater than the average\n    greater_avg = [num for num in random_numbers if num > avg]\n    \n    # Count numbers greater than or equal to the specified value\n    count = sum(1 for num in random_numbers if num >= value)\n    \n    # Plot the sorted numbers\n    plt.plot(sorted(random_numbers), 'bo', label='Random Numbers')\n    plt.axhline(y=value, color='r', linestyle='--', label=f'Value = {value}')\n    plt.title('Sorted Random Numbers with Specified Value')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    plt.legend()\n    plt.show()\n    \n    return greater_avg, count"}
{"task_id": "BigCodeBench/201", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statistics import mean\nfrom bisect import bisect_left\ndef task_func(df, column, value):\n    if column not in df.columns:\n        raise ValueError(f\"Column {column} does not exist in the DataFrame.\")\n    if not isinstance(value, (int, float)):\n        raise ValueError(\"Value must be a number.\")\n    \n    # Calculate the average of the column\n    avg = mean(df[column])\n    \n    # Find values greater than the average\n    greater_avg = df[df[column] > avg][column].values\n    \n    # Count the number of values greater than the given value\n    num_greater_value = bisect_left(df[column].values, value)\n    \n    # Generate a histogram plot\n    fig, ax = plt.subplots()\n    df[column].hist(ax=ax)\n    ax.axvline(x=value, color='r', linestyle='dashed', linewidth=2)\n    ax.set_title(f'Histogram with threshold at {value}')\n    ax.set_xlabel(column)\n    ax.set_ylabel('Frequency')\n    \n    return greater_avg, num_greater_value, ax"}
{"task_id": "BigCodeBench/202", "solution": "import re\nimport json\nfrom collections import Counter\ndef task_func(json_str, top_n=10):\n    \"\"\"\n    Extract all URLs from a string-serialized JSON dict using a specific URL pattern and return a dict\n    with the URLs as keys and the number of times they appear as values.\n    \n    Parameters:\n    json_str (str): The JSON string.\n    top_n (int, Optional): The number of URLs to return. Defaults to 10. \n    \n    Returns:\n    dict: A dict with URLs as keys and the number of times they appear as values.\n    \"\"\"\n    # Define a regular expression pattern for URLs\n    url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    \n    # Load the JSON string into a Python dictionary\n    data = json.loads(json_str)\n    \n    # Find all URLs in the dictionary's string values\n    urls = [value for value in data.values() if isinstance(value, str) for match in url_pattern.findall(value)]\n    \n    # Count the occurrences of each URL\n    url_counts = Counter(urls)\n    \n    # Return the top N URLs by count\n    return dict(url_counts.most_common(top_n))"}
{"task_id": "BigCodeBench/203", "solution": "import json\nimport re\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(input_data=None, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, smtp=None):\n    \"\"\"\n    Extract recipient email address and names from JSON-formatted string and send the names in an email.\n    \"\"\"\n    # Parse JSON data\n    data = json.loads(input_data)\n    recipient_email = data.get('recipient')\n    names = data.get('names', [])\n\n    # Check if names are extracted\n    if not names:\n        return []\n\n    # Prepare email\n    msg = MIMEMultipart()\n    msg['From'] = email_address\n    msg['To'] = recipient_email\n    msg['Subject'] = 'Extracted Names'\n    message = '\\n'.join(names)\n    msg.attach(MIMEText(message, 'plain'))\n\n    # Send email\n    if smtp is None:\n        smtp = smtplib.SMTP(smtp_server, smtp_port)\n        smtp.starttls()\n        smtp.login(email_address, email_password)\n    smtp.sendmail(email_address, recipient_email, msg.as_string())\n    smtp.quit()\n\n    return names"}
{"task_id": "BigCodeBench/204", "solution": "import numpy as np\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    \"\"\"\n    Analyze an \"L\" list by calculating the mean, median, mode, and standard deviation.\n    Visualize the data by returning a histogram plot.\n    \n    Parameters:\n    L (list): Input list.\n    \n    Returns:\n    dict: A dictionary with the 'mean', 'median', 'mode', 'std_dev' of 'L', and the 'plot' Axes object.\n    \"\"\"\n    # Calculate statistics\n    mean = np.mean(L)\n    median = np.median(L)\n    mode = Counter(L).most_common(1)[0][0]  # mode is the first element of the most common tuple\n    std_dev = np.std(L)\n    \n    # Create histogram plot\n    plt.hist(L, bins='auto', alpha=0.7, rwidth=0.85)\n    plt.grid(axis='y', alpha=0.75)\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of the Input Data')\n    plt.tight_layout()\n    plot_object = plt.gcf()  # Get the current figure\n    \n    # Return statistics and plot\n    return {\n        'mean': mean,\n        'median': median,\n        'mode': mode,\n        'std_dev': std_dev,\n        'plot': plot_object\n    }\nL = [1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "BigCodeBench/205", "solution": "import subprocess\nfrom multiprocessing import Pool\ndef execute_command(command):\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, _ = process.communicate()\n    return output\ndef task_func(commands):\n    \"\"\"\n    Executes a list of shell commands in parallel using multiprocessing, and collects their outputs.\n    \n    Parameters:\n        commands (list): A list of shell commands to be executed.\n\n    Returns:\n        list: A list of byte strings, each representing the output of a command. Returns an empty list if `commands` is empty.\n    \"\"\"\n    if not commands:\n        return []\n    \n    with Pool() as p:\n        results = p.map(execute_command, commands)\n    return results"}
{"task_id": "BigCodeBench/206", "solution": "import csv\nimport json\nimport os\ndef task_func(file_name):\n    \"\"\"\n    Convert a csv file to a json file.\n    \n    Parameters:\n    file_name (str): The name of the csv file.\n    \n    Returns:\n    str: The file name of the created json file.\n\n    Raises:\n    FileNotFoundError: If the file does not exist.\n    \n    Example:\n    >>> import tempfile\n    >>> FILE_NAME = tempfile.NamedTemporaryFile(prefix='report_', suffix='.csv', dir='/tmp').name\n    >>> with open(FILE_NAME, 'w', newline='') as csvfile:\n    ...     fieldnames = ['id', 'name', 'age']\n    ...     writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n    ...     _ = writer.writeheader()\n    ...     _ = writer.writerow({'id': '1', 'name': 'John', 'age': '25'})\n    ...     _ = writer.writerow({'id': '2', 'name': 'Doe', 'age': '30'})\n    >>> json_file = task_func(FILE_NAME)\n    >>> print(json_file.startswith('/tmp/report_') and json_file.endswith('.json'))\n    True\n    \"\"\"\n    if not os.path.exists(file_name):\n        raise FileNotFoundError(f\"The file {file_name} does not exist.\")\n    \n    # Extract the directory and base name of the csv file\n    dir_name, base_name = os.path.split(file_name)\n    base_name, _ = os.path.splitext(base_name)  # Remove the .csv extension\n    \n    # Define the json file name\n    json_file_name = base_name + '.json'\n    json_file_path = os.path.join(dir_name, json_file_name)\n    \n    # Read the csv file and convert to json\n    with open(file_name, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        data = list(reader)\n    \n    # Write the data to the json file\n    with open(json_file_path, 'w') as jsonfile:\n        json.dump(data, jsonfile)\n    \n    return json_file_path"}
{"task_id": "BigCodeBench/207", "solution": "import re\nimport json\nimport requests\ndef task_func(input_str):\n    \"\"\"\n    Extract an API endpoint from the input string, send a GET request to the endpoint, and return the response data in JSON format.\n\n    Parameters:\n    input_str (str): The input string containing an API endpoint.\n\n    Returns:\n    dict: The response data.\n\n    Requirements:\n    - re\n    - json\n    - requests\n\n    Example:\n    >>> task_func('Fetch data from https://api.example.com/data')\n    {'key': 'value'}  # This is a placeholder. Actual response depends on the endpoint.\n    \"\"\"\n    # Extract API endpoint using regex\n    url_pattern = re.compile(r'https?://[^\\s]+')\n    endpoint = url_pattern.search(input_str)\n    \n    if endpoint:\n        endpoint_url = endpoint.group()\n        try:\n            # Send GET request\n            response = requests.get(endpoint_url)\n            # Return response in JSON format\n            if response.status_code == 200:\n                return response.json()\n            else:\n                return {\"error\": f\"Request failed with status {response.status_code}\"}\n        except requests.RequestException as e:\n            return {\"error\": f\"Request failed: {str(e)}\"}\n    else:\n        return {\"error\": \"No valid API endpoint found in the input\"}"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n\n    np.random.seed(seed)\n    steps = np.random.choice([-1, 1], size=elements)\n    walk = np.cumsum(steps)\n    \n    stats = {\n        'count': np.count_nonzero(walk),\n        'mean': np.mean(walk),\n        'std': np.std(walk),\n        'min': np.min(walk),\n        '5%': np.percentile(walk, 5),\n        '25%': np.percentile(walk, 25),\n        '50%': np.median(walk),\n        '75%': np.percentile(walk, 75),\n        '95%': np.percentile(walk, 95),\n        'max': np.max(walk)\n    }\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(walk, label='Random Walk')\n    plt.title('Random Walk of {} Steps'.format(elements))\n    plt.xlabel('Step Number')\n    plt.ylabel('Position')\n    plt.legend()\n    ax = plt.gca()\n    \n    return stats, ax"}
{"task_id": "BigCodeBench/209", "solution": "import numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Plot a scatter graph of tuples and highlight the tuple with the maximum value at index 1.\n    \n    Parameters:\n    data (list of tuple): A list of tuples where each tuple contains two integers.\n    \n    Returns:\n    matplotlib.axes.Axes: The Axes object of the plot for further manipulation and testing, with the title 'Max Tuple Highlighted', x-axis labeled 'x', y-axis labeled 'y', and a legend.\n    \"\"\"\n    # Find the tuple with the maximum value at index 1\n    max_tuple = max(data, key=itemgetter(1))\n    \n    # Extract x and y values from the data\n    x_values = [t[0] for t in data]\n    y_values = [t[1] for t in data]\n    \n    # Plot all tuples\n    scatter = plt.scatter(x_values, y_values, color='blue', label='All Tuples')\n    \n    # Highlight the max tuple\n    plt.scatter(max_tuple[0], max_tuple[1], color='red', label='Max Tuple')\n    \n    # Set plot details\n    plt.title('Max Tuple Highlighted')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.legend()\n    \n    # Return the Axes object\n    return plt.gca()"}
{"task_id": "BigCodeBench/210", "solution": "import collections\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Count the frequency of each letter\n    counter = collections.Counter(itemgetter(0)(d) for d in data)\n    \n    # Find the letter with the maximum integer value\n    max_letter, max_value = max(data, key=itemgetter(1))\n    \n    # Create a bar plot\n    fig, ax = plt.subplots()\n    bars = ax.bar(counter.keys(), counter.values())\n    \n    # Highlight the bar for the max value letter\n    for bar in bars:\n        if bar.get_label() == max_letter:\n            bar.set_color('red')\n    \n    # Set labels and title\n    ax.set_xlabel('Letter')\n    ax.set_ylabel('Count')\n    ax.set_title('Letter Counts with Max Value Letter Highlighted')\n    \n    # Add legend\n    ax.legend(['Letter Counts', 'Max Value Letter'])\n    \n    return ax\ndataset = [('a', 10), ('b', 15), ('a', 5), ('c', 20)]"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download and keep a zip file from a URL, extract its contents to the specified directory, and return the list of extracted files.\n    \"\"\"\n    if headers is None:\n        headers = {'accept': 'application/octet-stream'}\n\n    # Download the zip file\n    response = requests.get(url, headers=headers, stream=True)\n    if response.status_code != 200:\n        raise Exception(f\"Failed to download file, status code: {response.status_code}\")\n\n    # Create the destination directory if it doesn't exist\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    # Save the zip file\n    zip_file_path = os.path.join(destination_directory, 'downloaded.zip')\n    with open(zip_file_path, 'wb') as f:\n        for chunk in response.iter_content(1024):\n            f.write(chunk)\n\n    # Extract the zip file\n    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    # Get the list of the extracted files\n    extracted_files = [os.path.basename(file) for file in zip_ref.namelist()]\n\n    return extracted_files"}
{"task_id": "BigCodeBench/212", "solution": "import numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Draw a scatter plot of dots and mark the point with the maximum y-value. Return the axes object as\n    well as the maximum y-value point.\n    \n    Parameters:\n    data (list of tuples): A list where each tuple contains two floats representing x and y coordinates.\n    \n    Returns:\n    matplotlib.axes.Axes: Axes object with the scatter plot, with the x-axis labeled 'x', the y-axis labeled 'y', and the title 'Points with Max Y Point Highlighted'.\n    tuple: The point with the maximum y-value.\n    \"\"\"\n    # Extract x and y values from data\n    x, y = zip(*data)\n    \n    # Identify the point with the maximum y-value\n    max_y_point = max(data, key=itemgetter(1))\n    \n    # Create a scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(x, y, color='blue', label='Points')\n    \n    # Highlight the point with the maximum y-value\n    ax.scatter(*max_y_point, color='red', label=f'Max Y Point ({max_y_point})')\n    \n    # Set labels and title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Points with Max Y Point Highlighted')\n    ax.legend()\n    \n    # Show plot\n    plt.grid(True)\n    \n    return ax, max_y_point"}
{"task_id": "BigCodeBench/213", "solution": "import time\nimport random\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kurtosis\ndef task_func(intervals=100, seed=0):\n    \"\"\"\n    Generates a series of random numbers over a specified number of intervals with a delay of 1 second between \n    each interval. It then plots these numbers as a function of elapsed time and returns the Axes object along\n    with the kurtosis value of the generated numbers.\n    \n    Parameters:\n    - intervals (int, optional): Number of intervals for generating random numbers. Default is 100.\n\n    Returns:\n    - matplotlib.axes.Axes: The Axes object representing the plot.\n    - float: The kurtosis value of the generated numbers.\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Initialize lists to store time and random numbers\n    times = []\n    numbers = []\n    \n    # Generate random numbers with delay\n    for i in range(intervals):\n        time.sleep(1)  # Introduce a 1-second delay\n        t = time.time()  # Record the current time\n        n = random.random()  # Generate a random number\n        times.append(t)\n        numbers.append(n)\n        print(f\"Generated number {n} at time {t}\", end=\"\\r\")  # Overwrite line for progress\n        \n    # Plotting the numbers against time\n    fig, ax = plt.subplots()\n    ax.plot(times, numbers, label='Random Numbers Over Time', marker='o', linestyle='-')\n    ax.set_xlabel('Time (seconds)')\n    ax.set_ylabel('Random Numbers')\n    ax.set_title('Random Numbers Generated Over Time')\n    ax.legend()\n    plt.grid(True)\n    \n    # Calculate kurtosis\n    kurt = kurtosis(numbers)\n    \n    # Show the plot (optional, can be commented out if not needed immediately)\n    # plt.show()\n    \n    return ax, kurt"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n\n    # Set the random seed for reproducibility\n    random.seed(seed)\n    np.random.seed(seed)\n\n    # Generate a random RGB image\n    image = np.random.randint(range_low, range_high, size=image_size, dtype=np.uint8)\n\n    # Convert the image to BGR for OpenCV (matplotlib uses RGB)\n    image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\n\n    # Display the image using matplotlib\n    fig, ax = plt.subplots()\n    ax.imshow(image_bgr)\n    ax.set_title('Randomly Generated Image')\n    plt.axis('off')  # Hide axes\n\n    # Return the Axes object and the image array\n    return ax, image"}
{"task_id": "BigCodeBench/215", "solution": "import requests\nimport json\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nHEADERS = {\n    'accept': 'application/json'\n}\ndef task_func(url, parameters):\n    try:\n        # Send GET request\n        response = requests.get(url, headers=HEADERS, params=parameters)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx or 5xx)\n        \n        # Convert response to json\n        data_json = response.json()\n        \n        # Check if data is not empty\n        if not data_json:\n            raise ValueError(\"Received empty data from the API.\")\n        \n        # Convert json to pandas DataFrame\n        df = pd.DataFrame(data_json)\n        \n        # Check if DataFrame has numerical data for heatmap\n        if not df.select_dtypes(include='number').shape[1]:\n            raise ValueError(\"The DataFrame does not contain numerical columns for a heatmap.\")\n        \n        # Draw heatmap\n        plt.figure(figsize=(10, 8))\n        ax = sns.heatmap(df.select_dtypes(include='number').corr(), annot=True, cmap='coolwarm')\n        plt.title('Correlation Heatmap')\n        \n        return df, ax\n    \n    except requests.RequestException as e:\n        # Any error related to the request\n        raise Exception(f\"Error accessing the URL: {e}\")\n    except ValueError as ve:\n        # Custom value errors\n        raise ve\n    except Exception as e:\n        # Other unexpected exceptions\n        raise Exception(f\"An unexpected error occurred: {e}\")"}
{"task_id": "BigCodeBench/216", "solution": "import pandas as pd\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_dir_path, word_count):\n    all_words = []\n    \n    # Walk through the directory to find all JSON files\n    for root, dirs, files in os.walk(json_dir_path):\n        for file in files:\n            if file.endswith('.json'):\n                with open(os.path.join(root, file), 'r') as f:\n                    data = json.load(f)\n                    # Extract text content from each JSON file\n                    text = data.get('text', '')\n                    # Split the text into words and add to the list\n                    all_words.extend(text.split())\n    \n    # Count the frequency of each word\n    word_counts = Counter(all_words)\n    \n    # Find the most common words\n    most_common_words = word_counts.most_common(word_count)\n    \n    return most_common_words"}
{"task_id": "BigCodeBench/217", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu=0, sigma=1, sample_size=1000, seed=0):\n    np.random.seed(seed)  # Set the seed for reproducibility\n    sample = np.random.normal(mu, sigma, sample_size)  # Generate the sample\n    \n    # Calculate empirical mean and standard deviation\n    emp_mean = np.mean(sample)\n    emp_std = np.std(sample)\n    \n    # Plotting the histogram and PDF\n    fig, ax = plt.subplots()\n    ax.hist(sample, bins='auto', density=True, alpha=0.6, color='b')\n    \n    # Plot the normal distribution PDF\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, p, 'k', linewidth=2)\n    ax.set_title(f'Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability Density')\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return ax, emp_mean, emp_std"}
{"task_id": "BigCodeBench/218", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\nTARGET = 'target'\ndef task_func(df, dict_mapping, plot_histogram=False):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame.\")\n    if not all(col in df.columns for col in FEATURES + [TARGET]):\n        raise ValueError(\"DataFrame must contain columns: {} and {}\".format(FEATURES, TARGET))\n    \n    # Replace values according to the mapping\n    df = df.replace(dict_mapping)\n    \n    # Standardize specified features\n    scaler = StandardScaler()\n    df[FEATURES] = scaler.fit_transform(df[FEATURES])\n    \n    # Optionally plot the histogram of the target variable\n    if plot_histogram:\n        ax = df[TARGET].hist()\n        plt.title('Histogram of Target Variable')\n        plt.xlabel('Target')\n        plt.ylabel('Frequency')\n        plt.grid(False)\n        return df, ax\n    else:\n        return df, None"}
{"task_id": "BigCodeBench/219", "solution": "import math\nimport statistics\nimport numpy as np\ndef calculate_fft(input_list):\n    \"\"\"\n    Calculates the magnitude of the fast fourier transform of the input list.\n    \"\"\"\n    fft_values = np.fft.fft(input_list)\n    magnitude = np.abs(fft_values)\n    return [math.ceil(m) for m in magnitude]\ndef task_func(input_list):\n    \"\"\"\n    Sorts the input list, analyzes it, and its FFT magnitude.\n    \"\"\"\n    sorted_list = sorted(input_list)\n    fft_magnitude = sorted(calculate_fft(input_list))\n\n    mean_sorted = round(statistics.mean(sorted_list))\n    median_sorted = round(statistics.median(sorted_list))\n    try:\n        mode_sorted = round(statistics.mode(sorted_list))\n    except statistics.StatisticsError:\n        mode_sorted = 'No unique mode'\n\n    mean_fft = round(statistics.mean(fft_magnitude))\n    median_fft = round(statistics.median(fft_magnitude))\n    try:\n        mode_fft = round(statistics.mode(fft_magnitude))\n    except statistics.StatisticsError:\n        mode_fft = 'No unique mode'\n\n    return (mean_sorted, median_sorted, mode_sorted, mean_fft, median_fft, mode_fft)\ninput_list = [30, 45, 60, 90, 180]"}
{"task_id": "BigCodeBench/220", "solution": "from random import choice\nimport turtle\nimport time\ndef task_func(colors):\n    # Initialize the Turtle Graphics window\n    window = turtle.Screen()\n    window.title(\"Random Color Squares\")\n\n    # Create a Turtle object\n    drawer = turtle.Turtle()\n    drawer.speed(1)  # Slow down the drawing speed for visibility\n\n    for _ in range(5):\n        # Choose a random color from the list\n        drawer.color(choice(colors))\n        \n        # Draw a square\n        for _ in range(4):\n            drawer.forward(100)\n            drawer.right(90)\n        \n        # Pause for 1 second\n        time.sleep(1)\n        \n        # Move to the next position to draw the next square\n        drawer.penup()\n        drawer.forward(120)  # Adjust the distance to prevent overlap\n        drawer.pendown()\n\n    # Keep the window open after drawing\n    turtle.done()"}
{"task_id": "BigCodeBench/221", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\ndef task_func(df, dct):\n    if not all(feature in df.columns for feature in FEATURES):\n        return \"Invalid input: DataFrame is missing one or more required features.\"\n    \n    stats_dict = {}\n    \n    for feature in FEATURES:\n        # Replace values based on dct\n        df[feature] = df[feature].replace(dct)\n        \n        # Check if the column is numeric, as mode for non-numeric columns is not straightforward\n        if np.issubdtype(df[feature].dtype, np.number):\n            mean = df[feature].mean()\n            median = df[feature].median()\n            mode = stats.mode(df[feature]).mode[0] if stats.mode(df[feature]).count[0] > 1 else \"No mode\"\n            variance = df[feature].var()\n            stats_dict[feature] = {'mean': mean, 'median': median, 'mode': mode, 'variance': variance}\n        else:\n            return \"Invalid input: Non-numeric data found in a feature which is required to calculate statistics.\"\n    \n    return stats_dict"}
{"task_id": "BigCodeBench/222", "solution": "import math\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(list_input):\n    \"\"\"\n    Sort the given list in ascending order based on the degree value of its elements, calculate the cumulative sum of \n    the sorted list, and draw a line chart of the cumulative sum.\n\n    Parameters:\n    list_input (list): The list to be sorted.\n\n    Returns:\n    tuple: A tuple containing:\n           - numpy array: The cumulative sum of the sorted list.\n           - matplotlib.axes._axes.Axes: The Axes object of the plotted line chart.\n    \"\"\"\n    # Assuming 'degree value' refers to the actual values in the list for sorting in an ascending manner\n    sorted_list = sorted(list_input)\n    \n    # Calculate the cumulative sum of the sorted list\n    cumsum = np.cumsum(sorted_list)\n    \n    # Create a new figure and an Axes object\n    fig, ax = plt.subplots()\n    \n    # Plot the cumulative sum\n    ax.plot(cumsum, label='Cumulative Sum', marker='o')\n    \n    # Set the title and labels for the plot\n    ax.set_title('Cumulative Sum Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n    \n    # Show the plot (optional, if you want the plot to pop out immediately)\n    # plt.show()\n    \n    return cumsum, ax"}
{"task_id": "BigCodeBench/223", "solution": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\ndef task_func(df, dct, columns=None):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    \n    # Replace specified values\n    for old_val, new_val in dct.items():\n        df.replace(old_val, new_val, inplace=True)\n    \n    # Encode categorical columns\n    if columns is None:\n        columns = df.select_dtypes(include=['object']).columns.tolist()\n    encoder = LabelEncoder()\n    for col in columns:\n        df[col] = encoder.fit_transform(df[col])\n    \n    # Standardize numerical columns\n    scaler = StandardScaler()\n    num_columns = df.select_dtypes(include=['number']).columns.tolist()\n    df[num_columns] = scaler.fit_transform(df[num_columns])\n    \n    return df"}
{"task_id": "BigCodeBench/224", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(range_start=-10, range_end=10, step=0.1):\n    x_values = np.arange(range_start, range_end, step)\n    data_gen = ((x, np.sin(x), np.cos(x), abs(np.sin(x) - np.cos(x))) for x in x_values)\n    \n    absolute_diff = np.abs(np.sin(x_values) - np.cos(x_values))\n    fft_diff = fft(absolute_diff)\n    fft_magnitude = np.abs(fft_diff)\n    \n    fft_mean = np.mean(fft_magnitude)\n    fft_median = np.median(fft_magnitude)\n    \n    fig, ax = plt.subplots()\n    ax.plot(x_values, np.sin(x_values), label='sin(x)')\n    ax.plot(x_values, np.cos(x_values), label='cos(x)')\n    ax.plot(x_values, absolute_diff, label='|sin(x) - cos(x)|', linestyle='--')\n    ax.legend()\n    \n    return data_gen, ax, fft_mean, fft_median"}
{"task_id": "BigCodeBench/225", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, dct, columns=None, plot_histograms=False):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' must be a DataFrame.\")\n    \n    # Replace values in DataFrame using the dictionary\n    modified_df = df.replace(dct)\n    \n    # Plot histograms if required\n    if plot_histograms and columns is not None:\n        for column in columns:\n            if column in modified_df.columns:\n                plt.figure(figsize=(6, 4))\n                modified_df[column].hist()\n                plt.title(f'Histogram of {column}')\n                plt.show()\n            else:\n                print(f\"Column '{column}' not found in DataFrame.\")\n    \n    return modified_df"}
{"task_id": "BigCodeBench/226", "solution": "import numpy as np\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(range_start=0, range_end=10, step=0.1):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains x and e^x values. Plot the exponential function using these values.\n\n    Returns:\n    tuple: \n        - A generator object that yields tuples of (x, e^x).\n        - The plotted Axes object of the exponential function.\n    \"\"\"\n    # Generator object\n    def exponential_sequence():\n        x = range_start\n        while x <= range_end:\n            yield (x, math.exp(x))\n            x += step\n    \n    # Create the generator\n    data = exponential_sequence()\n    \n    # Plotting\n    x_values = np.arange(range_start, range_end, step)\n    y_values = np.exp(x_values)\n    fig, ax = plt.subplots()\n    ax.plot(x_values, y_values)\n    ax.set_title('Exponential Function Plot')\n    ax.set_xlabel('x')\n    ax.set_ylabel('e^x')\n    \n    # Show the plot (optional, can be removed if the plot is to be handled outside the function)\n    plt.show()\n    \n    return data, ax"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(L, M, N, audio_file):\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(f\"The file {audio_file} does not exist.\")\n    \n    # Create the matrix from the list\n    matrix = np.array(L).reshape(M, N)\n    \n    # Load audio file to calculate SPL\n    audio_data, sample_rate = sf.read(audio_file)\n    \n    # Calculate the sound pressure level (SPL)\n    spl = 20 * np.log10(np.sqrt(np.mean(audio_data**2)))\n    \n    # Normalize the matrix based on the SPL\n    normalized_matrix = matrix / (10**(spl / 20))\n    \n    # Generate spectrogram\n    fig, ax = plt.subplots()\n    spec = librosa.feature.melspectrogram(S=normalized_matrix, sr=sample_rate)\n    spec_db = librosa.power_to_db(spec, ref=np.max)\n    \n    # Plot with a logarithmic frequency scale and linear time scale\n    cax = ax.matshow(spec_db, origin='lower', aspect='auto', cmap='viridis')\n    fig.colorbar(cax)\n    \n    ax.set(title='Spectrogram')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Frequency')\n    \n    # Return the normalized matrix and the spectrogram figure\n    return normalized_matrix, fig"}
{"task_id": "BigCodeBench/228", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(df, dct):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame.\")\n    \n    # Replace certain values in the DataFrame using the dictionary\n    df = df.replace(dct)\n    \n    # Ensure all values are numeric for correlation, this step is necessary if original DataFrame contains categorical data\n    df = df.apply(pd.to_numeric, errors='coerce')\n    \n    # Calculate the Pearson correlation matrix\n    correlation_matrix = df.corr(method='pearson')\n    \n    return correlation_matrix"}
{"task_id": "BigCodeBench/229", "solution": "import json\nimport random\nfrom datetime import datetime, timedelta\nUSERS = ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\ndef task_func(file_path, num_entries, seed=None):\n    \"\"\"\n    Create a JSON file on a specific file path with random user activity data.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)  # Set the seed for reproducibility\n\n    log_data = []\n    for _ in range(num_entries):\n        user = random.choice(USERS)\n        action = f\"action_{random.randint(1, 100)}\"  # Simple action ID for demonstration\n        timestamp = (datetime.now() - timedelta(minutes=random.randint(0, 1440))).isoformat()  # Random timestamp from the last 24 hours\n        log_data.append({'user': user, 'action': action, 'timestamp': timestamp})\n\n    with open(file_path, 'w') as file:\n        json.dump(log_data, file, indent=4)\n\n    return file_path"}
{"task_id": "BigCodeBench/230", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nCOLUMNS = ['Name', 'Age', 'Country', 'Score']\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or not all(column in df.columns for column in COLUMNS):\n        return \"Invalid input\"\n\n    # Unique names for histogram to avoid duplication\n    unique_names = df['Name'].unique()\n    df_unique_names = df[df['Name'].isin(unique_names)]\n\n    # Create a figure and a set of subplots\n    fig, axs = plt.subplots(1, 2, figsize=(14, 7))\n\n    # Histogram of Scores\n    sns.histplot(df_unique_names, x='Score', ax=axs[0], kde=True)\n    axs[0].set_title('Histogram of Scores')\n\n    # Boxplot of Scores by Country\n    sns.boxplot(x='Country', y='Score', data=df_unique_names, ax=axs[1])\n    axs[1].set_title('Boxplot of Scores by Country')\n\n    # Show plots\n    plt.tight_layout()\n    return fig"}
{"task_id": "BigCodeBench/231", "solution": "import numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport random\nclass ValueObject:\n    def __init__(self, mu=0, std=1, seed=77):\n        random.seed(seed)\n        self.value = random.gauss(mu, std)\ndef task_func(obj_list) -> Axes:\n    if not obj_list:\n        mu, std = 0, 0\n    else:\n        values = [obj.value for obj in obj_list]\n        mu = np.mean(values)\n        std = np.std(values, ddof=0)  # Sample standard deviation\n\n    fig, ax = plt.subplots()\n    ax.hist(values, bins='auto', density=True, alpha=0.6, color='b')\n\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    ax.set_title(\"Normal distribution from ValueObjects' values\")\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability Density')\n    \n    return ax\nobj_list = [ValueObject(mu=23, std=77), ValueObject(mu=23, std=77, seed=222), ValueObject(mu=23, std=77, seed=333)]"}
{"task_id": "BigCodeBench/232", "solution": "import pandas as pd\nimport collections\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    \n    # Drop duplicates based on 'Customer' to exclude duplicate customer names\n    unique_customers_df = df.drop_duplicates(subset='Customer')\n    \n    # Calculate total sales\n    total_sales = unique_customers_df['Sales'].sum()\n    \n    # Find the most popular category using collections.Counter\n    category_counts = collections.Counter(unique_customers_df['Category'])\n    most_popular_category = min(category_counts, key=category_counts.get)  # In case of a tie, return the first alphabetically\n    \n    # Return the report as a dictionary\n    return {'Total Sales': total_sales, 'Most Popular Category': most_popular_category}"}
{"task_id": "BigCodeBench/233", "solution": "import random\nimport matplotlib.pyplot as plt\ndef task_func(obj_list, attr, num_bins=30, seed=0):\n    random.seed(seed)  # Set the seed for reproducibility\n    plt.figure(figsize=(10, 6))  # Initialize the plot figure\n\n    # Extract the attribute values from the objects\n    attr_values = [getattr(obj, attr) for obj in obj_list if hasattr(obj, attr)]\n    \n    # Create the histogram\n    ax = plt.hist(attr_values, bins=num_bins, color='blue', edgecolor='black')\n    \n    # Set the title and labels\n    plt.title('Histogram of attribute values')\n    plt.xlabel('Attribute Value')\n    plt.ylabel('Count')\n    \n    # Show the plot\n    plt.tight_layout()  # Adjust layout to make room for the title\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/234", "solution": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    \n    # Drop rows with duplicate names to exclude them from the regression\n    df_no_duplicates = df.drop_duplicates(subset='Name')\n    \n    # Perform linear regression\n    x = df_no_duplicates['Age']\n    y = df_no_duplicates['Score']\n    slope, intercept, _, _, _ = stats.linregress(x, y)\n    \n    # Plot the scatter plot\n    plt.figure(figsize=(10, 6))\n    plt.scatter(df_no_duplicates['Age'], df_no_duplicates['Score'], color='blue', label='Data Points')\n    \n    # Plot the regression line\n    x_line = plt.linspace(min(x), max(x), 100)\n    y_line = slope * x_line + intercept\n    plt.plot(x_line, y_line, color='red', label='Regression Line')\n    \n    # Set plot details\n    plt.title('Linear Regression between Age and Score')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    \n    # Return the plot and axes objects\n    return plt, plt.gca()"}
{"task_id": "BigCodeBench/235", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    np.random.seed(seed)\n    data = np.random.normal(mu, sigma, num_samples)\n    \n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(data, bins=num_bins, density=True, alpha=0.6, color='b')\n    \n    # Overlay PDF\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    ax.plot(x, 1/(sigma*np.sqrt(2*np.pi))*np.exp(-(x-mu)**2/(2*sigma**2)), 'r-', lw=2)\n    \n    # OLS Regression for a second order polynomial\n    hist_counts, bin_edges = np.histogram(data, bins=num_bins, density=True)\n    bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n    model = ols('hist_counts ~ np.power(bin_centers, 2) + bin_centers', {'hist_counts': hist_counts, 'bin_centers': bin_centers}).fit()\n    ax.plot(bin_centers, model.predict(), 'g-', lw=2, label=f'OLS fit: {model.summary()}')\n    \n    ax.legend()\n    ax.set_title('Normal Distribution with Overlayed PDF and OLS Regression')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    \n    return ax"}
{"task_id": "BigCodeBench/236", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\ndef task_func(df, test_size=0.2, random_state=42):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    \n    # Drop duplicate names to ensure each entry is unique\n    df.drop_duplicates(subset='Name', keep='first', inplace=True)\n    \n    # Split the dataset into features (X) and target (y)\n    X = df[['Age', 'Score']]\n    y = df['Category']\n    \n    # Split the dataset into training set and test set\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n    \n    # Initialize the Random Forest Classifier\n    clf = RandomForestClassifier(random_state=random_state)\n    \n    # Train the model\n    clf.fit(X_train, y_train)\n    \n    # Make predictions\n    y_pred = clf.predict(X_test)\n    \n    # Calculate and return the accuracy\n    accuracy = accuracy_score(y_test, y_pred)\n    return accuracy"}
{"task_id": "BigCodeBench/237", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, save_plot=False, plot_path=None):\n    \"\"\"\n    Unzip a list of objects and their 3D coordinates, run PCA to reduce the dimensionality to 2D, \n    and depending on the value of save_plot parameter, either save the plot to the provided path and \n    return the 2D coordinates or return the 2D coordinates and the plot's Axes.\n    \"\"\"\n    # Extract coordinates from data\n    coordinates_3d = np.array([obj[1:] for obj in data])\n    \n    # Perform PCA\n    pca = PCA(n_components=2)\n    coordinates_2d = pca.fit_transform(coordinates_3d)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.scatter(coordinates_2d[:, 0], coordinates_2d[:, 1])\n    for i, txt in enumerate(data):\n        ax.annotate(txt[0], (coordinates_2d[i, 0], coordinates_2d[i, 1]))\n    \n    if save_plot:\n        if plot_path is None:\n            raise ValueError(\"plot_path is required when save_plot is True.\")\n        plt.savefig(plot_path)\n        return coordinates_2d\n    else:\n        plt.show()\n        return coordinates_2d, ax"}
{"task_id": "BigCodeBench/238", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Standardize 'Age' and 'Score' columns\n    scaler = StandardScaler()\n    df[['Age', 'Score']] = scaler.fit_transform(df[['Age', 'Score']])\n    \n    # Remove duplicate entries based on 'Name'\n    df.drop_duplicates(subset='Name', keep='first', inplace=True)\n    \n    # Create scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(df['Age'], df['Score'])\n    ax.set_title('Scatter Plot of Standardized Age and Score')\n    ax.set_xlabel('Age (standardized)')\n    ax.set_ylabel('Score (standardized)')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n    \"\"\"\n    Given a list of tuples, extract numeric values, compute basic statistics, and \n    generate a histogram with an overlaid probability density function (PDF).\n    \"\"\"\n    # Extract numeric values\n    arr = np.array([x[1] for x in original])\n    \n    # Compute basic statistics\n    stats_data = {\n        'mean': np.mean(arr),\n        'std': np.std(arr),\n        'min': np.min(arr),\n        'max': np.max(arr)\n    }\n    \n    # Generate histogram and overlay PDF\n    fig, ax = plt.subplots()\n    ax.hist(arr, density=True, alpha=0.6, bins='auto')\n    \n    # Calculate and plot the PDF\n    x = np.linspace(min(arr), max(arr), 100)\n    pdf = stats.norm.pdf(x, stats_data['mean'], stats_data['std'])\n    ax.plot(x, pdf, 'r-', lw=2, label='PDF')\n    ax.legend()\n    \n    plt.xlabel('Numeric Values')\n    plt.ylabel('Probability Density')\n    plt.title('Histogram with Overlayed PDF')\n    \n    return arr, stats_data, ax\noriginal = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}
{"task_id": "BigCodeBench/240", "solution": "import pandas as pd\nimport random\ndef task_func(n_data_points=1000, min_value=0.0, max_value=10.0, column_name='Value'):\n    \"\"\"\n    Generate a random dataset of floating-point numbers, truncate each value to 3 decimal places, then return the generated DataFrame with\n    the specified column name.\n    \n    Parameters:\n    n_data_points (int, optional): The number of data points to generate. Default is 1000.\n    min_value (float, optional): The minimum value for the generated data. Default is 0.0.\n    max_value (float, optional): The maximum value for the generated data. Default is 10.0.\n    column_name (str, optional): The column name in generated DataFrame. Default is 'Value'.\n    \n    Returns:\n    DataFrame: A pandas DataFrame with the generated data.\n    \"\"\"\n    # Generate random data\n    data = [round(uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    \n    # Create DataFrame\n    df = pd.DataFrame(data, columns=[column_name])\n    \n    return df"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(original):\n    \"\"\"\n    Create a numeric array from the \"original\" list, normalize the array, and draw the original and normalized arrays.\n    \n    Parameters:\n    original (list): The original list with tuples to be unzipped into a numpy array.\n\n    Returns:\n    np.array: A numpy array for the original data.\n    np.array: Normalized array.\n    matplotlib.axes.Axes: Axes object with the plotted data.\n    \"\"\"\n    # Unzip the list to get numeric values\n    values = np.array([x[1] for x in original])\n    \n    # Normalize the array\n    scaler = MinMaxScaler()\n    norm_arr = scaler.fit_transform(values.reshape(-1, 1))\n    \n    # Plotting the original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(values, label='Original', marker='o')\n    ax.plot(norm_arr, label='Normalized', marker='s')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n    ax.legend()\n    plt.grid(True)\n    \n    return values, norm_arr, ax\noriginal = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}
{"task_id": "BigCodeBench/242", "solution": "import cv2\nimport matplotlib.pyplot as plt\nimport os\nimport numpy as np\ndef task_func(image_path, kernel_size):\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"The file {image_path} does not exist.\")\n    if kernel_size <= 0 or not isinstance(kernel_size, int):\n        raise ValueError(\"Kernel size must be a positive integer.\")\n\n    # Read the image\n    image = cv2.imread(image_path)\n    if image is None:\n        raise ValueError(\"Failed to load the image.\")\n\n    # Apply Gaussian blur\n    blurred_image = cv2.GaussianBlur(image, (kernel_size, kernel_size), 0)\n\n    # Create a figure for visualization\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Display original image\n    axs[0].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    axs[0].set_title('Original')\n    axs[0].axis('off')\n\n    # Display blurred image\n    axs[1].imshow(cv2.cvtColor(blurred_image, cv2.COLOR_BGR2RGB))\n    axs[1].set_title('Blurred')\n    axs[1].axis('off')\n\n    # Return the blurred image and the axes objects\n    plt.tight_layout()\n    return blurred_image, axs[0], axs[1]"}
{"task_id": "BigCodeBench/243", "solution": "import pandas as pd\nimport random\nN_DATA_POINTS = 10000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=N_DATA_POINTS):\n    '''\n    Generate a random set of floating-point numbers, truncate each value to 3 decimal places, and return them in a DataFrame.\n    '''\n    if n_data_points == 0:\n        return pd.DataFrame()  # Return an empty DataFrame if n_data_points is 0\n    \n    # Generate random values\n    data_values = [round(random.uniform(MIN_VALUE, MAX_VALUE), 3) for _ in range(n_data_points)]\n    \n    # Create DataFrame\n    data_df = pd.DataFrame(data_values, columns=['Value'])\n    \n    return data_df"}
{"task_id": "BigCodeBench/244", "solution": "import numpy as np\nfrom scipy.fft import fft\nfrom matplotlib import pyplot as plt\ndef task_func(original):\n    # Handle empty list case\n    if not original:\n        return np.array([]), np.array([]), None\n    \n    # Unzip the list into a numpy array\n    arr = np.array([x[1] for x in original])\n    \n    # Calculate Fast Fourier Transform\n    fft_data = fft(arr)\n    \n    # Create a figure and axes for plotting\n    fig, ax = plt.subplots()\n    \n    # Plot the histogram of the magnitude of FFT data\n    ax.hist(np.abs(fft_data), bins='auto')  # arguments are passed to np.histogram\n    ax.set_title(\"Histogram of Magnitude of FFT Data\")\n    ax.set_xlabel(\"Magnitude\")\n    ax.set_ylabel(\"Frequency\")\n    \n    # Return the arrays and the axes object\n    return arr, fft_data, ax\noriginal = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}
{"task_id": "BigCodeBench/245", "solution": "import pandas as pd\nimport random\nfrom scipy import stats\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n    \"\"\"\n    Generate a random dataset, truncate to 3 decimal places, and calculate statistical measures.\n    \n    Parameters:\n    n_data_points (int): Number of data points. Default is 5000.\n    min_value (float): Minimum value range. Default is 0.0.\n    max_value (float): Maximum value range. Default is 10.0.\n    \n    Returns:\n    dict: Dictionary with statistical measures.\n    \"\"\"\n    # Generate random data\n    data = [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    \n    # Convert to DataFrame for using pandas features\n    df = pd.DataFrame(data, columns=['Values'])\n    \n    # Calculate statistical measures\n    mean = df['Values'].mean()\n    median = df['Values'].median()\n    \n    # scipy's mode function returns an object with the mode and count, we only need the mode\n    mode = stats.mode(df['Values']).mode[0]\n    \n    # Return as dictionary\n    return {'mean': mean, 'median': median, 'mode': mode}"}
{"task_id": "BigCodeBench/246", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\nANGLES = np.arange(0, 2*np.pi, 0.01)\ndef task_func(n_waves, seed=0):\n    if n_waves < 1:\n        return [], np.array([]), None\n    \n    np.random.seed(seed)\n    sine_waves = [np.sin(ANGLES * (i + 1)) for i in range(n_waves)]\n    \n    # Mixing the signals by simply summing them up\n    mixed_signal = np.sum(sine_waves, axis=0)\n    \n    # Fast Fourier Transform\n    fft_data = np.abs(fft(mixed_signal))\n    \n    # Plotting the histogram of the magnitude of the FFT data\n    fig, ax = plt.subplots()\n    ax.hist(fft_data, bins=50, edgecolor='black')\n    ax.set_title('Histogram of FFT Magnitude')\n    ax.set_xlabel('Magnitude')\n    ax.set_ylabel('Frequency')\n    \n    return sine_waves, fft_data, ax"}
{"task_id": "BigCodeBench/247", "solution": "import pandas as pd\nimport random\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n    if max_value < min_value:\n        raise ValueError(\"max_value must be greater than or equal to min_value.\")\n    \n    # Generate random data\n    raw_data = [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    \n    # Create a DataFrame\n    data_df = pd.DataFrame(raw_data, columns=['Raw Value'])\n    \n    # Normalize the data\n    scaler = StandardScaler()\n    normalized_data = scaler.fit_transform(data_df)\n    \n    # Convert to DataFrame and set column name\n    normalized_df = pd.DataFrame(normalized_data, columns=['Normalized Value'])\n    \n    return normalized_df"}
{"task_id": "BigCodeBench/248", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(data_list):\n    if not data_list:\n        raise ValueError(\"data_list cannot be empty.\")\n    \n    # Unzip the data_list into characters and two numerical value lists\n    characters, *numerical_values = zip(*data_list)\n    numerical_values = list(itertools.chain.from_iterable(numerical_values))\n    \n    # Reshape the numerical values into a 2D array for plotting\n    numerical_values = np.reshape(numerical_values, (-1, 2))\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    for i in range(numerical_values.shape[1]):\n        ax.plot(numerical_values[:, i], label=f'Variable {i+1}')\n    \n    ax.set_title('Unzipped Numerical Values Plot')\n    ax.set_xlabel('Data Index')\n    ax.set_ylabel('Numerical Values')\n    ax.legend()\n    plt.grid(True)\n    \n    return ax"}
{"task_id": "BigCodeBench/249", "solution": "import pandas as pd\nimport random\nfrom sklearn.model_selection import train_test_split\ndef task_func(n_data_points=10000, min_value=0.0, max_value=10.0, test_size=0.2):\n    # Generate random floating-point numbers\n    data = { 'Value': [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)] }\n    \n    # Create a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Split the dataset into train and test sets\n    train_data, test_data = train_test_split(df, test_size=test_size, random_state=0)\n    \n    return train_data, test_data"}
{"task_id": "BigCodeBench/250", "solution": "import numpy as np\nimport itertools\nimport json\ndef task_func(data_list, json_file_name=\"mean_values.json\"):\n    \"\"\"\n    Calculate the mean of the numeric values for each position in the provided data list \n    and return the results. Optionally, the results can be exported to a specified JSON file.\n    \"\"\"\n    # Extract numeric values from tuples\n    numeric_values = list(itertools.chain.from_iterable(zip(*[tuple(i)[1:] for i in data_list])))\n\n    # Calculate mean for each position\n    means = {f'Position {i+1}': np.mean(numeric_values[i::len(data_list[0])]) for i in range(len(data_list[0])-1)}\n\n    # Export to JSON file if filename provided\n    if json_file_name:\n        with open(json_file_name, 'w') as json_file:\n            json.dump(means, json_file, indent=4)\n\n    return means"}
{"task_id": "BigCodeBench/251", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n    \n    # Extracting job categories for the pie chart\n    job_counts = data['Job'].value_counts()\n    \n    # Creating a pie chart\n    fig, ax = plt.subplots()\n    ax.pie(job_counts, labels=job_counts.index, autopct='%1.1f%%')\n    ax.set_title('Job Distribution')\n    \n    return fig"}
{"task_id": "BigCodeBench/252", "solution": "import matplotlib.pyplot as plt\nfrom itertools import cycle\nCOLORS = ['red', 'green', 'blue', 'yellow', 'purple']\ndef task_func(data, labels):\n    \"\"\"\n    Plot a list of data with different colors. If there are more data series than the predefined colors, \n    the function cycles through the colors. In case of even more series than colors + labels, 'black' is used.\n    \n    Parameters:\n    data (list): A list of lists, each representing a series of data.\n    labels (list): A list of labels for the data series.\n    \n    Returns:\n    matplotlib.axes.Axes: The Axes object of the plot.\n    \"\"\"\n    # Create a color cycle that repeats if there are more data series than colors\n    color_cycle = cycle(COLORS)\n    \n    # Ensure labels and data are zipped together, filling missing labels with ''\n    for data_series, label in zip_longest(data, labels, fillvalue=''):\n        plt.plot(data_series, next(color_cycle), label=label)\n    \n    # If there are more data series than colors + labels, use 'black' for the rest\n    if len(data) > len(labels) + len(COLORS):\n        for data_series in data[len(labels) + len(COLORS):]:\n            plt.plot(data_series, 'black')\n    \n    plt.legend()\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    plt.title('Multi-colored Data Series Plot')\n    \n    return plt.gca()"}
{"task_id": "BigCodeBench/253", "solution": "import numpy as np\nimport random\nimport matplotlib.pyplot as plt\nCOLORS = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\ndef task_func(ax):\n    \"\"\"\n    Generate a random sine wave function and draw it on a provided matplotlib polar subplot 'ax'. \n    The function randomly selects a color from a predefined list and sets a random position for radial labels.\n\n    Parameters:\n    ax (matplotlib.axes._axes.Axes): The ax to plot on.\n\n    Returns:\n    str: The color code (as a string) of the plotted function.\n    \"\"\"\n    # Random parameters\n    color = random.choice(COLORS)\n    theta = np.linspace(0, 2*np.pi, 100)\n    radius = np.sin(theta) + np.random.rand()  # Add a random offset to sine wave\n\n    # Plot\n    ax.plot(theta, radius, color=color, linewidth=2)\n    \n    # Random radial labels (for demonstration, not explicitly asked in the function description)\n    # This part is commented out as it might not align with the exact intention of the task.\n    # rad_pos = np.random.choice(np.linspace(0, 2*np.pi, 10), 5, replace=False)\n    # ax.set_rticks(rad_pos)\n    # ax.set_rticklabels([str(i) for i in rad_pos])\n\n    plt.draw()  # To ensure the plot is updated before returning color\n    return color"}
{"task_id": "BigCodeBench/254", "solution": "import json\nimport math\ndef task_func(decimal_value, precision=2):\n    \"\"\"\n    Calculate the square root of the given decimal value to a certain precision and then encode the result as a JSON string.\n    \n    Parameters:\n    decimal_value (float or Decimal): The decimal value for which to find the square root.\n    precision (int, Optional): The number of decimal places to round the square root to. Defaults to 2.\n    \n    Returns:\n    str: The square root of the decimal value encoded as a JSON string.\n    \n    Example:\n    >>> from decimal import Decimal\n    >>> decimal_value = Decimal('3.9')\n    >>> json_str = task_func(decimal_value, 2)\n    >>> print(json_str)\n    \"1.97\"\n    \"\"\"\n    # Calculate the square root\n    square_root = math.sqrt(float(decimal_value))\n    \n    # Round to the specified precision\n    rounded_root = round(square_root, precision)\n    \n    # Encode as a JSON string\n    json_str = json.dumps(rounded_root)\n    \n    return json_str"}
{"task_id": "BigCodeBench/255", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nFUNCTIONS = [np.sin, np.cos, np.tan]\ndef task_func(ax, func_index):\n    if not isinstance(ax, plt.Axes):\n        raise ValueError(\"Input must be an Axes object.\")\n    \n    # Define the range and resolution for theta\n    theta = np.linspace(0, 2*np.pi, 1000)\n    \n    # Calculate the function values\n    r = FUNCTIONS[func_index](theta)\n    \n    # Ensure the radial ticks align with the function index\n    ax.set_rticks([func_index * 45])  # Only one radial tick per function\n    \n    # Plot the function\n    line = ax.plot(theta, r, label=f'{FUNCTIONS[func_index].__name__}')\n    \n    # Return the ax for chaining, if needed\n    return ax"}
{"task_id": "BigCodeBench/256", "solution": "import json\nimport random\nimport hashlib\nfrom datetime import datetime\ndef task_func(utc_datetime, salt='salt', password_length=10, seed=0):\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    if not isinstance(salt, str):\n        raise ValueError(\"salt must be a string\")\n\n    # Seed the random number generator for reproducibility\n    random.seed(seed)\n    \n    # Generate a random lowercase alphanumeric password\n    alphabet = 'abcdefghijklmnopqrstuvwxyz0123456789'\n    password = ''.join(random.choices(alphabet, k=password_length))\n    \n    # Create the string to be hashed (includes datetime in string format)\n    hash_string = f\"{password}{salt}{utc_datetime.isoformat()}\"\n    \n    # Hash the password using SHA-256\n    hashed_password = hashlib.sha256(hash_string.encode()).hexdigest()\n    \n    # Encode as a JSON string\n    password_json_str = json.dumps({\"timestamp\": utc_datetime.isoformat(), \n                                    \"hashed_password\": hashed_password})\n    \n    return password_json_str\nutc_time = datetime(2023, 6, 15, 12, 0, 0)"}
{"task_id": "BigCodeBench/257", "solution": "import numpy as np\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(ax, num_turns):\n    \"\"\"\n    Draws a spiral on the polar diagram 'ax' with the specified number of turns 'num_turns'.\n    The spiral starts at the center and expands outward with each turn.\n    The radial ticks on the plot are positioned at intervals corresponding to the number of turns multiplied by 45 degrees.\n\n    Parameters:\n    ax (matplotlib.axes._axes.Axes): The Axes object for plotting the spiral.\n    num_turns (int): The number of turns for the spiral.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The modified Axes object with the spiral plot.\n    \"\"\"\n    # Generate data for the spiral\n    theta = np.linspace(0, 2*np.pi*num_turns, 500)\n    r = theta / (2*np.pi) * 45  # Each turn is 45 degrees apart\n\n    # Plot the spiral\n    ax.plot(theta, r, color='blue')\n\n    # Set radial ticks at intervals of 45 degrees times the number of turns\n    ax.set_rticks([num_turns * 45 * i for i in range(1, int(360 / (45 * num_turns)) + 1)])\n    \n    # Ensure the plot updates with the new ticks\n    ax.figure.canvas.draw()\n\n    return ax"}
{"task_id": "BigCodeBench/258", "solution": "import json\nimport random\nfrom datetime import datetime\nDATA = [\n    {'name': 'John', 'age': 30, 'city': 'New York'},\n    {'name': 'Peter', 'age': 35, 'city': 'London'},\n    {'name': 'Susan', 'age': 25, 'city': 'Sydney'},\n    {'name': 'Alice', 'age': 28, 'city': 'Paris'},\n    {'name': 'Bob', 'age': 40, 'city': 'Tokyo'},\n    {'name': 'Charlie', 'age': 22, 'city': 'Beijing'},\n    {'name': 'David', 'age': 33, 'city': 'Mumbai'},\n    {'name': 'Eve', 'age': 27, 'city': 'Berlin'},\n    {'name': 'Frank', 'age': 32, 'city': 'Moscow'},\n    {'name': 'Grace', 'age': 29, 'city': 'Rome'}\n]\ndef task_func(utc_datetime, seed=0):\n    random.seed(seed)  # Set the seed for reproducibility\n    selected_person = random.choice(DATA)  # Select a random person\n    selected_person['timestamp'] = utc_datetime.isoformat()  # Add UTC timestamp\n    return json.dumps(selected_person)  # Convert to JSON string"}
{"task_id": "BigCodeBench/259", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(ax, num_points):\n    if not isinstance(ax, plt.Axes):\n        raise ValueError(\"Input 'ax' must be a matplotlib Axes object.\")\n    if num_points < 0:\n        raise ValueError(\"Number of points 'num_points' cannot be negative.\")\n    \n    # Ensure reproducibility of the example\n    np.random.seed(0)\n    \n    # Generate random points\n    theta = np.random.rand(num_points) * 360  # Angular coordinates\n    r = np.random.rand(num_points) * 10       # Radial coordinates\n    \n    # Plot the points\n    ax.scatter(theta, r, c='r', alpha=0.5)\n    \n    # Set radial ticks based on num_points divided by 10 degrees\n    # First, find how many ticks we want, assuming one tick per 10 degrees\n    num_ticks = int(360 / 10)\n    ax.set_rticks(np.linspace(0, 10, num_ticks+1))  # +1 to include 0\n    \n    return ax"}
{"task_id": "BigCodeBench/260", "solution": "import json\nimport os\nimport glob\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n    \"\"\"\n    updated_files_count = 0\n    # Find all .json files in the directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    \n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n            \n        # Add the key-value pair if it doesn't exist\n        if KEY not in data:\n            data[KEY] = VALUE\n            updated_files_count += 1\n            \n        with open(json_file, 'w') as file:\n            json.dump(data, file, indent=4)\n    \n    return updated_files_count"}
{"task_id": "BigCodeBench/261", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(ax, radius):\n    if radius < 0:\n        raise ValueError(\"Radius must be non-negative.\")\n    if not isinstance(ax, plt.Axes) or not ax.projection == 'polar':\n        raise TypeError(\"The 'ax' must be a polar plot.\")\n    \n    theta = np.linspace(0, 2*np.pi, 100)\n    ax.plot(theta, radius * np.ones_like(theta), 'r-')  # Draw a circle\n    ax.set_rticks(np.arange(0, radius+1, 1.0))  # Set radial ticks\n    \n    return ax"}
{"task_id": "BigCodeBench/262", "solution": "import collections\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(dictionary, new_key, new_value):\n    \"\"\"\n    Add a new key-value pair to the dictionary and plot the distribution of its values.\n\n    Parameters:\n    dictionary (dict): The dictionary to be updated.\n    new_key (str): The new key to be added to the dictionary.\n    new_value (str): The corresponding value for the new key.\n\n    Returns:\n    dict: The updated dictionary.\n    matplotlib.axes.Axes: The axes object of the plotted bar graph.\n    \"\"\"\n    # Update the dictionary with the new key-value pair\n    dictionary[new_key] = new_value\n    \n    # Since the dictionary values are strings and not suitable for a distribution plot,\n    # we'll convert the dictionary into a suitable format for demonstration purposes.\n    # Let's assume we want to count the frequency of each value.\n    value_counts = collections.Counter(dictionary.values())\n    \n    # Convert the Counter object to a DataFrame for plotting\n    df = pd.DataFrame.from_dict(value_counts, orient='index', columns=['Frequency'])\n    \n    # Plotting the distribution using seaborn\n    plot_axes = sns.barplot(y=df.index, x=df['Frequency'])\n    plt.title('Distribution of Dictionary Values')\n    plt.ylabel('Values')\n    plt.xlabel('Frequency')\n    plt.show()\n    \n    return dictionary, plot_axes"}
{"task_id": "BigCodeBench/263", "solution": "import os\nimport glob\nimport shutil\nimport time\nFILE_EXTENSIONS = ['.txt', '.csv', '.xlsx', '.docx', '.pdf']\ndef task_func(my_path: str, days_old: int) -> str:\n    \"\"\"\n    The function to archive old files.\n    \"\"\"\n    # Ensure the path ends with a slash for correct glob usage\n    if not my_path.endswith(os.sep):\n        my_path += os.sep\n    \n    # Create an 'archive' directory if it doesn't exist\n    archive_path = os.path.join(my_path, 'archive')\n    if not os.path.exists(archive_path):\n        os.mkdir(archive_path)\n    \n    # Calculate the timestamp for files that are 'days_old' days old\n    threshold_time = time.time() - (days_old * 24 * 60 * 60)\n    \n    # Find all files that match the extensions and are older than 'days_old' days\n    for extension in FILE_EXTENSIONS:\n        for file_path in glob.glob(my_path + '*' + extension):\n            if os.path.getmtime(file_path) < threshold_time:\n                # Move the file to the archive directory\n                shutil.move(file_path, os.path.join(archive_path, os.path.basename(file_path)))\n    \n    return archive_path"}
{"task_id": "BigCodeBench/264", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(dictionary, key, value, n=100, bins=30, seed=0):\n    # Check if the value can be converted to a float for generating a normal distribution\n    try:\n        value = float(value)\n    except ValueError:\n        raise ValueError(\"The provided value must be a number.\")\n    \n    # Update the dictionary\n    dictionary[key] = value\n    \n    # Set the seed for reproducibility\n    np.random.seed(seed)\n    \n    # Generate a random dataset with a normal distribution\n    data = np.random.normal(value, value, n)\n    \n    # Convert the data to a pandas Series\n    data_series = pd.Series(data)\n    \n    # Create a histogram plot\n    fig, ax = plt.subplots()\n    ax.hist(data_series, bins=bins, alpha=0.7, color='blue', edgecolor='black')\n    ax.set_title(f'Histogram of Random Dataset with Mean {value}')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    # Show the plot (optional, can be commented out if not needed in the output)\n    plt.show()\n    \n    return dictionary, data_series, ax"}
{"task_id": "BigCodeBench/265", "solution": "import collections\nimport json\nimport os\ndef task_func(data, json_file_name='data.json'):\n    \"\"\"\n    Add a new key \"a\" with the value 1 to the input dictionary, calculate the frequency of its values, and save the updated dictionary along with its frequency distribution to a JSON file. The dictionary is saved under the key 'data' and the frequency distribution under the key 'freq'.\n\n    Parameters:\n    data (dict): The input data as a dictionary.\n    json_file_name (str): The name of the JSON file to be saved.\n\n    Returns:\n    str: The path of the JSON file.\n    \"\"\"\n    # Add a new key \"a\" with the value 1 to the dictionary\n    data['a'] = 1\n    \n    # Calculate the frequency of its values\n    freq_dist = collections.Counter(data.values())\n    \n    # Combine the original data and frequency distribution into a single dictionary\n    combined_data = {\n        'data': data,\n        'freq': dict(freq_dist)\n    }\n    \n    # Save the combined dictionary to a JSON file\n    with open(json_file_name, 'w') as json_file:\n        json.dump(combined_data, json_file)\n    \n    return json_file_name"}
{"task_id": "BigCodeBench/266", "solution": "import os\nimport os.path\nimport csv\nimport collections\nFILE_NAME = 'file_sizes.csv'\ndef task_func(my_path):\n    \"\"\"\n    Create a report on the file size in a directory and write it to a CSV file.\n\n    Parameters:\n    my_path (str): The directory path.\n\n    Returns:\n    str: The path of the CSV file.\n    \"\"\"\n    # Initialize a dictionary to hold file sizes\n    file_sizes = collections.defaultdict(int)\n    \n    # Walk through the directory tree\n    for dirpath, dirnames, filenames in os.walk(my_path):\n        for filename in filenames:\n            filepath = os.path.join(dirpath, filename)\n            file_sizes[filepath] = os.path.getsize(filepath)\n    \n    # Write the data to a CSV file\n    csv_path = os.path.join(my_path, FILE_NAME)\n    with open(csv_path, 'w', newline='') as csvfile:\n        fieldnames = ['File', 'Size']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        \n        writer.writeheader()\n        for file, size in file_sizes.items():\n            writer.writerow({'File': file, 'Size': size})\n    \n    return csv_path"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n    \"\"\"\n    Given a dictionary \"data\", this function performs specified operations.\n    \"\"\"\n    # Step 1: Add a new key \"a\" with the value 1 to the dictionary.\n    data['a'] = 1\n    \n    # Step 2: Generate a signal based on the values in \"data\".\n    # For simplicity, let's assume we create a simple signal where each value represents an amplitude at a given time point.\n    signal = np.array(list(data.values()))\n    time = np.arange(0, len(signal)) / sample_rate  # Assuming each value corresponds to a sample\n    \n    # Step 3: Run Fast Fourier Transform (FFT) on the signal.\n    fft_result = fftpack.fft(signal)\n    freqs = fftpack.fftfreq(signal.size, d=1/sample_rate)\n    \n    # Step 4: Plot and return the FFT of the signal.\n    plt.figure(figsize=(10, 4))\n    ax = plt.axes()\n    ax.plot(freqs, np.abs(fft_result))\n    ax.set_xlabel('Frequency [Hz]')\n    ax.set_ylabel('Amplitude')\n    plt.title('FFT of the Signal')\n    \n    # Show the plot (optional, if you want to display it immediately)\n    # plt.show()\n    \n    return fft_result, ax\ndata = {'key1': 1, 'key2': 2, 'key3': 3}"}
{"task_id": "BigCodeBench/268", "solution": "import collections\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndef task_func(n_keys, n_values):\n    \"\"\"\n    Create a Python dictionary with a specified number of keys and values. \n\n    Parameters:\n    n_keys (int): The number of keys to generate.\n    n_values (int): The number of values for each key (consecutive integers starting from 1).\n\n    Returns:\n    dict: A Python dictionary with keys as strings and values as lists of integers.\n    \"\"\"\n    # Randomly select keys without replacement\n    keys = random.sample(LETTERS, n_keys)\n    \n    # Create the dictionary with the specified keys and consecutive integer values\n    dictionary = {key: list(range(1, n_values + 1)) for key in keys}\n    \n    return dictionary"}
{"task_id": "BigCodeBench/269", "solution": "import numpy as np\nfrom scipy import stats\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    # Step 1: Adds a key \"a\" with a value of 1\n    data_dict[\"a\"] = 1\n    \n    # Extracting values for statistical analysis\n    values = list(data_dict.values())\n    \n    # Step 2: Statistical analysis\n    mean = round(np.mean(values), 2)\n    median = np.median(values)\n    mode = stats.mode(values).mode[0]  # scipy mode can return an array even for single mode\n    \n    # Prepare stats dictionary\n    stats_dict = {'mean': mean, 'median': median, 'mode': mode}\n    \n    # Step 3: Normalization\n    scaler = MinMaxScaler()\n    normalized_values = scaler.fit_transform(np.array(list(data_dict.values())).reshape(-1, 1))\n    \n    # Step 4: Plotting\n    plt.figure(figsize=(10, 6))\n    plt.hist(normalized_values, bins='auto', edgecolor='black')\n    plt.title('Histogram of Normalized Values')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plot = plt.gca()  # Get the current axes\n    \n    return data_dict, stats_dict, plot"}
{"task_id": "BigCodeBench/270", "solution": "import re\nfrom collections import Counter\ndef task_func(sentence):\n    \"\"\"\n    Count the occurrence of each word in a sentence and return the result as a dictionary.\n    This function uses a regular expression to find words and a Counter to count their occurrences.\n\n    Parameters:\n    sentence (str): The sentence to count the words in.\n\n    Returns:\n    dict: A dictionary where the keys are the words and the values are their counts.\n    \"\"\"\n    # Using regex to find all words in the sentence\n    words = re.findall(r'\\b\\w+\\b', sentence.lower())\n    \n    # Using Counter to count the occurrence of each word\n    word_count = Counter(words)\n    \n    return dict(word_count)"}
{"task_id": "BigCodeBench/271", "solution": "import random\nimport string\nimport hashlib\nimport time\ndef task_func(data_dict: dict, seed=0) -> dict:\n    random.seed(seed)  # Set the seed for reproducibility\n    salt = ''.join(random.choices(string.ascii_lowercase, k=5))  # Generate a 5 char salt\n    processed_dict = {\"a\": 1, 'timestamp': int(time.time())}  # Initialize with required keys\n\n    # Process each key-value pair\n    for key, value in data_dict.items():\n        concatenated = value + salt\n        hashed = hashlib.sha256(concatenated.encode()).hexdigest()  # Hash the concatenated string\n        processed_dict[key] = hashed  # Update the value with the hashed string\n\n    processed_dict.update(data_dict)  # Ensure original keys are not lost\n    return processed_dict"}
{"task_id": "BigCodeBench/272", "solution": "import cgi\nimport http.server\nimport json\nclass CustomHTTPRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        # Check Content-Type header\n        content_type = self.headers.get('Content-Type')\n        if content_type != 'application/json':\n            self.send_response(400)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({\"status\": \"error\", \"message\": \"Content-Type header is not application/json\"}).encode())\n            return\n\n        # Parse POST data\n        content_length = int(self.headers.get('Content-Length', 0))\n        post_data = self.rfile.read(content_length)\n        \n        try:\n            data = json.loads(post_data)\n            if 'data' not in data:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps({\"status\": \"error\", \"message\": \"No data received\"}).encode())\n                return\n        except json.JSONDecodeError:\n            self.send_response(400)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({\"status\": \"error\", \"message\": \"Invalid JSON\"}).encode())\n            return\n\n        # If everything is fine\n        self.send_response(200)\n        self.send_header('Content-Type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json.dumps({\"status\": \"success\", \"message\": \"Data received successfully.\"}).encode())\ndef task_func():\n    \"\"\"\n    Returns a custom HTTP request handler class.\n    \"\"\"\n    return CustomHTTPRequestHandler"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = json.dumps({\n    'status': 'success',\n    'message': 'Data received successfully.'\n}).encode('utf-8')\nERROR_RESPONSE_CONTENT_TYPE = \"Content-Type: application/json; charset=utf-8\"\nERROR_RESPONSE_400_HEADER = \"HTTP/1.1 400 Bad Request\\r\\n\" + ERROR_RESPONSE_CONTENT_TYPE + \"\\r\\n\\r\\n\"\nclass CustomHTTPRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        \n        # Check if Content-Type is application/json\n        if self.headers['Content-Type'] != 'application/json':\n            self.wfile.write(ERROR_RESPONSE_400_HEADER.encode())\n            self.wfile.write(json.dumps({'status': 'error', 'message': 'Content-Type header is not application/json'}).encode())\n            return\n        \n        try:\n            # Attempt to parse JSON data\n            data = json.loads(post_data)\n            if 'data' not in data:\n                self.wfile.write(ERROR_RESPONSE_400_HEADER.encode())\n                self.wfile.write(json.dumps({'status': 'error', 'message': 'No data key in request'}).encode())\n                return\n        except json.JSONDecodeError:\n            # If JSON is invalid\n            self.wfile.write(ERROR_RESPONSE_400_HEADER.encode())\n            self.wfile.write(json.dumps({'status': 'error', 'message': 'Invalid JSON'}).encode())\n            return\n        \n        # If everything is fine\n        self.wfile.write(\"HTTP/1.1 200 OK\\r\\n\".encode())\n        self.wfile.write(ERROR_RESPONSE_CONTENT_TYPE.encode())\n        self.wfile.write(\"\\r\\n\".encode())\n        self.wfile.write(SUCCESS_RESPONSE)\ndef task_func():\n    return CustomHTTPRequestHandler"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\nfrom http import HTTPStatus\nclass EmailRequestHandler(http.server.BaseHTTPRequestHandler):\n    def __init__(self, *args, smtp_server, smtp_port, smtp_username, smtp_password, **kwargs):\n        self.smtp_server = smtp_server\n        self.smtp_port = smtp_port\n        self.smtp_username = smtp_username\n        self.smtp_password = smtp_password\n        super().__init__(*args, **kwargs)\n\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        try:\n            email_data = json.loads(post_data.decode('utf-8'))\n            subject = email_data.get('subject')\n            message = email_data.get('message')\n            to = email_data.get('to')\n            if not all([subject, message, to]):\n                self.send_response(HTTPStatus.BAD_REQUEST)\n                self.end_headers()\n                return\n            msg = MIMEText(message)\n            msg['Subject'] = subject\n            msg['From'] = self.smtp_username\n            msg['To'] = to\n\n            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:\n                server.starttls()\n                server.login(self.smtp_username, self.smtp_password)\n                server.send_message(msg)\n                self.send_response(HTTPStatus.OK)\n                self.send_header('Content-type', 'text/plain')\n                self.end_headers()\n                self.wfile.write(b'Email sent successfully')\n        except json.JSONDecodeError:\n            self.send_response(HTTPStatus.BAD_REQUEST)\n            self.end_headers()\n            self.wfile.write(b'Invalid JSON data')\n        except smtplib.SMTPAuthenticationError:\n            self.send_response(HTTPStatus.UNAUTHORIZED)\n            self.end_headers()\n            self.wfile.write(b'Authentication Failed')\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    \"\"\"\n    The function that creates an HTTP POST request handler for sending emails.\n    \"\"\"\n    class CustomHandler(EmailRequestHandler):\n        pass\n\n    CustomHandler.smtp_server = smtp_server\n    CustomHandler.smtp_port = smtp_port\n    CustomHandler.smtp_username = smtp_username\n    CustomHandler.smtp_password = smtp_password\n    return CustomHandler"}
{"task_id": "BigCodeBench/275", "solution": "import numpy as np\nfrom itertools import combinations\ndef task_func(n):\n    if n < 1:\n        raise ValueError(\"Input must be greater than or equal to 1.\")\n        \n    # Generate all possible pairs using itertools.combinations\n    pairs = list(combinations(range(1, n+1), 2))\n    \n    return pairs"}
{"task_id": "BigCodeBench/276", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    # Convert the list of lists into a numpy array\n    matrix = np.array(matrix)\n    \n    # Calculate the maximum value of each row\n    max_values = np.max(matrix, axis=1)\n    \n    # Calculate skewness and kurtosis\n    skewness = stats.skew(max_values)\n    kurtosis = stats.kurtosis(max_values)\n    \n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(max_values, bins='auto', alpha=0.7, rwidth=0.85)\n    ax.grid(axis='y', alpha=0.75)\n    \n    # Title and labels\n    ax.set_title('Histogram of Maximum Values per Row')\n    ax.set_xlabel('Maximum Value')\n    ax.set_ylabel('Frequency')\n    \n    # Show plot with grid\n    plt.show()\n    \n    return skewness, kurtosis, ax"}
{"task_id": "BigCodeBench/277", "solution": "import random\nfrom itertools import combinations\nimport math\ndef distance(point1, point2):\n    \"\"\"\n    Calculate the Euclidean distance between two points in 2D space.\n    \"\"\"\n    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)\ndef task_func(n):\n    \"\"\"\n    Generate n random dots within a unit square and find the closest pair.\n    \"\"\"\n    if n < 2:\n        return None\n\n    # Generate n random points within the unit square\n    points = [(random.random(), random.random()) for _ in range(n)]\n    \n    # Find the closest pair\n    closest_pair = None\n    min_distance = float('inf')\n    \n    for pair in combinations(points, 2):\n        dist = distance(pair[0], pair[1])\n        if dist < min_distance:\n            min_distance = dist\n            closest_pair = pair\n            \n    return closest_pair"}
{"task_id": "BigCodeBench/278", "solution": "import numpy as np\nfrom sympy import symbols, solve\ndef task_func(precision=2, seed=0):\n    np.random.seed(seed)  # Set the seed for reproducibility\n    a = np.random.uniform(-10, 10)  # Random coefficient a\n    b = np.random.uniform(-10, 10)  # Random coefficient b\n    c = np.random.uniform(-10, 10)  # Random coefficient c\n    \n    # Solve the quadratic equation ax^2 + bx + c = 0\n    solutions = solve(a*symbols('x')**2 + b*symbols('x') + c, symbols('x'))\n    \n    # Round the solutions to the specified precision\n    rounded_solutions = tuple(round(sol, precision) for sol in solutions)\n    \n    return rounded_solutions"}
{"task_id": "BigCodeBench/279", "solution": "import random\nfrom collections import Counter\nCARDS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\ndef task_func(x=1):\n    \"\"\"\n    Draw x random 5-card poker hands from a 52-card pack (without suits) and return\n    the hands along with a counter of the drawn cards.\n    \"\"\"\n    # Initialize a deck of cards\n    deck = CARDS * 4  # Each card rank appears 4 times for a standard deck\n    \n    # Draw hands\n    drawn_hands = []\n    drawn_cards = []\n    for _ in range(x):\n        hand = random.sample(deck, 5)  # Draw 5 cards without replacement\n        drawn_hands.append(hand)\n        drawn_cards.extend(hand)\n    \n    # Count the drawn cards\n    card_counter = Counter(drawn_cards)\n    \n    return drawn_hands, card_counter"}
{"task_id": "BigCodeBench/280", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(signal, precision=2, seed=777):\n    np.random.seed(seed)  # Set the seed for reproducibility\n    signal = np.array(signal, dtype=complex)  # Ensure signal can handle complex numbers\n\n    # Calculate the FFT\n    transformed_signal = fft(signal)\n    transformed_signal_rounded = np.round(transformed_signal, precision)\n\n    # Plot the original signal\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n    ax1.plot(signal.real, label='Real part', marker='o')\n    ax1.plot(signal.imag, label='Imaginary part', marker='s')\n    ax1.set_title('Original Signal')\n    ax1.legend()\n\n    # Plot the transformed signal\n    ax2.plot(np.abs(transformed_signal_rounded), label='Magnitude', color='blue')\n    ax2.set_title('Transformed Signal')\n    ax2.set_xlabel('Frequency')\n    ax2.legend()\n\n    # Show the plots\n    plt.tight_layout()\n    plt.show()\n\n    return transformed_signal_rounded, (ax1, ax2)"}
{"task_id": "BigCodeBench/281", "solution": "import re\nimport os\nfrom collections import Counter\ndef task_func(folder_path: str) -> dict:\n    \"\"\"\n    Scan a directory for log files and count the occurrences of each IP address in all files.\n    \n    Parameters:\n    - folder_path (str): The path to the directory containing log files to be scanned.\n    \n    Returns:\n    dict: A dictionary with IP addresses as keys and their counts as values.\n    \"\"\"\n    ip_pattern = re.compile(r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b')  # Regular expression for IP addresses\n    ip_counts = Counter()\n    \n    # Scanning all files in the directory\n    for root, _, files in os.walk(folder_path):\n        for file in files:\n            if file.endswith('.log'):  # Assuming log files have a .log extension\n                with open(os.path.join(root, file), 'r') as f:\n                    content = f.read()\n                    ip_counts.update(ip_pattern.findall(content))\n    \n    return dict(ip_counts)"}
{"task_id": "BigCodeBench/282", "solution": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport cv2\nimport os\nimport tempfile\ndef calculate_histogram(image):\n    \"\"\"\n    Calculate the 3D histogram of an image's colors.\n\n    Parameters:\n    image (numpy.ndarray): The image as a numpy array.\n\n    Returns:\n    numpy.ndarray: The 3D histogram of colors.\n    \"\"\"\n    hist, _, _ = np.histogram2d(image[:,:,0].ravel(), image[:,:,1].ravel(), bins=16, range=[[0,256],[0,256]])\n    hist, _, _ = np.histogram2d(hist.ravel(), image[:,:,2].ravel(), bins=16, range=[[0,hist.max()],[0,256]])\n    return hist.reshape((16,16,16))\ndef onpick(event):\n    ind = event.ind\n    print(f'You picked data point(s) {ind}')\ndef task_func(file_path, onpick):\n    \"\"\"\n    Draw the color histogram of an image in 3D and call a function when a data point is selected.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    \n    image = cv2.imread(file_path)\n    hist = calculate_histogram(image)\n    \n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n    \n    hist_x, hist_y, hist_z = np.indices(hist.shape).reshape(3, -1).T\n    hist_values = hist.ravel()\n    ax.scatter(hist_x, hist_y, hist_z, c=hist_values, cmap='viridis', s=100, alpha=0.8)\n    \n    ax.set_xlabel('Red')\n    ax.set_ylabel('Green')\n    ax.set_zlabel('Blue')\n    \n    def onpick(event):\n        thisind = np.searchsorted(event.ind, event.mouseevent.ind)\n        ind = event.ind[thisind]\n        onpick(ind)  # Call the provided onpick function\n    \n    fig.canvas.mpl_connect('pick_event', onpick)\n    \n    plt.show()\n    return ax"}
{"task_id": "BigCodeBench/283", "solution": "import os\nimport json\nfrom collections import Counter\ndef task_func(json_files_path='./json_files/', key='name'):\n    \"\"\"\n    The function to count occurrences of a key's values across multiple JSON files.\n    \"\"\"\n    count_dict = Counter()\n    \n    # Check if the directory exists\n    if not os.path.isdir(json_files_path):\n        return \"Directory not found.\"\n\n    # Iterate over each file in the directory\n    for filename in os.listdir(json_files_path):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(json_files_path, filename), 'r') as file:\n                try:\n                    data = json.load(file)\n                    # Count the occurrences of the specified key\n                    if key in data:\n                        count_dict[data[key]] += 1\n                    else:\n                        print(f\"Key '{key}' not found in file {filename}.\")\n                except json.JSONDecodeError:\n                    print(f\"Error decoding JSON in file {filename}.\")\n                except Exception as e:\n                    print(f\"Error processing file {filename}: {e}\")\n\n    return dict(count_dict)"}
{"task_id": "BigCodeBench/284", "solution": "import mechanize\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\ndef task_func(url):\n    # Initialize mechanize browser\n    br = mechanize.Browser()\n    \n    # Suppressing the warnings for demonstration purposes\n    br.set_handle_robots(False)\n    br.set_handle_equiv(False)\n    \n    # Open the URL\n    br.open(url)\n    \n    # Read the page content\n    page_content = br.response().read()\n    \n    # Use BeautifulSoup to parse the HTML content\n    soup = BeautifulSoup(page_content, \"html.parser\")\n    \n    # Find all the anchor tags\n    links = soup.find_all('a')\n    \n    # Extract and combine absolute URLs\n    absolute_links = [urljoin(url, link.get('href')) for link in links if link.get('href') is not None]\n    \n    return absolute_links"}
{"task_id": "BigCodeBench/285", "solution": "import mechanize\nfrom bs4 import BeautifulSoup\ndef task_func(url, form_id, data):\n    \"\"\"\n    Submits a form on a given webpage using mechanize and extracts the title of the response page.\n\n    Parameters:\n        url (str): The URL of the webpage containing the form.\n        form_id (int): The index of the form to be submitted.\n        data (dict): A dictionary containing form data keys and values.\n\n    Returns:\n        str: The title of the page resulting from the form submission.\n\n    Notes:\n        - If the page has no title, it returns 'No Title'.\n\n    Requirements:\n        - mechanize\n        - bs4.BeautifulSoup\n\n    Examples:\n        >>> data = {'username': 'admin', 'password': 'password'}\n        >>> title = task_func('https://www.example.com/login', 0, data)\n        >>> isinstance(title, str)\n        True\n    \"\"\"\n    # Create a browser object\n    br = mechanize.Browser()\n    \n    # Suppress warnings about certificates\n    br.set_handle_robots(False)\n    br.set_handle_equiv(True)\n    br.set_handle_referer(True)\n    br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)\n    \n    # Follow redirects\n    br.response_follow_redirects = True\n    \n    # Open the URL\n    br.open(url)\n    \n    # Select the form\n    try:\n        br.select_form(nr=form_id)\n    except IndexError:\n        return \"Form not found\"\n    \n    # Fill the form\n    for key, value in data.items():\n        br.form[key] = value\n    \n    # Submit the form\n    response = br.submit()\n    \n    # Parse the response with BeautifulSoup to get the title\n    soup = BeautifulSoup(response.read(), 'html.parser')\n    title_tag = soup.find('title')\n    \n    # Return the title or 'No Title' if not found\n    return title_tag.string if title_tag else 'No Title'"}
{"task_id": "BigCodeBench/286", "solution": "from collections import Counter\nimport os\nimport csv\nFILE_DIR = './yourdictfiles/'\ndef task_func(output_file, test_directory=FILE_DIR):\n    \"\"\"\n    Count the number of words in multiple dictionary files (.txt) in a specific directory,\n    export the counts to a CSV file, and then return the total number of words.\n    \"\"\"\n    try:\n        # Initialize total count\n        total_count = 0\n        \n        # Check if the directory exists\n        if not os.path.isdir(test_directory):\n            print(f\"Directory {test_directory} does not exist.\")\n            return 0\n        \n        word_counts = Counter()\n        \n        # Iterate over each file in the directory\n        for filename in os.listdir(test_directory):\n            if filename.endswith('.txt'):\n                with open(os.path.join(test_directory, filename), 'r', encoding='utf-8') as file:\n                    # Count words in the file\n                    word_counts.update(file.read().split())\n        \n        # Write counts to CSV\n        with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerow(['Word', 'Count'])\n            for word, count in word_counts.items():\n                writer.writerow([word, count])\n        \n        # Calculate total number of words\n        total_count = sum(word_counts.values())\n        \n        return total_count\n    \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return 0"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\ndef task_func(filename, directory):\n    \"\"\"\n    Count the number of words in .txt files within a specified directory, \n    export the counts to a JSON file, and then return the total number of words.\n\n    Parameters:\n    filename (str): The name of the output JSON file.\n    directory (str): The directory where .txt files are located.\n\n    Returns:\n    int: total number of words in .txt files\n    \"\"\"\n    total_words = 0\n    word_counts = Counter()\n\n    # Iterate over all .txt files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith(\".txt\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                words = file.read().split()\n                total_words += len(words)\n                word_counts.update(words)\n\n    # Export word counts to a JSON file\n    with open(filename, 'w') as json_file:\n        json.dump(dict(word_counts), json_file)\n\n    return total_words"}
{"task_id": "BigCodeBench/288", "solution": "import collections\nimport json\nimport os\ndef task_func(directory_path: str) -> dict:\n    \"\"\"\n    Count the total appearances of all keys in all JSON files in the specified directory and return a dictionary \n    with the keys from the JSON files as keys and their respective counts as values.\n    \"\"\"\n    key_count = collections.defaultdict(int)\n    \n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory_path, filename), 'r') as file:\n                try:\n                    data = json.load(file)\n                    if isinstance(data, list):\n                        for item in data:\n                            for key in item:\n                                key_count[key] += 1\n                    else:\n                        for key in data:\n                            key_count[key] += 1\n                except json.JSONDecodeError:\n                    print(f\"Error decoding JSON in file {filename}, skipping.\")\n                    continue\n    \n    return dict(key_count)"}
{"task_id": "BigCodeBench/289", "solution": "import numpy as np\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(X, y, n_splits=5, batch_size=32, epochs=10):\n    \"\"\"\n    Trains a simple neural network on provided data using k-fold cross-validation.\n    \"\"\"\n    history_list = []\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X)\n    \n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    \n    for train_index, val_index in kfold.split(X_scaled):\n        X_train, X_val = X_scaled[train_index], X_scaled[val_index]\n        y_train, y_val = y[train_index], y[val_index]\n        \n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Dense(50, activation='relu', input_shape=(X_train.shape[1],)),\n            tf.keras.layers.Dense(1, activation='sigmoid')\n        ])\n        \n        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n        \n        history = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, \n                            validation_data=(X_val, y_val), verbose=0)\n        \n        history_list.append(history)\n    \n    return history_list"}
{"task_id": "BigCodeBench/290", "solution": "import nltk\nfrom collections import Counter\nimport os\nfrom nltk.corpus import stopwords\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(directory_path):\n    \"\"\"\n    Count the number of unique non-stop words across all '.txt' files in a specified directory.\n\n    Parameters:\n    directory_path (str): The path to the directory containing '.txt' files.\n\n    Returns:\n    int: The total count of unique non-stop words across all files.\n    \"\"\"\n    unique_words = set()\n\n    # Iterate over all files in the directory\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            with open(os.path.join(directory_path, filename), 'r', encoding='utf-8') as file:\n                # Read the file, tokenize it, and filter out stopwords\n                words = (word.lower() for line in file for word in nltk.word_tokenize(line) if word.isalpha())\n                filtered_words = [word for word in words if word not in STOPWORDS]\n                unique_words.update(filtered_words)\n\n    # Return the count of unique words\n    return len(unique_words)"}
{"task_id": "BigCodeBench/291", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\ndef task_func(mu, sigma, seed=0):\n    \"\"\"\n    Draw a normal distribution using a 1000 samples, indicating the mean and standard deviation \n    with a color bar.\n    \n    Parameters:\n    mu (float): The mean of the distribution.\n    sigma (float): The standard deviation of the distribution.\n    seed (int, Optional): The seed for the random number generator. Defaults to 0.\n    \n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object of the plotted distribution.\n    \"\"\"\n    np.random.seed(seed)\n    \n    # Generate 1000 samples from a normal distribution\n    samples = np.random.normal(mu, sigma, 1000)\n    \n    # Create a histogram\n    plt.figure(figsize=(10, 6))\n    sns.histplot(samples, kde=True, color=\"blue\", alpha=0.6, bins=50)\n    \n    # Add a vertical line for mean\n    plt.axvline(x=mu, color='r', linestyle='dashed', linewidth=2)\n    plt.text(mu, 0, f'Mean: {mu}', fontsize=12, color='r', ha='center')\n    \n    # Add a vertical line for standard deviation\n    plt.axvline(x=mu + sigma, color='g', linestyle='dashed', linewidth=2)\n    plt.text(mu + sigma, 0, f'Std: {sigma}', fontsize=12, color='g', ha='center')\n    plt.axvline(x=mu - sigma, color='g', linestyle='dashed', linewidth=2)\n    \n    # Add color bar (Note: In this context, a color bar doesn't naturally fit with a histogram.\n    #               Typically, color bars are used with continuous color gradients in plots like heatmaps.)\n    # However, to fulfill the request, we'll add a color bar for the KDE plot.\n    kde = sns.kdeplot(samples, color=\"b\", lw=2, ax=plt.gca())\n    plt.colorbar(kde.lines[0].get_figure().axes[-1])  # Color bar for KDE plot\n    \n    plt.title('Normal Distribution')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    \n    return plt.gca()"}
{"task_id": "BigCodeBench/292", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Create a copy of the DataFrame to avoid modifying the original\n    scaled_df = df.copy()\n    \n    # Initialize the scaler\n    scaler = MinMaxScaler()\n    \n    # Group by 'id' and apply scaling to 'Age' and 'Income' within each group\n    grouped = scaled_df.groupby('id')\n    scaled_df.loc[:, ['age', 'income']] = grouped[['age', 'income']].apply(lambda x: scaler.fit_transform(x))\n    \n    # Create a histogram for the 'income' column after scaling\n    income_hist, bins = np.histogram(scaled_df['income'], bins=10, density=True)\n    plt.figure(figsize=(10, 6))\n    plt.hist(scaled_df['income'], bins=bins, alpha=0.7, color='blue', edgecolor='black')\n    plt.title('Histogram of Scaled Income')\n    plt.xlabel('Scaled Income')\n    plt.ylabel('Frequency')\n    \n    # Return the scaled DataFrame and histogram data\n    plt.tight_layout()\n    return scaled_df, (income_hist, bins)"}
{"task_id": "BigCodeBench/293", "solution": "import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(elements, subset_size):\n    \"\"\"\n    Generate all subsets of a given size from a tuple and draw a histogram of the sums of the subsets. \n    Additionally, return the Axes object of the plotted histogram and the combinations of the subsets and their sums.\n    \"\"\"\n    # Generate all subsets of the given size\n    subsets = itertools.combinations(elements, subset_size)\n    \n    # Calculate the sums of each subset\n    sums = [sum(subset) for subset in subsets]\n    \n    # Plotting the histogram\n    fig, ax = plt.subplots()\n    ax.hist(sums, bins='auto')  # let matplotlib decide the number of bins\n    ax.set_title(f'Sums of Subsets of Size {subset_size}')\n    ax.set_xlabel('Sum of Subset')\n    ax.set_ylabel('Frequency')\n    \n    # Return the Axes object, combinations, and their sums\n    return ax, list(subsets), sums"}
{"task_id": "BigCodeBench/294", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Check if the required columns exist\n    required_columns = ['id', 'age', 'income']\n    if not all(column in df.columns for column in required_columns):\n        raise ValueError(\"DataFrame must contain 'id', 'age', and 'income' columns.\")\n    \n    # Group the DataFrame by 'id' and standardize 'age' and 'income' within each group\n    standardized_df = df.groupby('id').apply(lambda group: pd.DataFrame(StandardScaler().fit_transform(group[['age', 'income']]), \n                                                                       columns=['age', 'income'], \n                                                                       index=group.index))\n    \n    # Reconstruct the DataFrame to its original form with 'id' column\n    standardized_df.reset_index(drop=True, inplace=True)\n    return standardized_df"}
{"task_id": "BigCodeBench/295", "solution": "import itertools\nimport statistics\ndef task_func(elements, subset_size):\n    \"\"\"\n    Generate all subsets of a given size from a tuple and calculate the mean, median, and mode of the sums of the subsets.\n\n    Args:\n    - elements (tuple): A tuple of numbers from which subsets will be generated.\n    - subset_size (int): The size of the subsets to be generated.\n\n    Returns:\n    dict: A dictionary with the mean, median, and mode of the sums of the subsets.\n    \"\"\"\n    # Generate all subsets of the given size\n    subsets = (tuple(sorted(subset)) for subset in itertools.combinations(elements, subset_size))\n    \n    # Calculate the sum of each subset\n    subset_sums = [sum(subset) for subset in subsets]\n    \n    # Calculate mean, median, and mode\n    mean_value = statistics.mean(subset_sums)\n    median_value = statistics.median(subset_sums)\n    try:\n        mode_value = statistics.mode(subset_sums)\n    except statistics.StatisticsError:\n        # If there's no unique mode, just inform or handle as needed\n        mode_value = \"No unique mode\"\n    \n    return {'mean': mean_value, 'median': median_value, 'mode': mode_value}"}
{"task_id": "BigCodeBench/296", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    \n    # Check if the DataFrame is empty\n    if df.empty:\n        plt.bar([], [])\n        plt.xlabel('Value')\n        plt.ylabel('Count')\n        plt.title('Value Distribution')\n        return plt.gca()\n    \n    # Draw a bar chart of the counts of each unique value in the 'value' column\n    value_counts = df['value'].value_counts()\n    ax = value_counts.plot(kind='bar', figsize=(10, 6))\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Count')\n    ax.set_title('Value Distribution')\n    \n    return ax"}
{"task_id": "BigCodeBench/297", "solution": "import itertools\nimport collections\ndef task_func(elements, subset_size):\n    \"\"\"\n    Generate all 2-element subsets of a tuple and count the occurrences of each sum in the subsets.\n\n    Returns:\n    dict: A dictionary with the sums and their counts.\n    \"\"\"\n    # Generate all 2-element combinations from the input tuple\n    subsets = itertools.combinations(elements, subset_size)\n    \n    # Calculate the sum for each subset\n    subset_sums = [sum(subset) for subset in subsets]\n    \n    # Count the occurrences of each sum using collections.Counter\n    sum_counts = collections.Counter(subset_sums)\n    \n    return dict(sum_counts)"}
{"task_id": "BigCodeBench/298", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport datetime\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n    # Check for required columns\n    if not all(col in df.columns for col in COLUMNS):\n        raise KeyError(\"DataFrame must have 'Date' and 'Value' columns.\")\n    \n    # Convert 'Date' to datetime\n    df['Date'] = pd.to_datetime(df['Date'])\n    \n    # Flatten the list of lists and create a new DataFrame\n    flat_values = [val for sublist in df['Value'] for val in sublist]\n    index = df['Date'].repeat(df['Value'].apply(len))\n    temp_df = pd.DataFrame({'Date': index, 'Value': flat_values})\n    \n    # Split the DataFrame into separate columns for each value\n    temp_df = temp_df.set_index('Date').Value.str.split(',', expand=True).stack().reset_index(level=1, drop=True).to_frame('Value')\n    temp_df.index = temp_df.index.droplevel(0)\n    temp_df = temp_df.reset_index().rename(columns={'index': 'OriginalIndex'})\n    \n    # Merge back with original DataFrame and scale\n    temp_df = pd.merge(df['Date'], temp_df, left_index=True, right_on='OriginalIndex', how='right')\n    temp_df.drop('OriginalIndex', axis=1, inplace=True)\n    scaler = StandardScaler()\n    scaled_values = scaler.fit_transform(temp_df['Value'].str.replace(',', '').astype(float).values.reshape(-1, 1))\n    temp_df = temp_df.join(pd.DataFrame(scaled_values, columns=['ScaledValue']))\n    \n    # Plot if required\n    if plot:\n        ax = temp_df.groupby('Date')['ScaledValue'].apply(list).apply(lambda x: plt.bar(range(len(x)), x)).fig\n        ax.set_title('Scaled Values Over Time')\n        ax.set_xlabel('Date')\n        ax.set_ylabel('Scaled Value')\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        return temp_df, ax\n    \n    return temp_df"}
{"task_id": "BigCodeBench/299", "solution": "import itertools\nimport math\nfrom pandas import Series\ndef task_func(elements, subset_size, top_n=2):\n    if subset_size > len(elements) or subset_size == 0:\n        return 1, Series([])\n    \n    # Generate all subsets of the given size\n    subsets = (tuple(sorted(subset)) for subset in itertools.combinations(elements, subset_size))\n    \n    # Calculate the sum of each subset\n    subset_sums = (sum(subset) for subset in subsets)\n    \n    # Calculate the product of the sums\n    product_of_sums = math.prod(subset_sums)\n    \n    # Get the top_n sums\n    top_sums = Series(subset_sums).nlargest(top_n)\n    \n    return product_of_sums, top_sums.tolist()"}
{"task_id": "BigCodeBench/300", "solution": "import pandas as pd\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Check if required columns exist\n    required_columns = {'Date', 'Value'}\n    if not required_columns.issubset(df.columns):\n        raise KeyError(\"DataFrame must contain 'Date' and 'Value' columns.\")\n    \n    # Convert 'Date' column to datetime\n    df['Date'] = pd.to_datetime(df['Date'])\n    \n    # Flatten the 'Value' lists and create a new DataFrame\n    exploded = df['Value'].explode().to_frame()\n    \n    # Calculate Z-scores for each value\n    z_scores = exploded.apply(zscore)\n    \n    # Pivot the data to have dates as rows and values as columns\n    z_score_pivot = z_scores.reset_index().pivot_table(index='index', columns='Value', values=0)\n    \n    # Reorder columns and combine with the original DataFrame\n    columns_order = df['Date'].tolist() + z_score_pivot.columns.tolist()\n    result_df = pd.concat([df['Date'], z_score_pivot], axis=1)[columns_order]\n    \n    # Create a box plot\n    fig, ax = plt.subplots()\n    z_score_pivot.T.boxplot(ax=ax)\n    ax.set_title('Z-Scores Over Time')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Z-Score')\n    \n    return result_df, fig"}
{"task_id": "BigCodeBench/301", "solution": "import pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nSOLAR_CYCLE_YEARS = np.array([1986, 1996, 2008, 2019])\ndef task_func(date_str, from_tz, to_tz):\n    \"\"\"\n    Calculate solar activity based on the date and time, taking into account the solar cycle of 11 years.\n\n    Parameters:\n    date_str (str): The date string in \"yyyy-mm-dd hh:mm:ss\" format.\n    from_tz (str): The timezone of the given date string.\n    to_tz (str): The timezone to which the given date and time should be converted.\n\n    Returns:\n    float: The solar activity between 0 and 1.\n    \"\"\"\n    # Parse the date string and convert to the target timezone\n    date = parse(date_str).astimezone(pytz.timezone(from_tz))\n    date = date.astimezone(pytz.timezone(to_tz))\n    \n    # Find the closest solar cycle year\n    closest_cycle_year = SOLAR_CYCLE_YEARS[np.argmin(np.abs(SOLAR_CYCLE_YEARS - date.year))]\n    \n    # Calculate years since the closest solar cycle year\n    years_since_cycle = date.year - closest_cycle_year\n    \n    # Normalize the years within a solar cycle\n    normalized_years = years_since_cycle % 11 - 5.5  # Centering at 0\n    \n    # Calculate solar activity using a cosine function\n    solar_activity = 0.5 + 0.5 * math.cos(math.radians(normalized_years * 360 / 11))\n    \n    return solar_activity"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\ndef task_func(df, plot=False):\n    if df.empty or not all(isinstance(row[1], list) for row in df.itertuples(index=False)):\n        raise ValueError(\"DataFrame is empty or 'Value' column does not contain lists.\")\n    \n    # Flatten the list of lists and create a DataFrame\n    flat_values = [val for sublist in df['Value'] for val in sublist]\n    df_expanded = pd.DataFrame(flat_values, columns=[f'Value_{i}' for i in range(len(df['Value'][0]))])\n    df_expanded.insert(0, 'Date', df['Date'].repeat(len(df_expanded.columns)-1).values)\n\n    # Calculate the Pearson correlation\n    corr_matrix = df_expanded.drop('Date', axis=1).corr()\n\n    if plot:\n        # Visualize the correlation matrix using a heatmap\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True, cbar_kws={\"shrink\": .5})\n        plt.title('Correlation Heatmap')\n        plt.show()\n        return plt.gcf().get_axes()[0]  # Return the Axes object\n\n    return corr_matrix"}
{"task_id": "BigCodeBench/303", "solution": "import pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nMOON_PHASES_YEARS = np.array([1987, 1994, 2001, 2008, 2015, 2022])\ndef calculate_moon_phase(year):\n    \"\"\"Calculate a normalized moon phase based on a year, with 0 for new moon and 1 for full moon.\"\"\"\n    # Simplified calculation for demonstration purposes.\n    # In reality, moon phases are determined by the moon's position relative to the earth and sun, which is more complex.\n    phase_cycle = 7  # Simplified cycle for demonstration\n    return (year - MOON_PHASES_YEARS[0]) % phase_cycle / phase_cycle\ndef task_func(date_str, from_tz, to_tz):\n    \"\"\"\n    Calculate the moon phase by the date and time taking into account the lunar phase cycle of 7 years.\n    \"\"\"\n    # Parse the date string\n    date = parse(date_str)\n    \n    # Convert the date to the from_tz timezone\n    from_tz_obj = pytz.timezone(from_tz)\n    date = from_tz_obj.localize(date)\n    \n    # Convert the date to the to_tz timezone\n    to_tz_obj = pytz.timezone(to_tz)\n    date = date.astimezone(to_tz_obj)\n    \n    # Extract the year and calculate the moon phase\n    moon_phase = calculate_moon_phase(date.year)\n    \n    return moon_phase"}
{"task_id": "BigCodeBench/304", "solution": "import pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(df):\n    if df.empty:\n        return 0, 0\n\n    # Preprocessing: Convert lists in 'Value' into separate columns\n    df['Value'] = df['Value'].apply(pd.Series)\n    df = df.drop('Date', axis=1)  # Drop date column if not needed for PCA\n    df = df.rename(columns=lambda x: f'Value_{x+1}' if x != 0 else 'Value')  # Rename columns for clarity\n\n    # Perform PCA\n    pca = PCA()\n    principal_components = pca.fit_transform(df.dropna())\n\n    # Get explained variance ratio\n    explained_variance_ratio = pca.explained_variance_ratio_\n\n    # Plot explained variance ratio\n    fig, ax = plt.subplots()\n    ax.bar(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio)\n    ax.set_title('Explained Variance Ratio of Principal Components')\n    ax.set_xlabel('Principal Component')\n    ax.set_ylabel('Explained Variance Ratio')\n\n    return explained_variance_ratio, ax"}
{"task_id": "BigCodeBench/305", "solution": "from collections import Counter\nimport itertools\nimport random\nALPHABET = 'abcdefghijklmnopqrstuvwxyz'\ndef task_func(list_of_lists, seed=0):\n    \"\"\"\n    Count the frequency of each letter in a list of lists. If a list is empty, \n    fill it with a random sample from the alphabet, and then count the letters.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    seed (int): The seed for the random number generator. Defaults to 0.\n    \n    Returns:\n    Counter: A Counter object with the frequency of each letter.\n    \n    Requirements:\n    - collections.Counter\n    - itertools\n    - random.sample\n    \n    Example:\n    >>> dict(task_func([['a', 'b', 'c'], [], ['d', 'e', 'f']]))\n    {'a': 1, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1, ...}\n    \"\"\"\n    # Set the random seed for reproducibility\n    random.seed(seed)\n    \n    # Fill empty lists with a random sample from the alphabet\n    for sublist in list_of_lists:\n        if not sublist:\n            sublist.extend(random.sample(ALPHABET, len(ALPHABET)))\n    \n    # Flatten the list of lists and count the frequency of each letter\n    flattened_list = list(itertools.chain.from_iterable(list_of_lists))\n    letter_counts = Counter(flattened_list)\n    \n    return letter_counts"}
{"task_id": "BigCodeBench/306", "solution": "import os\nimport logging\ndef task_func(directory):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory {directory} does not exist.\")\n    \n    removed_files = []\n    count = 0\n    \n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if 'jquery' in file.lower() and file.endswith('.js'):\n                file_path = os.path.join(root, file)\n                os.remove(file_path)\n                removed_files.append(file)\n                count += 1\n                logging.info(f\"Removed file: {file_path}\")\n    \n    return count, removed_files"}
{"task_id": "BigCodeBench/307", "solution": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(list_of_lists, seed=0):\n    \"\"\"\n    Create a histogram from the data in a list of lists. If any sublist is empty, \n    it will be filled with 5 random integers ranging from 0 to 100 (both inclusive).\n    The histogram will then be constructed using the combined data from all sublists.\n    \n    Parameters:\n    list_of_lists (list): A list containing multiple sublists with integers.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    matplotlib.axes._axes.Axes: The histogram plot object.\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Fill empty sublists with random integers\n    for sublist in list_of_lists:\n        if not sublist:\n            sublist.extend(random.sample(range(101), 5))\n    \n    # Flatten the list of lists\n    combined_data = [item for sublist in list_of_lists for item in sublist]\n    \n    # Create a histogram using seaborn\n    plt.figure(figsize=(10, 6))\n    sns.histplot(combined_data, bins=20, kde=False)\n    plt.title('Combined Data Histogram')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    \n    # Show the plot\n    plt.show()"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\ndef task_func(additional_fields = []):\n    all_fields = FIELDS + additional_fields\n    report_data = {field: [] for field in all_fields}\n    report_data['Average Grade'] = []\n\n    for student in STUDENTS:\n        grades = {field: random.randint(0, 100) for field in all_fields}\n        avg_grade = mean(grades.values())\n        report_data['Average Grade'].append(avg_grade)\n        for field, grade in grades.items():\n            report_data[field].append(grade)\n\n    # Calculate average grades for each subject\n    subject_averages = {field: mean(grades[field] for grades in report_data[field]) for field in all_fields}\n    report_data.update(subject_averages)\n    report_data.move_to_end('Average Grade', last=False)\n\n    # Create DataFrame\n    df_report = pd.DataFrame(report_data)\n    df_report = df_report.set_index('Average Grade')\n\n    return df_report"}
{"task_id": "BigCodeBench/309", "solution": "import numpy as np\nimport random\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_lists, seed=42):\n    random.seed(seed)  # Set the seed for reproducibility\n    \n    # Function to handle empty lists\n    def fill_and_scale(empty_list):\n        # Fill the empty list with random integers\n        empty_list.extend(random.sample(range(101), 5))  # 0 to 100, 5 random numbers\n        # Scale the filled list\n        scaler = MinMaxScaler()\n        scaled = scaler.fit_transform(np.array(empty_list).reshape(-1, 1))\n        return scaled.flatten().tolist()\n    \n    # Process each list in the list_of_lists\n    scaled_list_of_lists = []\n    for lst in list_of_lists:\n        if not lst:  # If the list is empty\n            scaled_list_of_lists.append(fill_and_scale(lst))\n        else:\n            # If the list is not empty, scale it directly\n            scaler = MinMaxScaler()\n            scaled_list_of_lists.append(scaler.fit_transform(np.array(lst).reshape(-1, 1)).flatten().tolist())\n    \n    return scaled_list_of_lists"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n    \"\"\"\n    Generates a CSV file containing simulated data for 100 people, including name, age, height, and weight. \n    It also calculates and appends the average age, height, and weight at the end of the file.\n\n    Parameters:\n    filename (str): The name of the CSV file to be created.\n\n    Returns:\n    str: The path of the created CSV file.\n    \"\"\"\n    # Ensure the file path is absolute\n    file_path = os.path.abspath(filename)\n\n    # Generate random data\n    data = []\n    for _ in range(PEOPLE_COUNT):\n        name = f\"Person_{random.randint(1, 1000)}\"\n        age = random.randint(18, 80)\n        height = round(random.uniform(150, 200), 2)  # in cm\n        weight = round(random.uniform(50, 120), 2)  # in kg\n        data.append([name, age, height, weight])\n\n    # Calculate averages\n    avg_age = mean(age for _, age, _, _ in data)\n    avg_height = mean(height for _, _, height, _ in data)\n    avg_weight = mean(weight for _, _, _, weight in data)\n\n    # Write to CSV\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(COLUMNS)  # Write headers\n        writer.writerows(data)  # Write data rows\n        writer.writerow(['', '', '', 'Average'])  # Spacer\n        writer.writerow(['', avg_age, avg_height, avg_weight])  # Write averages\n\n    return file_path"}
{"task_id": "BigCodeBench/311", "solution": "import numpy as np\nimport random\nfrom scipy import stats\ndef task_func(list_of_lists, size=5, seed=0):\n    random.seed(seed)  # Set the seed for reproducibility\n    \n    # Fill empty lists with random integers\n    for lst in list_of_lists:\n        if not lst:\n            lst.extend(random.randint(0, 100) for _ in range(size))\n    \n    # Flatten the list of lists into a single list\n    all_values = [val for sublist in list_of_lists for val in sublist]\n    \n    # Calculate statistics\n    mean = np.mean(all_values)\n    median = np.median(all_values)\n    mode = stats.mode(all_values).mode[0]  # scipy.stats.mode returns a ModeResult object\n    \n    # Return statistics as a dictionary\n    return {'mean': mean, 'median': median, 'mode': mode}"}
{"task_id": "BigCodeBench/312", "solution": "import random\nimport matplotlib.pyplot as plt\nDISTRIBUTION_SIZE = 1000\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n    \"\"\"\n    # Generate a Gaussian distribution\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    \n    # Plotting the histogram\n    fig, ax = plt.subplots()\n    ax.hist(distribution, bins=bins, density=True, alpha=0.7, color='b')\n    \n    # Return the distribution and the histogram plot's Axes object\n    return distribution, ax"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\ndef task_func(directory):\n    \"\"\"\n    Organize files in a directory based on the first text that is not enclosed in square brackets.\n    Move the files to subdirectories named after this text. If no matching text is found,\n    the file is not moved.\n    \"\"\"\n    file_movements = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.txt'):  # Assuming only .txt files are considered\n            with open(os.path.join(directory, filename), 'r') as file:\n                content = file.readline()\n                match = re.search(r'(?<=\\[)[^]]+(?=\\])', content)\n                if not match:\n                    match = re.search(r'^[^[\\]]+', content)  # Search for text not in brackets at the start\n                if match:\n                    subdir_name = match.group().strip()\n                    subdir_path = os.path.join(directory, subdir_name)\n                    if not os.path.exists(subdir_path):\n                        os.makedirs(subdir_path)\n                    new_filename = f\"{filename.rsplit('.', 1)[0]}_{subdir_name}.{filename.rsplit('.', 1)[-1]}\"\n                    shutil.move(os.path.join(directory, filename), os.path.join(subdir_path, new_filename))\n                    if subdir_name in file_movements:\n                        file_movements[subdir_name].append(new_filename)\n                    else:\n                        file_movements[subdir_name] = [new_filename]\n    return directory, file_movements"}
{"task_id": "BigCodeBench/314", "solution": "import socket\nimport ssl\nimport http.client\ndef task_func(SERVER_NAME, SERVER_PORT, path):\n    \"\"\"\n    Makes an HTTPS GET request to a specified server and path, and retrieves the response.\n\n    Parameters:\n        SERVER_NAME (str): The name of the server to which the request is made.\n        SERVER_PORT (int): The port number of the server to which the request is made.\n        path (str): The path for the HTTP request.\n\n    Returns:\n        str: The response body from the server as a string.\n\n    Raises:\n        ssl.SSLError: If there is an SSL handshake error.\n    \"\"\"\n    # Create an HTTPS connection using http.client\n    conn = http.client.HTTPSConnection(SERVER_NAME, SERVER_PORT, context=ssl.create_default_context())\n    \n    try:\n        # Make the GET request\n        conn.request(\"GET\", path)\n        \n        # Get the response\n        response = conn.getresponse()\n        \n        # Read and return the response body as a string\n        return response.read().decode(\"utf-8\")\n    except ssl.SSLError as e:\n        # Raise SSL error if there's an issue with the SSL handshake\n        raise e\n    finally:\n        # Close the connection\n        conn.close()"}
{"task_id": "BigCodeBench/315", "solution": "import os\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail\nfrom python_http_client.exceptions import HTTPError\ndef task_func(dir, api_key, recipient_email):\n    \"\"\"\n    Function implementation as described in the problem statement.\n    \"\"\"\n    if not os.path.exists(dir):\n        print(f\"Directory {dir} does not exist.\")\n        return False\n\n    files = os.listdir(dir)\n    file_list = \"\\n\".join(files)\n    \n    message = Mail(\n        from_email='from_email@example.com',  # Replace with your valid from email\n        to_emails=recipient_email,\n        subject='List of files in the directory',\n        plain_text_content=file_list\n    )\n    \n    try:\n        sg = SendGridAPIClient(api_key)\n        response = sg.send(message)\n        \n        # Check if the response status code is in the 2xx range\n        if response.status_code >= 200 and response.status_code < 300:\n            return True\n        else:\n            print(f\"Failed to send email. Status code: {response.status_code}\")\n            return False\n    \n    except HTTPError as http_err:\n        print(f'HTTP error occurred: {http_err}')\n        return False\n    except Exception as err:\n        print(f'Other error occurred: {err}')\n        return False"}
{"task_id": "BigCodeBench/316", "solution": "import pandas as pd\nimport random\nCATEGORIES = ['A', 'B', 'C', 'D', 'E']\ndef task_func(value_range=(0, 100)):\n    \"\"\"\n    Generate a category distribution within a specified range and return as a DataFrame.\n\n    Parameters:\n    value_range (tuple): A tuple specifying the range (min, max) for generating random values for categories.\n    \n    Returns:\n    DataFrame: A pandas DataFrame with two columns: 'Category' and 'Count'.\n    \"\"\"\n    # Generate random counts for each category\n    counts = [random.randint(value_range[0], value_range[1]) for _ in CATEGORIES]\n    \n    # Create a DataFrame\n    df = pd.DataFrame({'Category': CATEGORIES, 'Count': counts})\n    \n    return df"}
{"task_id": "BigCodeBench/317", "solution": "import numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport re\ndef task_func(example_str):\n    \"\"\"\n    Extract all texts not enclosed in square brackets into a string and calculate the TF-IDF values\n    which are returned as a dictionary.\n    \"\"\"\n    # Extract text not in square brackets\n    non_bracketed_text = re.sub(r'\\[.*?\\]', '', example_str).replace(' ', '')\n    \n    # Split the text into individual words\n    words = non_bracketed_text.split(',')\n    \n    # Clean up words (optional: you might want to lower case and remove more punctuation)\n    words = [word.strip().lower() for word in words if word]\n    \n    # Create a corpus for TF-IDF calculation\n    corpus = [' '.join(words)]\n    \n    # Initialize TfidfVectorizer\n    vectorizer = TfidfVectorizer(use_idf=True)\n    \n    # Fit and transform the corpus\n    tfidf_matrix = vectorizer.fit_transform(corpus)\n    \n    # Get feature names and scores\n    feature_names = vectorizer.get_feature_names_out()\n    tfidf_scores = np.array(tfidf_matrix.toarray()).flatten()\n    \n    # Create a dictionary mapping words to their TF-IDF scores\n    tfidf_dict = dict(zip(feature_names, tfidf_scores))\n    \n    return tfidf_dict\nexample_str = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003] Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\""}
{"task_id": "BigCodeBench/318", "solution": "import random\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(points_count=1000, radius=1):\n    # Generate random angles and radii for the points\n    angles = [random.uniform(0, 2 * math.pi) for _ in range(points_count)]\n    radii = [random.uniform(0, radius) for _ in range(points_count)]\n    \n    # Calculate x and y coordinates\n    x_coords = [radius * math.cos(angle) for angle in angles]\n    y_coords = [radius * math.sin(angle) for angle in angles]\n    \n    # Create a scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(x_coords, y_coords)\n    \n    # Set aspect ratio to 'equal'\n    ax.set_aspect('equal', adjustable='box')\n    \n    # Title and labels for clarity, though not required by the spec\n    ax.set_title('Random Points within a Circle')\n    ax.set_xlabel('X-axis')\n    ax.set_ylabel('Y-axis')\n    \n    # Show the plot (commented out for automated testing)\n    # plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/319", "solution": "import re\nfrom nltk.probability import FreqDist\nimport matplotlib.pyplot as plt\ndef task_func(example_str, top_n=30):\n    # Extract all texts that are not enclosed in square brackets\n    non_bracketed_text = re.sub(r'\\[.*?\\]', '', example_str).lower()\n    \n    # Tokenize the text into words\n    words = re.findall(r'\\b\\w+\\b', non_bracketed_text)\n    \n    # Create a frequency distribution\n    dist = FreqDist(words)\n    \n    # Get the top_n most common words\n    top_n_words = dict(dist.most_common(top_n))\n    \n    # Plot the frequency distribution\n    plt.figure(figsize=(10, 5))\n    dist.plot(30, cumulative=False)\n    \n    # Return the plot and the top_n words\n    return plt.gca(), top_n_words"}
{"task_id": "BigCodeBench/320", "solution": "import subprocess\nimport os\nimport random\ndef task_func(directory, file_list):\n    \"\"\"\n    Select a random file from a given list of files in a specified directory and run it as a subprocess.\n    \n    Parameters:\n    directory (str): The directory path where the files are located.\n    file_list (list of str): A list of file names to choose from.\n\n    Returns:\n    int: The exit code of the subprocess, or None if the process is still running or if the file list is empty.\n\n    Example:\n    >>> random.seed(0)\n    >>> task_func(\"c:\\Program Files\\VMware\\VMware Server\", [\"file1.bat\", \"file2.bat\"]) #valid directory and file list\n    0 \n    \"\"\"\n    # Ensure the directory exists\n    if not os.path.isdir(directory):\n        print(f\"Directory {directory} does not exist.\")\n        return None\n    \n    # Check if the file list is empty\n    if not file_list:\n        print(\"File list is empty.\")\n        return None\n    \n    # Select a random file\n    random_file = random.choice(file_list)\n    file_path = os.path.join(directory, random_file)\n    \n    # Check if the file exists\n    if not os.path.isfile(file_path):\n        print(f\"File {file_path} does not exist.\")\n        return None\n    \n    # Run the selected file as a subprocess\n    process = subprocess.Popen([file_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    \n    # Return the exit code of the subprocess\n    return process.returncode"}
{"task_id": "BigCodeBench/321", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(text):\n    # Extract names not surrounded by square brackets\n    names = re.findall(r'\\b([^\\[\\]]+)\\b', text)\n    \n    # Count the frequency of each name\n    name_freqs = pd.Series(names).value_counts()\n    \n    # If no names found, return None for plot, skewness, and kurtosis\n    if name_freqs.empty:\n        return name_freqs, None, None, None\n    \n    # Create a bar chart\n    fig, ax = plt.subplots()\n    name_freqs.plot(kind='bar', ax=ax)\n    ax.set_title('Name Frequencies')\n    ax.set_xlabel('Names')\n    ax.set_ylabel('Frequency')\n    \n    # Calculate skewness and kurtosis\n    skew = name_freqs.skew()\n    kurtosis = name_freqs.kurtosis()\n    \n    # Return the results\n    return name_freqs, ax, skew, kurtosis"}
{"task_id": "BigCodeBench/322", "solution": "import subprocess\nimport os\nimport shutil\nimport sys\nDIRECTORY = 'c:\\Program Files\\VMware\\VMware Server'\nBACKUP_DIRECTORY = 'c:\\Program Files\\VMware\\VMware Server\\Backup'\ndef task_func(filename):\n    \"\"\"\n    Backs up a specified file from a predefined directory to a backup directory and executes it as a subprocess.\n    \n    Parameters:\n    filename (str): The name of the file to be backed up and executed.\n\n    Returns:\n    int: The exit code of the subprocess, or -1 if the backup process fails.\n\n    Requirements:\n    - subprocess\n    - shutil\n    \"\"\"\n    # Construct full file paths\n    src_file = os.path.join(DIRECTORY, filename)\n    backup_file = os.path.join(BACKUP_DIRECTORY, filename)\n\n    # Check if the file exists in the source directory\n    if not os.path.isfile(src_file):\n        print(f\"File {filename} does not exist in the source directory.\")\n        return -1\n\n    # Create backup directory if it doesn't exist\n    if not os.path.exists(BACKUP_DIRECTORY):\n        os.makedirs(BACKUP_DIRECTORY)\n\n    try:\n        # Perform the backup\n        shutil.copy2(src_file, backup_file)\n    except Exception as e:\n        print(f\"Backup failed: {e}\")\n        return -1\n\n    try:\n        # Execute the file as a subprocess\n        subprocess.check_call([src_file])\n        return 0  # Return the successful exit code\n    except subprocess.CalledProcessError as e:\n        print(f\"Execution failed with return code {e.returncode}\")\n        return e.returncode  # Return the non-zero failure code"}
{"task_id": "BigCodeBench/323", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.mixture import GaussianMixture\ndef task_func(text, num_gaussians=1, seed=42):\n    if num_gaussians <= 0:\n        raise ValueError(\"num_gaussians must be greater than 0\")\n    \n    np.random.seed(seed)\n    \n    # Extract names not enclosed by square brackets\n    names = re.findall(r'\\b[A-Z][a-z]+\\b', text)\n    \n    # Tokenize the names into words and count the frequency of each word\n    word_counts = Counter(word for name in names for word in name.split())\n    \n    # Check if num_gaussians is not greater than the number of unique words\n    if num_gaussians > len(word_counts):\n        raise Exception(\"num_gaussians is greater than the number of unique words\")\n    \n    # Convert the word frequencies into an array for Gaussian mixture fitting\n    words_array = np.array(list(word_counts.values()))\n    \n    # Fit a Gaussian Mixture Model\n    gmm = GaussianMixture(n_components=num_gaussians, random_state=seed)\n    gmm.fit(words_array.reshape(-1, 1))\n    \n    # Extract means and variances\n    means = gmm.means_.flatten()\n    variances = gmm.covariances_.flatten()\n    \n    return word_counts, means, variances"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n    \"\"\"\n    Run files from list of files as subprocesses at the same time.\n    \n    Parameters:\n    - file_list (list of str): List of files name to run.\n\n    Returns:\n    list: The exit codes of the subprocesses.\n\n    Requirements:\n    - subprocess\n    - time\n    - threading\n\n    Example:\n    >>> task_func([\"task_func_data/file1.bat\", \"task_func_data/file2.bat\"])\n    [0, 0]\n    \"\"\"\n    def run_file(file):\n        \"\"\"Run a single file and return its exit code.\"\"\"\n        process = subprocess.Popen(file, shell=True)\n        process.wait()\n        return process.returncode\n\n    # Create a list to store the results\n    results = [None] * len(file_list)\n    # Create and start a thread for each file\n    threads = []\n    for i, file in enumerate(file_list):\n        thread = threading.Thread(target=run_file, args=(file,))\n        threads.append(thread)\n        thread.start()\n\n    # Wait for all threads to finish\n    for thread in threads:\n        thread.join()\n\n    # Store the results in the order the files were provided\n    for i, thread in enumerate(threads):\n        results[i] = thread.result if hasattr(thread, 'result') else run_file(file_list[i])\n\n    return results"}
{"task_id": "BigCodeBench/325", "solution": "import re\nimport os\nfrom pathlib import Path\nimport glob\nREGEX_PATTERN = r'(.+?)|\\\\w'\ndef task_func(directory_path: str, regex_pattern: str = REGEX_PATTERN) -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n    \"\"\"\n    matches_dict = {}\n    \n    # Use glob to find all .txt files in the directory\n    file_paths = glob.glob(os.path.join(directory_path, '*.txt'))\n    \n    for file_path in file_paths:\n        file_name = Path(file_path).name\n        \n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            \n            # Find all matches using the regex pattern\n            found_matches = re.findall(regex_pattern, content)\n            \n            # Flatten the list of matches if it's a list of lists (due to grouped capturing)\n            flattened_matches = [item for sublist in found_matches for item in sublist if item]\n            \n            # Store matches in the dictionary\n            matches_dict[file_name] = flattened_matches\n    \n    return matches_dict"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\ndef task_func(directory_path):\n    \"\"\"\n    Find and run all .bat files in a given directory, returning their file names and exit codes.\n\n    Parameters:\n    directory_path (str): The path of the directory to search for .bat files.\n\n    Returns:\n    list of tuples: A list where each tuple contains the file name and its exit code. \n                    The exit code is None if the file could not be executed.\n    \"\"\"\n    bat_files = glob.glob(os.path.join(directory_path, \"*.bat\"))\n    results = []\n    \n    for bat_file in bat_files:\n        try:\n            # Run the .bat file and capture the exit code\n            exit_code = subprocess.call(bat_file, shell=True)\n            results.append((bat_file, exit_code))\n        except Exception as e:\n            # If there's an error executing the file, append None as the exit code\n            results.append((bat_file, None))\n    \n    return results"}
{"task_id": "BigCodeBench/327", "solution": "import csv\nimport re\nfrom collections import Counter\nimport os\ndef task_func(file_path, regex_pattern=r'\\(.+?\\)|\\w+|[\\W_]+'):\n    \"\"\"\n    Detailed function description as provided earlier.\n    \"\"\"\n    match_counts = Counter()\n    \n    with open(file_path, 'r', encoding='utf-8') as file:\n        reader = csv.reader(file)\n        for row in reader:\n            for cell in row:\n                matches = re.findall(regex_pattern, cell)\n                match_counts.update(matches)\n    \n    return dict(match_counts)"}
{"task_id": "BigCodeBench/328", "solution": "import collections\nimport random\nfrom queue import PriorityQueue\ndef task_func(number_teams=5):\n    # Initialize a dictionary to store teams and their points\n    teams_points = {}\n    \n    # Assign random points to each team\n    for i in range(1, number_teams + 1):\n        points = random.randint(1, 100)  # Random points between 1 and 100\n        teams_points[f\"Team {i}\"] = points\n    \n    # Convert the dictionary to a PriorityQueue based on points (inverted for descending order)\n    pq = PriorityQueue()\n    for team, points in teams_points.items():\n        pq.put((-points, team))  # Negate points for max heap\n    \n    # Convert PriorityQueue back to an OrderedDict sorted by points in descending order\n    sorted_ranking = collections.OrderedDict()\n    while not pq.empty():\n        points, team = pq.get()\n        sorted_ranking[team] = -points  # Negate back to original points\n    \n    return sorted_ranking"}
{"task_id": "BigCodeBench/329", "solution": "import re\nimport json\nimport os\ndef task_func(file_path: str, regex_pattern=r'\\(.+?\\)|\\w') -> dict:\n    \"\"\"\n    Extracts matches from a JSON file based on a predefined regular pattern.\n    \n    Parameters:\n    - file_path (str): Path to the JSON file.\n    - regex_pattern (str): Regular expression pattern for matching. Default is to match content in parentheses or individual words.\n    \n    Returns:\n    - dict: Matches organized by filename.\n    \"\"\"\n    matches_dict = {}\n    \n    # Ensure the file exists\n    if not os.path.exists(file_path):\n        print(f\"File {file_path} does not exist.\")\n        return matches_dict\n    \n    # Load the JSON file\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n    \n    # Extract matches for each value in the JSON data\n    for key, value in data.items():\n        matches = re.findall(regex_pattern, value)\n        matches_dict[os.path.basename(file_path)] = matches\n    \n    return matches_dict"}
{"task_id": "BigCodeBench/330", "solution": "import heapq\nimport random\ndef task_func(list_length=5, k=3):\n    \"\"\"\n    Find the k largest numbers in a random-generated list using heapq.\n\n    Parameters:\n    list_length (int): The length of the randomly generated list of integers. Default is 5.\n    k (int): The number of largest elements to find. Default is 3.\n\n    Returns:\n    tuple: A tuple containing two lists: \n        - list[int]: The randomly generated list of integers with the specified length.\n        - list[int]: The k largest numbers found using heapq.\n    \"\"\"\n    # Generate a random list of integers\n    rand_list = [random.randint(0, 100) for _ in range(list_length)]\n    \n    # Use heapq.nlargest to find the k largest numbers\n    top_k = heapq.nlargest(k, rand_list)\n    \n    return rand_list, top_k"}
{"task_id": "BigCodeBench/331", "solution": "import bisect\nimport random\ndef task_func(num, list_length=5, min_value=0, max_value=0):\n    if max_value == 0 and min_value == 0:\n        # If min_value and max_value are not set, default to a range that includes num\n        min_value, max_value = min(num-10, 0), max(num+10, 100)\n\n    # Generate a sorted list of random integers\n    random_list = sorted(random.randint(min_value, max_value) for _ in range(list_length))\n    \n    # Insert the number using bisect\n    bisect.insort(random_list, num)\n    \n    return random_list, random_list  # Returning the same sorted list as per requirement"}
{"task_id": "BigCodeBench/332", "solution": "import re\nfrom collections import Counter\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n    \"\"\"\n    Count the number of non-stop words in a given text.\n    \n    Parameters:\n    - text (str): The input text for word counting.\n    \n    Returns:\n    dict: A dictionary with the words (as keys) and their counts (as values).\n    \"\"\"\n    # Convert text to lowercase and remove punctuation\n    cleaned_text = re.sub(r'[^\\w\\s]', '', text.lower())\n    \n    # Tokenize the text into words\n    words = cleaned_text.split()\n    \n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    filtered_words = [word for word in words if word not in stop_words]\n    \n    # Count the occurrences of each non-stop word\n    word_counts = Counter(filtered_words)\n    \n    return dict(word_counts)"}
{"task_id": "BigCodeBench/333", "solution": "import heapq\nimport random\ndef task_func(k, list_length=5, min_value=0, max_value=100):\n    \"\"\"\n    Find the k smallest numbers in a randomly generated list using heapq.\n    \"\"\"\n    # Generate a random list of integers\n    rand_list = [random.randint(min_value, max_value) for _ in range(list_length)]\n    \n    # Use heapq.nsmallest to find the k smallest numbers\n    least_k = heapq.nsmallest(k, rand_list)\n    \n    return rand_list, least_k"}
{"task_id": "BigCodeBench/334", "solution": "from nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\ndef task_func(documents):\n    \"\"\"\n    Calculate the TF-IDF score of the words in a list of documents.\n    \n    Parameters:\n    - documents (list of str): A list of text documents.\n    \n    Returns:\n    pandas.DataFrame: A DataFrame with words as columns and documents as rows, containing the TF-IDF scores.\n    \"\"\"\n    # Initialize TfidfVectorizer. By default, it tokenizes and lowercases the text, which aligns with word_tokenize's output.\n    vectorizer = TfidfVectorizer(tokenizer=word_tokenize, stop_words='english')  # Stop words removal for clarity\n    \n    # Fit and transform the documents to a TF-IDF matrix\n    tfidf_matrix = vectorizer.fit_transform(documents)\n    \n    # Convert the matrix to a DataFrame for better readability\n    words = vectorizer.get_feature_names_out()\n    tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=words, index=[f'Document_{i+1}' for i in range(len(documents))])\n    \n    return tfidf_df"}
{"task_id": "BigCodeBench/335", "solution": "import collections\nfrom queue import PriorityQueue\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(string_length=100):\n    \"\"\"\n    Create a random string of a given length from a predefined list of letters and count the frequency \n    of each letter, returning an ordered dictionary sorted by frequency in descending order.\n\n    Parameters:\n    - string_length (int, optional): The length of the random string to be generated. Default is 100.\n\n    Returns:\n    - collections.OrderedDict: An ordered dictionary where keys are letters and values are \n      their frequencies in the generated string, sorted in descending order of frequency.\n    \"\"\"\n    # Generate a random string\n    random_string = ''.join(random.choices(LETTERS, k=string_length))\n    \n    # Count the frequency of each letter\n    freq_counter = collections.Counter(random_string)\n    \n    # Convert the counter to a PriorityQueue for sorting by frequency\n    pq = PriorityQueue()\n    for letter, freq in freq_counter.items():\n        pq.put((-freq, letter))  # Negate frequency for max heap behavior\n    \n    # Convert PriorityQueue back to an OrderedDict sorted by frequency\n    ordered_dict = collections.OrderedDict()\n    while not pq.empty():\n        freq, letter = pq.get()\n        ordered_dict[letter] = -freq  # Negate back to original frequency\n    \n    return ordered_dict"}
{"task_id": "BigCodeBench/336", "solution": "import re\nimport os\nfrom pathlib import Path\ndef task_func(pattern, directory, extensions):\n    \"\"\"\n    Find all files in a specific directory that contain a regex pattern in their contents in a case insensitive manner.\n    \n    Parameters:\n    pattern (str): The regex pattern to match.\n    directory (str): The directory to search in.\n    extensions (list): The file extensions to consider. \n    \n    Returns:\n    list: A list of absolute file paths that contain the pattern.\n    \"\"\"\n    matched_files = []\n    for extension in extensions:\n        # Use glob to find files with specific extensions\n        for file_path in glob.glob(os.path.join(directory, extension), recursive=True):\n            # Check if the file is a file and not a directory\n            if Path(file_path).is_file():\n                # Read the file and search for the pattern in a case-insensitive way\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    if re.search(pattern, file.read(), re.IGNORECASE):\n                        matched_files.append(file_path)\n    return matched_files"}
{"task_id": "BigCodeBench/337", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col):\n    # Check if the value column contains numeric values\n    if not pd.api.types.is_numeric_dtype(df[value_col]):\n        raise TypeError(f\"The '{value_col}' column must contain numeric values.\")\n    \n    # Group the data and calculate mean and standard deviation for error bars\n    grouped = df.groupby(group_col)[value_col].agg(['mean', 'std'])\n    \n    # Unique groups\n    unique_groups = df[group_col].nunique()\n    color_cycle = itertools.cycle(COLORS)  # Cycle through colors if there are more groups than colors\n    \n    fig, ax = plt.subplots()\n    for i, (name, group) in enumerate(grouped.groupby(level=0)):\n        color = next(color_cycle)  # Get the next color\n        ax.bar(name, group['mean'], yerr=group['std'], color=color, label=color)\n    \n    ax.set_title(f\"Bar chart of {value_col} by {group_col}\")\n    ax.set_xlabel(group_col)\n    ax.set_ylabel(value_col)\n    ax.legend(title='Colors')\n    \n    return ax"}
{"task_id": "BigCodeBench/338", "solution": "import random\nimport string\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(elements, seed=100):\n    random.seed(seed)  # Set the seed for reproducibility\n    \n    # Generate formatted strings with random alphanumeric patterns\n    formatted_elements = ['%' + ''.join(random.choices(string.ascii_letters + string.digits, k=5)) + '%' for _ in elements]\n    \n    # Concatenate all formatted strings to count each character\n    all_chars = ''.join(formatted_elements)\n    \n    # Count occurrences of each character\n    counts = Counter(all_chars)\n    \n    # Prepare data for histogram\n    unique_chars = list(counts.keys())\n    char_counts = list(counts.values())\n    \n    # Plot histogram\n    fig, ax = plt.subplots()\n    ax.bar(unique_chars, char_counts)\n    ax.set_xlabel('Characters')\n    ax.set_ylabel('Occurrences')\n    ax.set_title('Character Occurrences in Formatted Strings')\n    \n    return formatted_elements, ax, dict(counts)"}
{"task_id": "BigCodeBench/339", "solution": "import json\nimport urllib.parse\nimport hmac\nimport hashlib\ndef task_func(req_data, secret_key):\n    \"\"\"\n    Signs the specified request data with a secret key using HMAC SHA256, then URL encodes the signature and replace spaces with '+'.\n    \"\"\"\n    if not isinstance(req_data, dict):\n        raise TypeError(\"Request data must be a dictionary.\")\n    \n    # Convert dict to json string\n    json_data = json.dumps(req_data, separators=(',', ':'))  # Using separators to avoid extra spaces\n    # Encode the data to bytes, sign it, and decode back to str\n    signature = hmac.new(secret_key.encode(), json_data.encode(), hashlib.sha256).digest()\n    # Encode the signature to base64 and then to url safe string\n    encoded_signature = urllib.parse.quote_plus(base64.b64encode(signature))\n    \n    return encoded_signature"}
{"task_id": "BigCodeBench/340", "solution": "import json\nimport hashlib\nimport blake3\ndef task_func(req_data):\n    # Serialize the request data to JSON string\n    json_data = json.dumps(req_data, sort_keys=True)\n    \n    # Hash the JSON string with BLAKE3\n    blake3_hasher = blake3.blake3()\n    blake3_hasher.update(json_data.encode())\n    blake3_hash_bytes = blake3_hasher.digest()\n    \n    # Convert BLAKE3 hash to hexadecimal\n    blake3_hash_hex = blake3_hash_bytes.hex()\n    \n    # Generate an MD5 hash of the BLAKE3 hash (for demonstration)\n    md5_hasher = hashlib.md5()\n    md5_hasher.update(blake3_hash_hex.encode())\n    md5_hash_hex = md5_hasher.hexdigest()\n    \n    return blake3_hash_hex, md5_hash_hex"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n    if not isinstance(df, pd.DataFrame) or df.empty or col not in df.columns:\n        raise ValueError(\"Input must be a non-empty DataFrame with the specified column.\")\n    \n    # Create a figure and a set of subplots\n    fig, axs = plt.subplots(2, 1, figsize=(10, 8), sharex=True)\n    \n    # Plot histogram with kernel density estimate\n    if df[col].dtype.kind in 'bifc':  # Check if the column is numeric\n        sns.histplot(data=df, x=col, kde=True, ax=axs[0])\n    else:  # If the data is categorical\n        sns.countplot(data=df, x=col, ax=axs[0])\n    \n    axs[0].set_title('Histogram with KDE')\n    \n    # Plot box plot\n    sns.boxplot(data=df, x=col, ax=axs[1])\n    axs[1].set_title('Box Plot')\n    \n    # Tight layout to prevent overlap\n    plt.tight_layout()\n    \n    return fig"}
{"task_id": "BigCodeBench/342", "solution": "import string\nimport random\nimport re\ndef task_func(elements, pattern, seed=100):\n    \"\"\"\n    Replace each character in each element of the Elements list with a random \n    character and format the element into a pattern \"%{0}%\", where {0} is the\n    replaced element. Finally, concatenate all the formatted elements into a \n    single string and search for the regex pattern specified in the parameter \n    pattern. Return the true or false value based on the search result.\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Replace characters in each element and format\n    replaced_elements = ['%' + ''.join(random.choice(string.ascii_letters) for _ in elem) + '%' for elem in elements]\n    \n    # Concatenate all formatted elements\n    concatenated = ''.join(replaced_elements)\n    \n    # Search for the regex pattern\n    search_result = bool(re.search(pattern, concatenated))\n    \n    return replaced_elements, search_result\npattern = \".*\""}
{"task_id": "BigCodeBench/343", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nCOLORS = ['r', 'g', 'b', 'y', 'm']\ndef task_func(df, col, title=None):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"DataFrame cannot be empty.\")\n    if col not in df.columns:\n        raise ValueError(f\"Column '{col}' not found in DataFrame.\")\n\n    # Get the value counts for the specified column\n    value_counts = df[col].value_counts()\n\n    # Create a pie chart\n    fig, ax = plt.subplots()\n    ax.pie(value_counts, labels=value_counts.index, colors=COLORS, autopct='%1.1f%%')\n\n    # Set the title if provided\n    if title:\n        ax.set_title(title)\n\n    return ax"}
{"task_id": "BigCodeBench/344", "solution": "import os\nimport shutil\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Raises:\n    ValueError: If the source folder does not exist.\n    Exception: If an error occurs while deleting the source folder.\n    \"\"\"\n    # Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    \n    # Create backup directory if it doesn't exist\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    \n    # Create a timestamp for backup folder name\n    timestamp = os.path.basename(src_folder) + '_' + datetime.datetime.now().strftime('%Y%m%d_%H%M%S')\n    backup_folder = os.path.join(backup_dir, timestamp)\n    \n    # Perform backup\n    try:\n        shutil.copytree(src_folder, backup_folder)\n    except Exception as e:\n        print(f\"Backup failed: {e}\")\n        return False\n    \n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        print(f\"Deletion of source folder failed: {e}\")\n        return False\n    \n    return True"}
{"task_id": "BigCodeBench/345", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col1, col2):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"DataFrame cannot be empty.\")\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"DataFrame must contain {col1} and {col2} columns.\")\n    if not (df[col1].dtype in ['int64', 'float64'] and df[col2].dtype in ['int64', 'float64']):\n        raise TypeError(\"Both columns must contain numeric data.\")\n\n    # Draw scatter plot with regression line\n    plot = sns.lmplot(x=col1, y=col2, data=df, ci=None)\n    \n    # Return the axes object\n    return plot.ax"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run a Python script as a process with predefined arguments. By default, waits for the process to complete.\n    If wait is False, the function returns None.\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise ValueError(f\"The script {script_path} does not exist.\")\n    \n    try:\n        # Prepare the command to run the script with arguments\n        command = [sys.executable, script_path] + list(args)\n        process = subprocess.Popen(command)\n        \n        if wait:\n            # Wait for the process to complete and return the return code\n            return process.wait()\n        else:\n            # If not waiting, return None immediately\n            return None\n    except subprocess.CalledProcessError as e:\n        # Re-raise the exception with the message\n        raise subprocess.CalledProcessError(e.returncode, e.cmd, output=e.output)"}
{"task_id": "BigCodeBench/347", "solution": "import pandas as pd\nimport re\nPATTERN = r\"([a-fA-F\\d]{32})\"\ndef task_func(df, column):\n    \"\"\"\n    Find all matches of the regex pattern in a Pandas DataFrame column and count the occurrence of any unique match in the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame.\n    column (str): The column in which to find the pattern.\n\n    Returns:\n    Series: A pandas Series with counts of each unique match.\n\n    Raises:\n    KeyError: If the \"column\" does not exist in input \"df\".\n    \"\"\"\n    if column not in df.columns:\n        raise KeyError(f\"Column '{column}' does not exist in the DataFrame.\")\n    \n    # Find all matches in the specified column\n    matches = df[column].apply(lambda x: re.findall(PATTERN, x))\n    \n    # Flatten the list of lists into a single list\n    flattened_matches = [match for sublist in matches for match in sublist]\n    \n    # Count the occurrence of each unique match\n    match_counts = pd.Series(flattened_matches).value_counts()\n    \n    return match_counts"}
{"task_id": "BigCodeBench/348", "solution": "import subprocess\nimport os\nimport signal\nimport time\ndef task_func(process_name: str) -> int:\n    \"\"\"\n    Stops all running processes with a specific name.\n\n    Parameters:\n    process_name (str): The name of the processes to be stopped.\n\n    Returns:\n    int: The number of processes stopped. If no processes are found, returns 0.\n    \"\"\"\n    # Find all processes by name\n    p = subprocess.Popen(['pgrep', '-f', process_name], stdout=subprocess.PIPE)\n    out, err = p.communicate()\n    pids = out.decode('utf-8').split('\\n')[:-1]  # Exclude the last empty line\n\n    # Send SIGTERM to each process\n    stopped_processes = 0\n    for pid in pids:\n        try:\n            os.kill(int(pid), signal.SIGTERM)\n            stopped_processes += 1\n        except ProcessLookupError:\n            # This error is raised if the process is already gone\n            pass\n\n    # Wait for a moment to allow processes to terminate\n    time.sleep(1)\n\n    return stopped_processes"}
{"task_id": "BigCodeBench/349", "solution": "import pandas as pd\nimport random\ndef task_func(product_list, categories):\n    \"\"\"\n    Create a sales report for a list of products in different categories.\n    The report includes the quantity sold and revenue generated for each product.\n    \"\"\"\n    # Initialize an empty list to hold the sales data\n    sales_data = []\n    \n    # For each product, generate sales data\n    for product in product_list:\n        # Randomly select a category for the product\n        category = random.choice(categories)\n        \n        # Randomly determine the quantity sold (1 to 100)\n        quantity_sold = random.randint(1, 100)\n        \n        # Randomly determine the price (10 to 100), thus revenue = quantity * price\n        price = random.randint(10, 100)\n        revenue = quantity_sold * price\n        \n        # Append the data to the sales_data list\n        sales_data.append([product, category, quantity_sold, revenue])\n    \n    # Convert the list to a pandas DataFrame\n    report = pd.DataFrame(sales_data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue'])\n    \n    return report"}
{"task_id": "BigCodeBench/350", "solution": "import subprocess\nimport os\nimport shutil\nfrom glob import glob\ndef task_func(src_folder, dst_folder):\n    \"\"\"Compress all files in the specified source folder and move the compressed files to a destination folder.\n    This operation is executed as a background process using the 'gzip' command.\n    \"\"\"\n    # Ensure destination folder exists\n    if not os.path.exists(dst_folder):\n        os.makedirs(dst_folder)\n    \n    failed_files = []\n    all_files = glob(os.path.join(src_folder, '*'))\n    \n    for file in all_files:\n        # Compress the file\n        try:\n            subprocess.check_call(['gzip', file])\n            compressed_file = file + '.gz'\n            # Move the compressed file to the destination folder\n            shutil.move(compressed_file, dst_folder)\n        except subprocess.CalledProcessError:\n            failed_files.append(os.path.basename(file))\n            continue\n\n    # Check if any files failed\n    success = len(failed_files) == 0\n    message = 'All files compressed and moved successfully.' if success else f'Some files failed to compress or move: {\", \".join(failed_files)}'\n    \n    return {'success': success, 'message': message, 'failed_files': failed_files}"}
{"task_id": "BigCodeBench/351", "solution": "import pandas as pd\nimport random\ndef task_func(product_list, categories, min_value=10, max_value=100):\n    \"\"\"\n    The function generates a sales report with random data for each product in different categories.\n    \"\"\"\n    sales_data = []\n    for product in product_list:\n        category = random.choice(categories)\n        quantity_sold = random.randint(min_value, max_value)\n        revenue = random.randint(min_value*100, max_value*100)  # Assuming revenue is 100 times the quantity for simplicity\n        sales_data.append([product, category, quantity_sold, revenue])\n\n    report = pd.DataFrame(sales_data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue'])\n    return report"}
{"task_id": "BigCodeBench/352", "solution": "import matplotlib.pyplot as plt\nfrom collections import Counter\ndef task_func(text_dict, word_keys, top_k=2):\n    # Ensure top_k is not negative\n    if top_k < 0:\n        raise ValueError(\"top_k must be a non-negative integer.\")\n    \n    # Calculate frequencies for the specified words, defaulting to 0 if not found\n    word_frequencies = {word: text_dict.get(word, 0) for word in word_keys}\n    \n    # Get the top_k most common words\n    top_words = Counter(word_frequencies).most_common(top_k)\n    \n    # Prepare data for bar chart\n    words = [word for word, freq in top_words]\n    frequencies = [freq for word, freq in top_words]\n    \n    # Create a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(words, frequencies)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of Specified Words')\n    \n    # Return the Axes object and the frequencies of the top_k words\n    return ax, dict(top_words)"}
{"task_id": "BigCodeBench/353", "solution": "import pandas as pd\nimport random\ndef task_func(product_list, categories, min_value=10, max_value=100):\n    \"\"\"\n    The function generates a sales report with random data for each product in different categories.\n    \"\"\"\n    sales_data = []\n    for product in product_list:\n        for category in categories:\n            quantity_sold = random.randint(min_value, max_value)\n            revenue = random.randint(min_value, max_value)\n            total_revenue = quantity_sold * revenue\n            sales_data.append([product, category, quantity_sold, revenue, total_revenue])\n    \n    # Convert the list to a DataFrame\n    df = pd.DataFrame(sales_data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue', 'Total Revenue'])\n    \n    return df"}
{"task_id": "BigCodeBench/354", "solution": "import collections\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(sentences_dict, word_keys):\n    \"\"\"\n    Calculate the occurrence of certain words in a collection of sentences and return a bar chart.\n\n    Parameters:\n    sentences_dict (dict): The dictionary containing sentences.\n    word_keys (list): The list of words.\n\n    Returns:\n    - matplotlib.axes._axes.Axes: Axes object of the bar chart displaying the frequencies.\n    \"\"\"\n    # Flatten the sentences into a single string and split into words\n    all_words = ' '.join(sentences_dict.values()).split()\n    \n    # Count occurrences of each word\n    word_count = collections.Counter(all_words)\n    \n    # Filter counts for the specified words\n    filtered_counts = {word: word_count[word] for word in word_keys if word in word_count}\n    \n    # Convert to DataFrame for plotting\n    df = pd.DataFrame(list(filtered_counts.items()), columns=['Words', 'Occurrences'])\n    \n    # Plotting\n    ax = df.plot(kind='bar', x='Words', y='Occurrences', figsize=(10, 6), legend=False)\n    \n    plt.title('Word Occurrences in Sentences')\n    plt.xlabel('Words')\n    plt.ylabel('Occurrences')\n    plt.xticks(rotation=0)\n    \n    return ax\nsentences_dict = {'Sentence1': 'the quick brown fox', 'Sentence2': 'jumps over the lazy dog', 'Sentence3': 'the dog is brown'}\nword_keys = ['the', 'dog']"}
{"task_id": "BigCodeBench/355", "solution": "import numpy as np\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy.signal import get_window\ndef task_func(amplitude, frequency, time):\n    # Generate the cosine and sine components\n    cosine_component = amplitude * np.cos(2 * np.pi * frequency * time)\n    sine_component = amplitude * np.sin(2 * np.pi * frequency * time)\n    \n    # Combine them to get the complex wave\n    complex_wave = cosine_component + 1j * sine_component\n    \n    # Apply the Hann window to reduce edge effects\n    window = get_window('hann', len(time))\n    complex_wave_windowed = complex_wave * window\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(time, complex_wave_windowed.real, label='Real part')\n    ax.plot(time, complex_wave_windowed.imag, label='Imaginary part')\n    ax.set_title('Complex Wave with Hann Window')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.legend()\n    \n    return complex_wave_windowed, fig, ax"}
{"task_id": "BigCodeBench/356", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport cmath\ndef task_func(x, y):\n    if not isinstance(x, np.ndarray) or not isinstance(y, np.ndarray):\n        raise TypeError(\"Both x and y must be numpy.ndarray\")\n    if len(x) != len(y):\n        raise ValueError(\"x and y must have the same length\")\n\n    # Ensure x and y are 1D and create a grid for the complex function\n    x, y = np.meshgrid(x, y)\n    z = x + 1j * y  # Create a complex number from x and y\n\n    # Calculate the phase of the complex function\n    Z_phase = np.angle(z, deg=False)  # phase in radians\n\n    # Plot the phase\n    fig, ax = plt.subplots()\n    cax = ax.imshow(Z_phase, extent=[x.min(), x.max(), y.min(), y.max()], origin='lower',\n                    cmap='hsv')  # hsv colormap shows phase nicely\n    fig.colorbar(cax)  # Add a colorbar to show the phase values\n\n    plt.title('Phase of Complex Function')\n    plt.xlabel('Real part')\n    plt.ylabel('Imaginary part')\n\n    return ax, Z_phase"}
{"task_id": "BigCodeBench/357", "solution": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(x):\n    if not isinstance(x, np.ndarray):\n        raise TypeError(\"Input 'x' must be a numpy.ndarray.\")\n    \n    # Real part of the complex distribution (Gaussian centered at 0 with std=1)\n    real_part = norm.pdf(x, loc=0, scale=1)\n    \n    # Imaginary part of the complex distribution (Gaussian centered at 2 with std=2)\n    imag_part = norm.pdf(x, loc=2, scale=2)\n    \n    # Combine real and imaginary parts to form a complex distribution\n    complex_distribution = real_part + 1j * imag_part\n    \n    # Plotting the distribution (real and imaginary parts separately for visualization)\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.plot(x, real_part, label='Real part')\n    plt.title('Real part of the complex distribution')\n    plt.xlabel('x')\n    plt.ylabel('Density')\n    plt.legend()\n    \n    plt.subplot(1, 2, 2)\n    plt.plot(x, imag_part, label='Imaginary part')\n    plt.title('Imaginary part of the complex distribution')\n    plt.xlabel('x')\n    plt.ylabel('Density')\n    plt.legend()\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return complex_distribution"}
{"task_id": "BigCodeBench/358", "solution": "import itertools\nimport json\ndef task_func(json_list, r):\n    try:\n        # Parse JSON string into Python dictionary\n        data = json.loads(json_list)\n        \n        # Check if 'number_list' key exists in the dictionary\n        if 'number_list' not in data:\n            raise ValueError(\"Input JSON does not contain 'number_list' key.\")\n        \n        # Get the number list\n        number_list = data['number_list']\n        \n        # Validate that the number list is not empty\n        if not number_list:\n            raise ValueError(\"The 'number_list' is empty.\")\n        \n        # Generate all combinations of r elements from the number list\n        combinations = list(itertools.combinations(number_list, r))\n        \n        return combinations\n    \n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON input.\")\n    except Exception as e:\n        raise e"}
{"task_id": "BigCodeBench/359", "solution": "import matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(data_dict, data_keys):\n    \"\"\"\n    Calculate the correlation between two data series and return a scatter plot along with the correlation coefficient.\n    \n    Parameters:\n    data_dict (dict): The dictionary containing data. Keys should match those provided in data_keys.\n    data_keys (list): The list of keys (length of 2) used to access data in data_dict for correlation.\n    \n    Returns:\n    tuple: \n        - float: The correlation coefficient.\n        - Axes: The scatter plot of the two data series.\n    \"\"\"\n    if len(data_keys) != 2:\n        raise ValueError(\"data_keys must contain exactly 2 elements.\")\n    \n    x = data_dict[data_keys[0]]\n    y = data_dict[data_keys[1]]\n    \n    # Calculate the correlation coefficient\n    correlation = stats.pearsonr(x, y)[0]\n    \n    # Create a scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.set_xlabel(data_keys[0])\n    ax.set_ylabel(data_keys[1])\n    ax.set_title(f'Scatter plot with correlation: {correlation:.4f}')\n    \n    return correlation, ax"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_location, sheet_name):\n    if not os.path.exists(file_location):\n        raise FileNotFoundError(f\"The file {file_location} does not exist.\")\n    \n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except KeyError:\n        raise ValueError(f\"The sheet {sheet_name} does not exist in the workbook.\")\n    \n    # Calculate mean and standard deviation\n    stats = df.describe().T[['mean', 'std']]\n    \n    # Create a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(stats.index, stats['mean'], yerr=stats['std'], capsize=10)\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n    \n    return stats.to_dict(), fig"}
{"task_id": "BigCodeBench/361", "solution": "import pandas as pd\nimport logging\nimport os\ndef task_func(sheet_name, excel_file_location=\"test.xlsx\", csv_file_location=\"test.csv\"):\n    try:\n        # Read data from Excel file\n        df = pd.read_excel(excel_file_location, sheet_name=sheet_name)\n        logging.info(f\"Successfully loaded data from {sheet_name} in {excel_file_location}\")\n\n    except FileNotFoundError:\n        logging.error(f\"File not found: {excel_file_location}\")\n        raise\n\n    except ValueError:\n        logging.error(f\"Sheet {sheet_name} not found in {excel_file_location}\")\n        raise\n\n    # Save DataFrame to CSV\n    df.to_csv(csv_file_location, index=False)\n    logging.info(f\"Data saved to {csv_file_location}\")\n\n    # Calculate the sum of each column\n    column_sums = df.sum().to_dict()\n    logging.info(\"Calculated sum of each column\")\n\n    return column_sums"}
{"task_id": "BigCodeBench/362", "solution": "import pandas as pd\nimport os\ndef task_func(original_file_location=\"test.xlsx\", new_file_location=\"new_test.xlsx\", sheet_name=\"Sheet1\"):\n    \"\"\"\n    Copies data from an Excel spreadsheet into a new Excel file, then reads the new Excel file and returns its contents.\n    \n    ... [same docstring as before] ...\n    \"\"\"\n    if not os.path.exists(original_file_location):\n        raise FileNotFoundError(f\"The file {original_file_location} does not exist.\")\n    \n    try:\n        df = pd.read_excel(original_file_location, sheet_name=sheet_name)\n    except KeyError:\n        raise ValueError(f\"The sheet {sheet_name} does not exist in the workbook.\")\n    \n    df.to_excel(new_file_location, index=False)\n    \n    # Reading the new file\n    new_df = pd.read_excel(new_file_location, sheet_name=sheet_name)\n    \n    return new_df"}
{"task_id": "BigCodeBench/363", "solution": "from multiprocessing import Pool\nimport math\ndef calculate_factorial(number: int) -> tuple:\n    \"\"\"Calculate a factorial for a single number.\"\"\"\n    return number, math.factorial(number)\ndef task_func(numbers: list) -> dict:\n    \"\"\"\n    Calculate factorials for a list of numbers in parallel using multiprocessing.\n    \"\"\"\n    if not all(isinstance(n, int) and n >= 0 for n in numbers):\n        raise ValueError(\"All elements in the input list must be non-negative integers.\")\n    \n    with Pool() as p:\n        results = p.map(calculate_factorial, numbers)\n    \n    return dict(results)"}
{"task_id": "BigCodeBench/364", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nFEATURES = ['feature '+str(i) for i in range(1, 11)]\nTARGET = 'target'\ndef task_func(df):\n    \"\"\"\n    Train a linear regression model on a given DataFrame.\n    \n    Parameters:\n    df (DataFrame): The DataFrame with features and target.\n    \n    Returns:\n    LinearRegression: The trained linear regression model.\n    \n    Raises:\n    ValueError: If input df is not a DataFrame.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    \n    # Split the dataset into features (X) and target (y)\n    X = df[FEATURES]\n    y = df[TARGET]\n    \n    # Split the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    # Initialize the Linear Regression model\n    model = LinearRegression()\n    \n    # Train the model\n    model.fit(X_train, y_train)\n    \n    return model"}
{"task_id": "BigCodeBench/365", "solution": "from collections import Counter\nimport json\nimport random\nWORDS = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\ndef task_func(n, file_name, seed=77):\n    \"\"\"\n    Create a json file with a number of n randomly selected words from a constant list named WORDS.\n    \n    Parameters:\n    n (int): The number of words to select from the list.\n    file_name (str): The name of the json file to be generated.\n    seed (int, Optional): The seed for the random number generator. Defaults to 77.\n    \n    Returns:\n    str: The name of the json file generated.\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Randomly select n words from the list\n    selected_words = random.sample(WORDS, n)\n    \n    # Count the occurrence of each word (though each is unique here, it's a demonstration for Counter)\n    word_counts = Counter(selected_words)\n    \n    # Write the counts to a json file\n    with open(file_name, 'w') as f:\n        json.dump(dict(word_counts), f)\n    \n    return file_name"}
{"task_id": "BigCodeBench/366", "solution": "import matplotlib.pyplot as plt\nimport random\nCOLORS = ['#00bfbf', '#000000', '#0000ff']\ndef task_func(number_list, bins):\n    \"\"\"\n    Create a histogram subplot of a list of numbers.\n    \"\"\"\n    # Randomly select a color\n    color = random.choice(COLORS)\n    \n    # Create a new figure and a subplot\n    fig, ax = plt.subplots()\n    \n    # Create the histogram\n    ax.hist(number_list, bins=bins, color=color, edgecolor='black')\n    \n    # Set plot title and labels\n    ax.set_title('Histogram')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n    \n    # Return the axes object\n    return ax"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n    if not all(isinstance(act, datetime) for act in activities):\n        raise TypeError(\"All activities must be datetime objects.\")\n    \n    # Group activities by the day of the week\n    day_activities = defaultdict(int)\n    for act in activities:\n        day_activities[act.weekday()] += 1\n    \n    # Map weekday numbers to their names\n    days_of_week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.bar(days_of_week, day_activities.values())\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n    plt.tight_layout()  # Adjust layout to make room for the rotated labels\n    \n    return ax"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed: int = 100) -> str:\n    \"\"\"\n    Moves a random file from the source directory to the specified destination directory.\n    \n    Parameters:\n    - src_dir (str): The path of the source directory from which a file will be randomly selected and moved.\n    - dest_dir (str): The path of the destination directory where the file will be moved.\n    - seed (int, Optional): The seed for the random number generator. Defaults to 100.\n    \n    Returns:\n    str: The name of the file moved. Format: 'filename.extension' (e.g., 'file1.txt').\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Ensure the source directory exists\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(f\"Source directory {src_dir} not found.\")\n    \n    # Get a list of files in the source directory\n    files = [f for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f))]\n    \n    # Check if there are files in the source directory\n    if not files:\n        return \"No files in the source directory.\"\n    \n    # Select a random file\n    selected_file = random.choice(files)\n    \n    # Construct the full paths for the source and destination files\n    src_file_path = os.path.join(src_dir, selected_file)\n    dest_file_path = os.path.join(dest_dir, selected_file)\n    \n    # Move the file\n    shutil.move(src_file_path, dest_file_path)\n    \n    return selected_file"}
{"task_id": "BigCodeBench/369", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(l):\n    \"\"\"\n    Draw a histogram of the given array with a Gaussian fit.\n\n    Parameters:\n    l (numpy array): The input array.\n\n    Returns:\n    ax (matplotlib.axes._axes.Axes): Axes object with the plot.\n    \"\"\"\n    # Calculate the Gaussian fit parameters\n    mu, std = stats.norm.fit(l)\n    \n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(l, bins='auto', density=True, alpha=0.6, color='b')\n    \n    # Create a normal distribution curve with the fit parameters\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Set plot title with rounded fit results\n    ax.set_title(f'Fit results: mu = {mu:.2f},  std = {std:.2f}')\n    \n    return ax"}
{"task_id": "BigCodeBench/370", "solution": "import os\nimport re\nimport json\nimport glob\ndef task_func(directory_path: str) -> list:\n    if not os.path.isdir(directory_path):\n        raise FileNotFoundError(f\"The directory {directory_path} does not exist.\")\n    \n    processed_files = []\n    json_files = glob.glob(directory_path + \"/*.json\")\n    \n    for file_path in json_files:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            data = file.read()\n            # Escape double quotes in strings, ensuring we don't interfere with JSON structure\n            escaped_data = re.sub(r'(?<!\\\\)\"', r'\\\"', data)\n        \n        with open(file_path, 'w', encoding='utf-8') as file:\n            # Since we're directly writing back, ensure the JSON is valid; re-loading and then writing\n            file.write(json.dumps(json.loads(escaped_data)))\n        \n        processed_files.append(file_path)\n    \n    return processed_files"}
{"task_id": "BigCodeBench/371", "solution": "from sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(l):\n    \"\"\"\n    Scale the input field to the range [0, 1] and display it as a DataFrame.\n\n    Parameters:\n    l (numpy array): The input array.\n\n    Returns:\n    DataFrame: A pandas DataFrame of the scaled array.\n\n    Requirements:\n    - numpy\n    - sklearn.preprocessing\n    - pandas\n\n    Note:\n    - The return DataFrame uses 'Scaled Values' as the column name.\n    \"\"\"\n\n    # Initialize the scaler\n    scaler = MinMaxScaler()\n\n    # Fit and transform the data\n    scaled_l = scaler.fit_transform(l.reshape(-1, 1))\n\n    # Convert the scaled data to a DataFrame\n    df = pd.DataFrame(scaled_l, columns=['Scaled Values'])\n\n    return df"}
{"task_id": "BigCodeBench/372", "solution": "import re\nimport glob\nfrom docx import Document\ndef task_func(directory_path: str) -> int:\n    \"\"\"\n    Processes all Word (.docx) files in the provided directory, searching for double quotes in the text \n    and adding a backslash before each double quote to \"protect\" it.\n    \n    Parameters:\n    - directory_path (str): Path to the directory containing .docx files to be processed.\n    \n    Returns:\n    - int: Number of .docx files processed.\n    \"\"\"\n    processed_count = 0\n    \n    # Find all .docx files in the directory\n    docx_files = glob.glob(directory_path + '/*.docx')\n    \n    for doc_file in docx_files:\n        # Load the .docx file\n        doc = Document(doc_file)\n        \n        for para in doc.paragraphs:\n            # Replace double quotes with backslash-escaped double quotes\n            para.text = re.sub(r'\"', r'\\\"', para.text)\n        \n        for table in doc.tables:\n            for row in table.rows:\n                for cell in row.cells:\n                    for paragraph in cell.paragraphs:\n                        # Apply the same replacement to table cell texts\n                        paragraph.text = re.sub(r'\"', r'\\\"', paragraph.text)\n        \n        # Save the modified document\n        doc.save(doc_file)\n        processed_count += 1\n    \n    return processed_count"}
{"task_id": "BigCodeBench/373", "solution": "import numpy as np\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\ndef quadratic_curve(x, a, b, c):\n    \"\"\"\n    A quadratic curve function in the form of y = ax^2 + bx + c.\n    \"\"\"\n    return a * x**2 + b * x + c\ndef task_func(l, x_data, plot=False):\n    \"\"\"\n    Adjust a quadratic curve to the specified data and return the parameters and fitted values.\n    \"\"\"\n    # Curve fitting\n    params, _ = curve_fit(quadratic_curve, x_data, l)\n    \n    # Generate fitted values\n    fitted_values = quadratic_curve(x_data, *params)\n    \n    # Plotting if required\n    if plot:\n        plt.figure(figsize=(8, 5))\n        plt.plot(x_data, l, 'bo', label='data')\n        plt.plot(x_data, fitted_values, 'r-', label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(params))\n        plt.legend()\n        ax = plt.gca()\n        return params, fitted_values, ax\n    \n    return params, fitted_values"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook, Workbook"}
{"task_id": "BigCodeBench/375", "solution": "from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(l):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on the given array and record the first two main components.\n\n    Parameters:\n    l (numpy array): The input array.\n\n    Returns:\n    ax (matplotlib.axes._axes.Axes): Axes object of the generated plot\n    \"\"\"\n    # Perform PCA\n    pca = PCA(n_components=2)\n    principal_components = pca.fit_transform(l)\n\n    # Create a scatter plot of the first two principal components\n    fig, ax = plt.subplots()\n    ax.scatter(principal_components[:, 0], principal_components[:, 1])\n\n    # Set plot title and labels\n    ax.set_title('PCA Result')\n    ax.set_xlabel('First Principal Component')\n    ax.set_ylabel('Second Principal Component')\n\n    # Return the axes object\n    return ax"}
{"task_id": "BigCodeBench/376", "solution": "import nltk\nimport re\nfrom collections import Counter\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(text):\n    \"\"\"\n    Calculate the frequency of continuous words in a text string.\n    \"\"\"\n    # Remove punctuation and convert to lowercase\n    text_clean = re.sub(r'[^\\w\\s]', '', text).lower()\n    \n    # Split the text into words\n    words = text_clean.split()\n    \n    # Remove stopwords\n    words_filtered = [word for word in words if word not in STOPWORDS]\n    \n    # Calculate the frequency of each word\n    word_freq = Counter(words_filtered)\n    \n    return word_freq"}
{"task_id": "BigCodeBench/377", "solution": "from texttable import Texttable\nimport os\nimport psutil\ndef task_func():\n    \"\"\"\n    Generates a table displaying the system's CPU usage, memory usage, and disk usage.\n\n    Returns:\n        A string representation of a table with the columns of 'Item' and 'Value',\n        and the following system information:\n        - CPU Usage (%)\n        - Memory Usage (%)\n        - Disk Usage (%)\n    \"\"\"\n    # Get system usage statistics\n    cpu_usage = psutil.cpu_percent(interval=1)\n    memory_usage = psutil.virtual_memory().percent\n    disk_usage = psutil.disk_usage('/').percent  # Assuming '/' is the root directory\n    \n    # Create a Texttable\n    table = Texttable()\n    table.set_deco(Texttable.HEADER)\n    table.set_cols_align([\"l\", \"r\"])\n    \n    # Define table headers and data\n    headers = ['Item', 'Value']\n    data = [\n        ['CPU Usage (%)', cpu_usage],\n        ['Memory Usage (%)', memory_usage],\n        ['Disk Usage (%)', disk_usage]\n    ]\n    \n    # Add data to the table\n    table.add_rows([headers] + data)\n    \n    # Generate and return the table as a string\n    return table.draw()"}
{"task_id": "BigCodeBench/378", "solution": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\ndef task_func(data_dir='./data/'):\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory {data_dir} does not exist.\")\n    \n    csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in the directory {data_dir}.\")\n    \n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    \n    for file in csv_files:\n        try:\n            df = pd.read_csv(file)\n            if df.empty:\n                raise pd.errors.EmptyDataError(f\"Encountered an empty CSV file: {file}\")\n            table.add_row([os.path.basename(file), df.shape[0], df.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            raise e\n    \n    return table.draw()"}
{"task_id": "BigCodeBench/379", "solution": "import pandas as pd\nimport numpy as np\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length):\n    \"\"\"\n    Generate a Pandas DataFrame with specified length and random data and then record the data.\n\n    Parameters:\n    length (int): The length of the DataFrame to be generated.\n\n    Returns:\n    DataFrame: A pandas DataFrame with random data.\n\n    Example:\n    >>> np.random.seed(0)\n    >>> df = task_func(5)\n    >>> df.shape\n    (5, 5)\n    \"\"\"\n    # Generate random data\n    data = np.random.rand(length, len(COLUMNS))\n    \n    # Create DataFrame\n    df = pd.DataFrame(data, columns=COLUMNS)\n    \n    return df"}
{"task_id": "BigCodeBench/380", "solution": "import re\nimport os\nimport shutil\ndef task_func(directory):\n    \"\"\"\n    Arrange files in a directory by their extensions. Create a new directory for each extension and move the \n    files to the corresponding directories.\n\n    Parameters:\n    directory (str): The path to the directory.\n\n    Returns:\n    None\n    \"\"\"\n    # Check if the provided directory exists\n    if not os.path.isdir(directory):\n        print(\"Directory does not exist.\")\n        return\n\n    # Iterate over the items in the directory\n    for filename in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, filename)):\n            # Extract the file extension\n            file_extension = re.search(r'\\.(\\w+)$', filename).group(1) if re.search(r'\\.(\\w+)$', filename) else ''\n            \n            # Create a directory for the extension if it doesn't exist\n            extension_dir = os.path.join(directory, file_extension)\n            if not os.path.exists(extension_dir):\n                os.makedirs(extension_dir)\n            \n            # Move the file to the extension directory\n            shutil.move(os.path.join(directory, filename), os.path.join(extension_dir, filename))\n    \n    # Return the list of directories after arranging, for demonstration purposes\n    return os.listdir(directory)"}
{"task_id": "BigCodeBench/381", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_path='arena.csv', target_column='Index', seed=42):\n    # Check if file exists\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    \n    # Load the data\n    try:\n        data = pd.read_csv(file_path)\n    except Exception as e:\n        raise ValueError(\"Error loading data: \", str(e))\n    \n    # Check if target_column exists in the data\n    if target_column not in data.columns:\n        raise ValueError(f\"Target column {target_column} not found in the data.\")\n    \n    # Drop rows with NaN values\n    data.dropna(inplace=True)\n    \n    # Split the data into features (X) and target (y)\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n    \n    # Initialize the random forest classifier\n    clf = RandomForestClassifier(random_state=seed)\n    \n    # Train the model\n    clf.fit(X, y)\n    \n    # Get feature importances\n    importances = clf.feature_importances_\n    \n    # Create a DataFrame for plotting\n    importances_df = pd.DataFrame({'feature': X.columns, 'importance': importances})\n    \n    # Sort the DataFrame by importance\n    importances_df = importances_df.sort_values('importance', ascending=False)\n    \n    # Plotting\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x='importance', y='feature', data=importances_df)\n    plt.title('Feature Importances')\n    plt.xlabel('Importance')\n    plt.ylabel('Feature')\n    ax = plt.gca()  # Get the current axes\n    \n    return ax, importances"}
{"task_id": "BigCodeBench/382", "solution": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(length):\n    \"\"\"\n    Create a normal distribution with a given length, plot its histogram alongside the \n    probability density function, and return the distribution and the plot.\n    \"\"\"\n    # Constants for the normal distribution\n    MU = 0\n    SIGMA = 1\n    \n    # Generate the normal distribution\n    distribution = norm.rvs(MU, SIGMA, size=length)\n    \n    # Create a figure and axis for plotting\n    fig, ax = plt.subplots()\n    \n    # Plot the histogram of the generated distribution\n    ax.hist(distribution, bins='auto', density=True, alpha=0.6, color='b')\n    \n    # Plot the PDF (probability density function) of the normal distribution\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, MU, SIGMA)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Labeling\n    ax.set_title(\"Normal Distribution with MU=0, SIGMA=1\")\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability Density')\n    \n    # Return the distribution and the plot's axis\n    return distribution, ax"}
{"task_id": "BigCodeBench/383", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom textblob import TextBlob\nfrom collections import Counter\ndef task_func(text, n, top_k):\n    \"\"\"\n    Visualize the uppermost K n-grams in a given text string.\n\n    Parameters:\n    text (str): The text string.\n    n (int): The value of n for the n-grams.\n    top_k (int): The number of top n-grams to visualize.\n\n    Returns:\n    None\n    \"\"\"\n    # Tokenize the text into n-grams\n    n_grams = zip(*[text[i:] for i in range(n)])\n    n_grams = [' '.join(gram) for gram in n_grams]\n\n    # Count the frequency of each n-gram\n    counter = Counter(n_grams)\n\n    # Convert the counter to a pandas DataFrame\n    df = pd.DataFrame(list(counter.items()), columns=['n_gram', 'count'])\n    \n    # Sort the DataFrame by count in descending order\n    df = df.sort_values(by='count', ascending=False)\n    \n    # Select the top K n-grams\n    top_k_ngrams = df.head(top_k)\n    \n    # Plotting the top K n-grams\n    plt.figure(figsize=(10, 5))\n    sns.barplot(x='count', y='n_gram', data=top_k_ngrams)\n    plt.title(f'Top {top_k} {n}-grams')\n    plt.xlabel('Frequency')\n    plt.ylabel('N-grams')\n    plt.show()"}
{"task_id": "BigCodeBench/384", "solution": "import collections\nimport random\nimport itertools\nANIMALS = ['Cat', 'Dog', 'Elephant', 'Lion', 'Tiger', 'Bear', 'Giraffe', 'Horse', 'Rabbit', 'Snake', 'Zebra']\ndef task_func(animal_dict, max_count=10, seed=0):\n    random.seed(seed)  # Seed the random number generator for reproducibility\n    \n    # Reverse the dictionary\n    reversed_dict = {animal: [] for animal in ANIMALS}  # Initialize with empty lists\n    for name, animal in animal_dict.items():\n        if animal in reversed_dict:  # Ensure the animal is in our predefined list\n            reversed_dict[animal].append(name)\n    \n    # Count the occurrences of each animal with random count\n    animal_counter = collections.Counter()\n    for animal in ANIMALS:\n        animal_counter[animal] = random.randint(1, max_count)\n    \n    return reversed_dict, animal_counter\nanimal_dict = {'John': 'Cat', 'Alice': 'Dog', 'Bob': 'Elephant', 'Charlie': 'Lion', 'David': 'Tiger', 'Sue': 'Pangolin'}"}
{"task_id": "BigCodeBench/385", "solution": "import matplotlib.pyplot as plt\nfrom collections import Counter\ndef task_func(fruit_dict):\n    \"\"\"\n    Given a constant list of fruits and a dictionary with people's names and their favorite fruit,\n    this function records the frequency of each fruit and plots a bar chart.\n\n    Parameters:\n    fruit_dict (dict): Dictionary with keys as people's names and values as fruit names.\n\n    Returns:\n    dict: A dictionary with fruit names as keys and their counts as values.\n    matplotlib.axes.Axes: The axes object of the plot.\n    \"\"\"\n    # Count the frequency of each fruit\n    fruit_counts = Counter(fruit_dict.values())\n    \n    # Plotting the bar chart\n    fig, ax = plt.subplots()\n    fruit_counts.plot(kind='bar', ax=ax)\n    ax.set_title('Fruit Frequency')\n    ax.set_xlabel('Fruit')\n    ax.set_ylabel('Frequency')\n    \n    # Return the counts and the axes object\n    return fruit_counts, ax"}
{"task_id": "BigCodeBench/386", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length, min_value=0, max_value=100):\n    \"\"\"\n    Randomly generate a pandas DataFrame with specified ranges and length, and calculate the cumulative distribution function (CDF).\n\n    Parameters:\n    length (int): The length of the DataFrame to be generated.\n    min_value (int, optional): The minimum value for random data generation. Default is 0.\n    max_value (int, optional): The maximum value for random data generation. Default is 100.\n\n    Returns:\n    DataFrame: A pandas DataFrame with the calculated cumulative distribution function (CDF).\n\n    Note:\n    - DataFrame columns are defined by the COLUMNS constant.\n    - The function also plots the CDF.\n\n    Requirements:\n    - numpy\n    - pandas\n    - matplotlib.pyplot\n    \"\"\"\n    # Generate random data\n    data = {col: np.random.randint(min_value, max_value, length) for col in COLUMNS}\n    df = pd.DataFrame(data)\n    \n    # Calculate CDF\n    cdf = df.apply(lambda x: x.rank(pct=True))\n    \n    # Plot CDF (optional, for visualization)\n    fig, axs = plt.subplots(len(COLUMNS), 1, figsize=(10, 3*len(COLUMNS)) if len(COLUMNS) > 1 else (10, 3))\n    for i, col in enumerate(COLUMNS):\n        axs[i].plot(cdf[col], marker='o', linestyle='-', color='blue')\n        axs[i].set_title(f'CDF for {col}')\n        axs[i].set_xlabel('Value')\n        axs[i].set_ylabel('Cumulative Probability')\n    plt.tight_layout()\n    plt.show()\n    \n    return cdf"}
{"task_id": "BigCodeBench/387", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nCITIES = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney', 'Paris', 'Berlin', 'Moscow', 'Madrid', 'Rome']\ndef task_func(city_dict, max_range=1000000, seed=0):\n    np.random.seed(seed)\n    \n    # Initialize population dictionary with -1 for cities not in CITIES\n    population_dict = {city: -1 for city in CITIES}\n    \n    # Update with random populations for cities in city_dict\n    for city in city_dict.values():\n        if city in CITIES:\n            population_dict[city] = np.random.randint(1, max_range + 1)\n    \n    # Plotting\n    cities_to_plot = [city for city, pop in population_dict.items() if pop != -1]\n    populations_to_plot = [population_dict[city] for city in cities_to_plot]\n    \n    plt.figure(figsize=(10, 6))\n    bars = plt.bar(cities_to_plot, populations_to_plot)\n    plt.title('City Populations')\n    plt.xlabel('Cities')\n    plt.ylabel('Population')\n    for bar in bars:\n        yval = bar.get_height()\n        plt.text(bar.get_x() + bar.get_width()/2.0, yval, int(yval), va='bottom')  # Adding the population number on top of each bar\n    \n    plt.xticks(rotation=45)\n    plt.tight_layout()  # Adjust the plot to ensure everything fits without overlap\n    \n    return population_dict, plt.gca()  # gca stands for 'get current axes'\ncity_dict = {'John': 'New York', 'Alice': 'London', 'Bob': 'Beijing', 'Charlie': 'Tokyo', 'David': 'Sydney'}"}
{"task_id": "BigCodeBench/388", "solution": "import collections\nimport pandas as pd\nfrom unittest.mock import MagicMock\ndef task_func(my_tuple, path_csv_files):\n    \"\"\"\n    Count the occurrences of each value in the specified columns in multiple CSV files.\n\n    Parameters:\n    my_tuple (tuple): The tuple of column names.\n    path_csv_files (list of string): The list of csv files to read.\n\n    Returns:\n    dict: A dictionary where keys are column names and values are dictionaries \n        with unique values in the column as keys and their counts as values.\n    \"\"\"\n    result_dict = {}\n    \n    for column in my_tuple:\n        result_dict[column] = collections.Counter()\n\n    for file in path_csv_files:\n        # In a real-world scenario, you would use pd.read_csv(file)\n        # But here we're mocking it as per the example provided\n        df = pd.read_csv(file)  # This line should be replaced with actual pd.read_csv(file) call\n        \n        for column in my_tuple:\n            result_dict[column] += collections.Counter(df[column].tolist())\n    \n    return result_dict"}
{"task_id": "BigCodeBench/389", "solution": "import re\nimport os\nimport shutil\ndef task_func(directory):\n    \"\"\"\n    Find the files with filenames that contain \"like\" or \"what\" in a directory, create a new subdirectory called \"Interesting Files\" \n    and move those files to the new subdirectory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    List of files moved\n    \"\"\"\n    # Create the \"Interesting Files\" subdirectory if it doesn't exist\n    interesting_dir = os.path.join(directory, \"Interesting Files\")\n    if not os.path.exists(interesting_dir):\n        os.makedirs(interesting_dir)\n\n    # Find the files with the specified keywords in their names\n    files_to_move = [f for f in os.listdir(directory) if re.search(r'\\b(like|what)\\b', f, re.IGNORECASE)]\n\n    # Move the files\n    moved_files = []\n    for file in files_to_move:\n        src = os.path.join(directory, file)\n        dst = os.path.join(interesting_dir, file)\n        shutil.move(src, dst)\n        moved_files.append(file)\n\n    return moved_files"}
{"task_id": "BigCodeBench/390", "solution": "import pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url_dict, sort_by_column=\"title\"):\n    if not csv_url_dict or \"URL\" not in csv_url_dict:\n        raise ValueError(\"The dictionary must contain a 'URL' key with a valid CSV URL.\")\n    \n    url = csv_url_dict.get(\"URL\")\n    response = requests.get(url)\n    \n    if response.status_code != 200:\n        raise ValueError(f\"Failed to fetch data from URL. Status code: {response.status_code}\")\n    \n    data = StringIO(response.text)\n    df = pd.read_csv(data)\n    \n    # Sorting based on the specified column. Assuming the sort is in ascending order.\n    df_sorted = df.sort_values(by=[sort_by_column])\n    \n    return df_sorted"}
{"task_id": "BigCodeBench/391", "solution": "import os\nimport glob\nimport shutil\nimport tempfile\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    \n    errors = []\n    all_files_moved = True\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    \n    for file in json_files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            errors.append(f\"Failed to move {file}: {str(e)}\")\n            all_files_moved = False\n    \n    return all_files_moved, errors"}
{"task_id": "BigCodeBench/392", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col, group_name):\n    if group_name not in df[group_col].values:\n        raise ValueError(f\"The group_name {group_name} does not exist in the provided DataFrame.\")\n    \n    # Filter the dataframe for the specific group\n    group_df = df[df[group_col] == group_name]\n    \n    # Prepare data for plotting\n    categories = group_df[group_col].unique()\n    values = group_df[value_col].values\n    \n    # Create a new figure and a set of subplots\n    fig, ax = plt.subplots()\n    \n    # Create bar plot\n    bars = ax.bar(categories, values, color=COLORS[0])\n    \n    # Set title and labels\n    ax.set_title(f'Bar chart of {value_col} for {group_name}')\n    ax.set_xlabel(group_col)\n    ax.set_ylabel(value_col)\n    \n    # Return the axes object\n    return ax"}
{"task_id": "BigCodeBench/393", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n    \"\"\"\n    # Set the seed for reproducibility\n    np.random.seed(seed)\n    \n    # Generate the normal distribution samples\n    samples = np.random.normal(mu, sigma, num_samples)\n    \n    # Create a new figure\n    fig = plt.figure(figsize=(10, 5))\n    \n    # Add histogram subplot\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax1.hist(samples, bins='auto', density=True, alpha=0.6, color='b')\n    ax1.set_title('Histogram of Generated Samples')\n    ax1.set_xlabel('Value')\n    ax1.set_ylabel('Density')\n    \n    # Add Q-Q plot subplot\n    ax2 = fig.add_subplot(1, 2, 2)\n    stats.probplot(samples, plot=ax2)\n    ax2.set_title('Q-Q Plot of Generated Samples')\n    \n    # Show tight layout\n    plt.tight_layout()\n    \n    return fig"}
{"task_id": "BigCodeBench/394", "solution": "import collections\nimport string\nimport random\ndef task_func(length, seed=0):\n    \"\"\"\n    Generate a random string of a given length using ASCII letters and calculate the frequency of each character.\n\n    Parameters:\n    length (int): The length of the random string to be generated.\n    seed (int, Optional): The seed to be used for the random number generator. Default is 0.\n\n    Returns:\n    dict: A dictionary with the frequency of each character in the generated string.\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Generate a random string of ASCII letters\n    random_string = ''.join(random.choice(string.ascii_letters) for _ in range(length))\n    \n    # Calculate the frequency of each character\n    frequency = collections.Counter(random_string)\n    \n    return dict(frequency)"}
{"task_id": "BigCodeBench/395", "solution": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory {directory} does not exist.\")\n    \n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern {file_pattern} found in {directory}.\")\n    \n    files = natsort.natsorted(files)  # Natural sort for file names\n    \n    data = []\n    for file in files:\n        with open(file, 'r') as f:\n            content = f.read()\n            numeric_data = re.findall(regex, content)\n            data.append((os.path.basename(file), numeric_data))\n    \n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])"}
{"task_id": "BigCodeBench/396", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\ndef task_func(mu, sigma, sample_size, seed=0):\n    \"\"\"\n    Create a Gaussian kernel density estimate diagram of a normal distribution.\n    \"\"\"\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n    \n    # Generate a random sample from the normal distribution\n    sample = np.random.normal(mu, sigma, sample_size)\n    \n    # Create a range of values for the x-axis of the plot\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 1000)\n    \n    # Calculate the probability density function for the normal distribution\n    pdf = norm.pdf(x, mu, sigma)\n    \n    # Create a new figure\n    fig, ax = plt.subplots()\n    \n    # Plot the kernel density estimate of the sample\n    ax.hist(sample, bins='auto', density=True, alpha=0.6, color='b')\n    \n    # Plot the theoretical normal distribution\n    ax.plot(x, pdf, 'k', linewidth=2)\n    \n    # Label the axes\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Density')\n    ax.set_title('Normal Distribution N({}, {})'.format(mu, sigma))\n    \n    # Show the plot\n    plt.show()\n    \n    # Return the axes object\n    return ax"}
{"task_id": "BigCodeBench/397", "solution": "import re\nimport urllib.request\nimport json\nimport unittest\ndef task_func(API_URL):\n    \"\"\"\n    Get the public IP address of the current host from an API.\n    \n    Parameters:\n    API_URL (str): The API url that will return json format of the 'ip'.\n\n    Returns:\n    str: The public IP address.\n    \n    Raises:\n    urllib.error.URLError: If the API request fails.\n    json.JSONDecodeError: If the API response is not a valid JSON.\n    \"\"\"\n    try:\n        with urllib.request.urlopen(API_URL) as response:\n            data = json.loads(response.read().decode())\n            return data['ip']\n    except urllib.error.URLError as e:\n        return f\"Error accessing API: {e}\"\n    except json.JSONDecodeError as e:\n        return f\"Error decoding JSON response: {e}\""}
{"task_id": "BigCodeBench/398", "solution": "import json\nimport os\ndef task_func(file_path):\n    \"\"\"\n    Check that the data in a JSON file is a list of dictionaries (objects in JavaScript).\n    \n    Parameters:\n    file_path (str): The path to the JSON file.\n    \n    Returns:\n    bool: True if the data is a list of dictionaries, False otherwise.\n    \n    Requirements:\n    - json\n    - os\n    \n    Example:\n    >>> import tempfile\n    >>> import json\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> file_path = os.path.join(temp_dir, 'data.json')\n    >>> with open(file_path, 'w') as f:\n    ...     json.dump([{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}], f)\n    >>> task_func(file_path)\n    True\n    >>> task_func('./invalid_data.json') # File does not exist\n    False\n    \"\"\"\n    # Check if the file exists\n    if not os.path.exists(file_path):\n        return False\n    \n    try:\n        # Load the JSON data from the file\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n        \n        # Check if data is a list and contains only dictionaries\n        if isinstance(data, list) and all(isinstance(item, dict) for item in data):\n            return True\n    except json.JSONDecodeError:\n        # If JSON decoding fails, data is not a valid JSON\n        return False\n    \n    return False"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create a diagram of a sine wave and cosine wave with a given frequency and return the plot.\n\n    Parameters:\n    frequency (float): The frequency of the wave. Must be a non-negative float.\n    sample_size (int, Optional): A positive integer integer denoting the number of samples to be taken for the \n    wave. Default is 10000.\n\n    Returns:\n    matplotlib.figure.Figure: The figure object containing the plot.\n    matplotlib.axes.Axes: The axes object of the plot.\n\n    Raises:\n    ValueError: If the frequency is negative.\n    ValueError: If the sample size is non-positive.\n    \"\"\"\n    # Input validation\n    if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive.\")\n    \n    # Generate data\n    x = np.linspace(0, 2*math.pi*frequency, sample_size, endpoint=False)\n    y_sin = np.sin(x)\n    y_cos = np.cos(x)\n    \n    # Create plot\n    fig, ax = plt.subplots()\n    ax.plot(x, y_sin, label='Sine Wave', color='blue')\n    ax.plot(x, y_cos, label='Cosine Wave', color='red')\n    ax.set_title(f'Sine and Cosine Waves at {frequency} Hz')\n    ax.set_xlabel('Time [seconds]')\n    ax.set_ylabel('Amplitude')\n    ax.legend()\n    \n    # Return the figure and axes\n    return fig, ax"}
{"task_id": "BigCodeBench/400", "solution": "import json\nimport os\nfrom pathlib import Path\ndef task_func(directory, string):\n    \"\"\"\n    The function implementation remains the same as provided.\n    \"\"\"\n    matching_files = []\n    for path in Path(directory).rglob('*.json'):\n        with path.open() as file:\n            data = json.load(file)\n            if string in json.dumps(data):\n                matching_files.append(str(path))\n    return matching_files"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nfrom flask_mail import Mail\nimport os\ndef task_func(app_name):\n    # Create a Flask application instance\n    app = Flask(app_name)\n    \n    # Set default mail server configurations\n    mail_server = os.getenv('MAIL_SERVER', 'localhost')\n    mail_port = int(os.getenv('MAIL_PORT', 25))\n    mail_use_tls = os.getenv('MAIL_USE_TLS', 'False').lower() in ['true', '1']\n    mail_username = os.getenv('MAIL_USERNAME', None)\n    mail_password = os.getenv('MAIL_PASSWORD', None)\n    \n    # Configure the Flask-Mail extension\n    app.config.update(\n        MAIL_SERVER=mail_server,\n        MAIL_PORT=mail_port,\n        MAIL_USE_TLS=mail_use_tls,\n        MAIL_USERNAME=mail_username,\n        MAIL_PASSWORD=mail_password\n    )\n    \n    # Initialize the Mail extension with the Flask app\n    mail = Mail(app)\n    \n    return mail, app.config"}
{"task_id": "BigCodeBench/402", "solution": "import re\nimport requests\nimport json\nimport csv\nimport os\nAPI_URL = 'https://api.example.com/data'\nCSV_FILE_NAME = 'matched_data.csv'\ndef task_func(pattern):\n    \"\"\"\n    Make a GET request to an API, extract data that matches a RegEx pattern, and write it to a CSV file.\n    \"\"\"\n    # Make a GET request\n    response = requests.get(API_URL)\n    \n    # Check if the request was successful\n    if response.status_code != 200:\n        return f\"Failed to get data from API. Status code: {response.status_code}\"\n    \n    # Parse the JSON response\n    data = json.loads(response.text)\n    \n    # Extract the 'data' part of the JSON\n    data_to_search = data.get('data', '')\n    \n    # Find all matches of the pattern in the data\n    matched_data = re.findall(pattern, data_to_search, re.IGNORECASE)\n    \n    # Write the matched data to a CSV file\n    file_path = os.path.join(os.getcwd(), CSV_FILE_NAME)\n    with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        # Write the header\n        writer.writerow(['Matched Data'])\n        # Write the data\n        for match in matched_data:\n            writer.writerow([match])\n    \n    return file_path"}
{"task_id": "BigCodeBench/403", "solution": "from PIL import Image\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path, blur_radius=5):\n    \"\"\"\n    The function defined as per the problem statement.\n    \"\"\"\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"The image file {img_path} does not exist.\")\n\n    # Open image using PIL\n    img_pil = Image.open(img_path)\n\n    # Apply Gaussian blur\n    img_blur_pil = img_pil.filter(ImageFilter.GaussianBlur(radius=blur_radius))\n\n    # Convert PIL images to grayscale and then to numpy arrays\n    img_gray_pil = img_pil.convert('L')\n    img_gray_np = np.array(img_gray_pil)\n    \n    img_blur_gray_np = np.array(img_blur_pil.convert('L'))\n\n    # Display images (optional, requires matplotlib)\n    # import matplotlib.pyplot as plt\n    # plt.figure(figsize=(10,5))\n    # plt.subplot(1,2,1), plt.imshow(img_gray_np, cmap='gray'), plt.title('Original Grayscale')\n    # plt.subplot(1,2,2), plt.imshow(img_blur_gray_np, cmap='gray'), plt.title('Blurred Grayscale')\n    # plt.show()\n\n    return np.array(img_pil), img_blur_gray_np"}
{"task_id": "BigCodeBench/404", "solution": "import cv2\nimport numpy as np\nimport os\ndef task_func(img_path):\n    \"\"\"\n    Open an RGB image, convert it to grayscale, find contours using the cv2 library, and return the original image and contours.\n\n    Parameters:\n    - img_path (str): The path of the image file.\n\n    Returns:\n    - tuple: A tuple containing the original image as a numpy array and a list of contours.\n\n    Raises:\n    - FileNotFoundError: If the image file does not exist at the specified path.\n    \"\"\"\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"The image file {img_path} does not exist.\")\n\n    # Read the image\n    img = cv2.imread(img_path)\n    \n    # Check if image is loaded correctly\n    if img is None:\n        raise ValueError(\"Image could not be read.\")\n\n    # Convert the image to grayscale\n    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    # Apply a threshold to the grayscale image to make contours more detectable (assuming binary image is needed for contours)\n    _, thresh = cv2.threshold(gray_img, 127, 255, cv2.THRESH_BINARY)\n\n    # Find contours\n    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n    return img, contours"}
{"task_id": "BigCodeBench/405", "solution": "import random\nimport matplotlib.pyplot as plt\ndef task_func(points: int):\n    \"\"\"\n    Generate a plot of random numbers such that indices are on the x-axis and generated numbers are on the y-axis.\n\n    Parameters:\n    - points (int): Number of random points to generate.\n\n    Returns:\n    - A list of generated random numbers.\n    - A matplotlib Axes object representing the plot.\n    \"\"\"\n    # Generate random numbers\n    random_numbers = [random.random() for _ in range(points)]\n    \n    # Create a plot\n    fig, ax = plt.subplots()\n    ax.plot(range(1, points + 1), random_numbers, marker='o')\n    \n    # Set labels and title for clarity\n    ax.set_xlabel('Indices')\n    ax.set_ylabel('Random Numbers')\n    ax.set_title('Plot of Generated Random Numbers')\n    \n    # Show the plot\n    plt.grid(True)\n    plt.tight_layout()\n    \n    # Return the random numbers and the plot\n    return random_numbers, ax"}
{"task_id": "BigCodeBench/406", "solution": "from PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\ndef task_func(img_path, angle):\n    \"\"\"\n    Open an image, rotate it around a certain angle, and then display both the original and the rotated images side by side. \n    Additionally, return both images as numpy arrays.\n    \"\"\"\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"The image file {img_path} does not exist.\")\n    \n    # Open image\n    img = Image.open(img_path)\n    \n    # Rotate image\n    rotated_img = img.rotate(angle, expand=True)\n    \n    # Convert images to numpy arrays\n    original_img_array = np.array(img)\n    rotated_img_array = np.array(rotated_img)\n    \n    # Display images\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n    axs[0].imshow(original_img_array)\n    axs[0].set_title('Original Image')\n    axs[1].imshow(rotated_img_array)\n    axs[1].set_title(f'Rotated by {angle}\u00b0')\n    plt.show()\n    \n    return original_img_array, rotated_img_array"}
{"task_id": "BigCodeBench/407", "solution": "import os\nimport csv\nfrom openpyxl import load_workbook\ndef task_func(file_name, excel_file_path, csv_file_path) -> str:\n    \"\"\"\n    Converts an Excel file (.xls or .xlsx) to a CSV file.\n    \"\"\"\n    # Construct the full file paths\n    excel_file = os.path.join(excel_file_path, file_name)\n    csv_file = os.path.join(csv_file_path, os.path.splitext(file_name)[0] + '.csv')\n\n    # Check if the Excel file exists\n    if not os.path.exists(excel_file):\n        raise FileNotFoundError(f\"[Errno 2] No such file or directory: '{excel_file}'\")\n\n    # Load the Excel workbook and get the active sheet\n    workbook = load_workbook(excel_file)\n    sheet = workbook.active\n\n    # Write the data from the Excel sheet to a CSV file\n    with open(csv_file, 'w', newline='') as csvfile:\n        csvwriter = csv.writer(csvfile)\n        for row in sheet.iter_rows(values_only=True):\n            csvwriter.writerow(row)\n\n    return csv_file"}
{"task_id": "BigCodeBench/408", "solution": "import sqlite3\nimport pandas as pd\ndef task_func(db_file: str, query: str) -> pd.DataFrame:\n    \"\"\"Query an SQLite database and return the results.\"\"\"\n    # Connect to SQLite database\n    conn = sqlite3.connect(db_file)\n    \n    # Create a cursor object\n    cur = conn.cursor()\n    \n    # Execute the provided SQL query\n    cur.execute(query)\n    \n    # Fetch all rows from the last executed SQL command\n    rows = cur.fetchall()\n    \n    # Get the column names from the cursor description\n    columns = [desc[0] for desc in cur.description]\n    \n    # Close the cursor and connection to free resources\n    cur.close()\n    conn.close()\n    \n    # Convert the fetched rows into a pandas DataFrame\n    df = pd.DataFrame(rows, columns=columns)\n    \n    return df"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    The function to calculate statistics for a specific column in an Excel file.\n    \"\"\"\n    # Construct the full file path\n    file_path = os.path.join(excel_file_path, file_name)\n    \n    # Check if the file exists\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file {file_name} does not exist at the specified path.\")\n    \n    # Load the Excel file\n    try:\n        data = pd.read_excel(file_path)\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return\n    \n    # Check if the column exists\n    if column_name not in data.columns:\n        raise ValueError(f\"The column {column_name} is not found in the Excel file.\")\n    \n    # Calculate statistics\n    column_data = data[column_name]\n    mean = column_data.mean()\n    median = column_data.median()\n    std_dev = column_data.std()\n    \n    # Return statistics as a dictionary\n    return {'mean': mean, 'median': median, 'std_dev': std_dev}"}
{"task_id": "BigCodeBench/410", "solution": "import os\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(excel_directory: str, file_name: str, column_name: str, start_date: str, end_date: str) -> pd.DataFrame:\n    \"\"\"\n    The function defined above in the problem description.\n    \"\"\"\n    # Check if the file exists\n    file_path = os.path.join(excel_directory, file_name)\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file {file_name} does not exist in {excel_directory}.\")\n    \n    # Load the Excel file\n    try:\n        df = pd.read_excel(file_path)\n    except Exception as e:\n        raise ValueError(\"Error reading Excel file: \", str(e))\n    \n    # Check if the column exists\n    if column_name not in df.columns:\n        raise ValueError(f\"The column {column_name} does not exist in the DataFrame.\")\n    \n    # Convert the date strings to datetime objects\n    try:\n        start_date = datetime.strptime(start_date, '%Y-%m-%d')\n        end_date = datetime.strptime(end_date, '%Y-%m-%d')\n    except ValueError:\n        raise ValueError(\"Incorrect date format, should be 'yyyy-mm-dd'\")\n    \n    # Filter the DataFrame\n    filtered_df = df[(df[column_name] >= start_date) & (df[column_name] <= end_date)]\n    \n    return filtered_df"}
{"task_id": "BigCodeBench/411", "solution": "import pandas as pd\nimport json\ndef task_func(data: dict, output_path: str = \"./default_data_output.json\") -> str:\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Drop the 'c' column if it exists\n    if 'c' in df.columns:\n        df = df.drop(columns=['c'])\n    \n    # Convert the DataFrame back to dictionary\n    data_dict = df.to_dict(orient='index')\n    \n    # Save the dictionary as a JSON file\n    with open(output_path, 'w') as json_file:\n        json.dump(data_dict, json_file)\n    \n    return output_path"}
{"task_id": "BigCodeBench/412", "solution": "import json\nimport base64\nimport unicodedata\ndef task_func(json_file: str) -> dict:\n    with open(json_file, 'r') as file:\n        data = json.load(file)\n    \n    normalized_data = {}\n    for key, value in data.items():\n        decoded_value = base64.b64decode(value).decode('utf-8')\n        normalized_value = unicodedata.normalize('NFC', decoded_value)\n        normalized_data[key] = normalized_value\n    \n    return normalized_data"}
{"task_id": "BigCodeBench/413", "solution": "from flask import Flask\nfrom flask_mail import Mail\nimport os\ndef task_func(app):\n    \"\"\"\n    Initialize a Flask application with Flask-Mail. \n\n    Parameters:\n    app (Flask): The Flask application to configure.\n\n    Returns:\n    tuple: A tuple containing the Flask-Mail instance and the app's mail configurations.\n\n    Note:\n    - The details of the email server are retrieved from environment variables. \n    - If the variables do not exist, use defaults.\n    \n    Requirements:\n    - os\n    - flask_mail\n\n    Example:\n    >>> from flask import Flask\n    >>> app = Flask(\"test\")\n    >>> mail, configs = task_func(app)\n    >>> 'MAIL_SERVER' in configs\n    True\n    \"\"\"\n    # Default configurations\n    DEFAULTS = {\n        'MAIL_SERVER': 'localhost',\n        'MAIL_PORT': 25,\n        'MAIL_USE_TLS': False,\n        'MAIL_USE_SSL': False,\n        'MAIL_USERNAME': None,\n        'MAIL_PASSWORD': None,\n        'MAIL_DEFAULT_SENDER': None,\n    }\n    \n    # Override defaults with environment variables if they exist\n    configs = {key: os.environ.get(key, default) for key, default in DEFAULTS.items()}\n    \n    # Initialize Flask-Mail with the app\n    mail = Mail(app)\n    app.config.update(configs)\n    \n    return mail, configs"}
{"task_id": "BigCodeBench/414", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column=\"c\"):\n    \"\"\"\n    Remove a column from a data dictionary if it exists, and then plot the remaining data\n    if it contains numeric data.\n    \"\"\"\n    # Convert the dictionary to a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Remove the specified column if it exists\n    if column in df.columns:\n        df = df.drop(columns=[column])\n    \n    # Check if the remaining DataFrame contains only numeric data\n    if df.select_dtypes(include=np.number).shape[1] == df.shape[1]:\n        # Plot the DataFrame\n        ax = df.plot()\n        return df, ax\n    else:\n        # Return the DataFrame without plotting if it contains non-numeric columns\n        return df, None"}
{"task_id": "BigCodeBench/415", "solution": "import pandas as pd\ndef task_func(dataframe: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Decodes all Unicode escape strings in a particular column (\"UnicodeString\") in a given Pandas DataFrame.\n\n    Parameters:\n    dataframe (pd.DataFrame): The pandas DataFrame which must contain the column \"UnicodeString\".\n\n    Returns:\n    pd.DataFrame: The DataFrame with decoded strings in the \"UnicodeString\" column.\n\n    Raises:\n    KeyError: If the column \"UnicodeString\" does not exist in the DataFrame.\n    TypeError: If the input is not a Pandas DataFrame.\n    \"\"\"\n    if not isinstance(dataframe, pd.DataFrame):\n        raise TypeError(\"Input must be a Pandas DataFrame.\")\n    \n    if 'UnicodeString' not in dataframe.columns:\n        raise KeyError(\"Column 'UnicodeString' does not exist in the DataFrame.\")\n    \n    # Using pandas string methods to decode Unicode escape sequences\n    dataframe['UnicodeString'] = dataframe['UnicodeString'].apply(lambda x: x.encode('unicode_escape').decode())\n    \n    return dataframe"}
{"task_id": "BigCodeBench/416", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(data, column=\"c\"):\n    \"\"\"\n    Removes a column from a given data dictionary and creates a heatmap\n    of the correlation matrix of the remaining data. Non-numeric columns are\n    excluded from the heatmap. If the data is empty or has no numeric columns,\n    the function returns None.\n\n    Parameters:\n    - data: The input data dictionary or DataFrame.\n    - column (str): Name of column to remove. Defaults to \"c\".\n\n    Returns:\n    - matplotlib.axes._axes.Axes or None: The Axes object of the heatmap\n      or None if the heatmap is not generated.\n    \"\"\"\n    # Convert dictionary to DataFrame if it's a dictionary\n    if isinstance(data, dict):\n        data = pd.DataFrame(data)\n    \n    # Remove the specified column\n    if column in data.columns:\n        data = data.drop(column, axis=1)\n    else:\n        print(f\"Column '{column}' not found in data.\")\n        return None\n\n    # Check if there are any numeric columns left\n    numeric_data = data.select_dtypes(include='number')\n    if numeric_data.empty:\n        print(\"No numeric columns to compute correlation.\")\n        return None\n\n    # Compute the correlation matrix\n    corr = numeric_data.corr()\n\n    # Create a heatmap\n    plt.figure(figsize=(10, 8))\n    heatmap = sns.heatmap(corr, annot=True, cmap='coolwarm', square=True)\n\n    return heatmap"}
{"task_id": "BigCodeBench/417", "solution": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    # Define the model\n    model = Sequential()\n    model.add(Dense(10, activation='relu', input_dim=2))  # Hidden layer with 10 nodes\n    model.add(Dense(1, activation='sigmoid'))  # Output layer\n\n    # Compile the model\n    opt = SGD(lr=0.01)  # SGD Optimizer with learning rate 0.01\n    model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])\n\n    # Train the model and evaluate on the test set silently\n    history = model.fit(X_train, Y_train, epochs=100, validation_data=(X_test, Y_test), verbose=0)\n\n    # Plotting the training and validation loss\n    plt.figure(figsize=(10, 5))\n    plt.plot(history.history['loss'], label='Train Loss')\n    plt.plot(history.history['val_loss'], label='Test Loss')\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    ax = plt.gca()  # Get the current axes\n\n    return model, ax"}
{"task_id": "BigCodeBench/418", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\ndef task_func(X, Y):\n    # Split the data\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a Sequential model\n    model = keras.Sequential()\n    model.add(keras.layers.Dense(1, input_dim=2, activation='sigmoid'))\n\n    # Compile the model\n    model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(learning_rate=0.01), metrics=['accuracy'])\n\n    # Fit the model\n    model.fit(X_train, Y_train, epochs=100, verbose=0)\n\n    # Predict probabilities for the test set\n    Y_pred_prob = model.predict(X_test)\n\n    # Compute ROC curve and AUC\n    fpr, tpr, _ = roc_curve(Y_test.ravel(), Y_pred_prob.ravel())\n    roc_auc = auc(fpr, tpr)\n\n    # Plot the ROC curve\n    plt.figure()\n    plt.plot(fpr, tpr, label=f'ROC curve (area = {roc_auc:.2f})')\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC curve')\n    plt.legend(loc=\"lower right\")\n    \n    return model, plt.gca()"}
{"task_id": "BigCodeBench/419", "solution": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import SGD\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Construct the Keras Sequential model\n    input_dim = X_train.shape[1]\n    model = Sequential()\n    model.add(Dense(1, input_dim=input_dim, activation='sigmoid'))\n\n    # Compile the model\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.01), metrics=['accuracy'])\n\n    # Fit the model to the training data\n    model.fit(X_train, Y_train, epochs=100, verbose=0)\n\n    # Make predictions on the test set\n    Y_pred_prob = model.predict(X_test)\n\n    # Compute Precision-Recall curve\n    precision, recall, _ = precision_recall_curve(Y_test.flatten(), Y_pred_prob.flatten())\n\n    # Plot the Precision-Recall curve\n    fig, ax = plt.subplots()\n    ax.plot(recall, precision, label='Precision-Recall curve')\n    ax.set_title('Precision-Recall Curve')\n    ax.set_xlabel('Recall')\n    ax.set_ylabel('Precision')\n    ax.legend(loc='best')\n\n    return model, ax"}
{"task_id": "BigCodeBench/420", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data):\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Filter out non-numeric columns\n    numeric_cols = df.select_dtypes(include='number').columns.tolist()\n    \n    # Initialize the scaler\n    scaler = StandardScaler()\n    \n    # Try to convert mixed-type columns to numeric and scale, else leave them as is\n    for col in df.columns:\n        if col not in numeric_cols:\n            try:\n                df[col] = pd.to_numeric(df[col], errors='coerce')\n                if df[col].dtype == 'float64' or df[col].dtype == 'int64':\n                    numeric_cols.append(col)\n            except ValueError:\n                continue\n    \n    # Scale the numeric columns\n    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n    \n    return df"}
{"task_id": "BigCodeBench/421", "solution": "import requests\nimport os\nimport json\nimport time\nHEADERS = {\n    'accept': 'text/json',\n    'Content-Type': 'application/json'\n}\ndef task_func(url, directory, metadata):\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory {directory} does not exist.\")\n    if not requests.utils.is_valid_url(url):\n        raise TypeError(f\"The provided URL {url} is invalid.\")\n\n    status_codes = []\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        if os.path.isfile(file_path):\n            with open(file_path, 'rb') as file:\n                files = {'file': (filename, file)}\n                data = json.dumps(metadata)\n                response = requests.post(url, headers=HEADERS, data=data, files=files)\n                status_codes.append(response.status_code)\n                time.sleep(1)  # Limit speed as per requirement\n    return status_codes"}
{"task_id": "BigCodeBench/422", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df, target_column, column_to_remove=\"c\", test_size=0.2):\n    \"\"\"\n    The function provided based on the description, which splits data into train and test sets after removing a specified column.\n    \"\"\"\n    # Remove the specified column if it exists\n    if column_to_remove in df.columns:\n        df = df.drop(column_to_remove, axis=1)\n    \n    # Separate features (X) and target (y)\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n    \n    # Split the dataset into training set and test set\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)\n    \n    return X_train, X_test, y_train, y_test"}
{"task_id": "BigCodeBench/423", "solution": "import numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"The image file {image_path} does not exist.\")\n    if not (0 <= threshold <= 255) or not isinstance(threshold, int):\n        raise ValueError(\"Threshold must be an integer in the range 0-255.\")\n    \n    # Read the image\n    img = cv2.imread(image_path)\n    \n    # Check if the image is read correctly\n    if img is None:\n        raise IOError(f\"Error reading image: {image_path}\")\n    \n    # Convert to grayscale\n    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    \n    # Binarize the image\n    binary_img = np.where(gray_img > threshold, 255, 0).astype(np.uint8)\n    \n    return gray_img, binary_img"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport os\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"The file {image_path} does not exist.\")\n    if n_clusters < 1:\n        raise ValueError(\"'n_clusters' must be a positive integer.\")\n\n    # Read the image and convert from BGR to RGB\n    original_img = cv2.imread(image_path)\n    original_img_array = cv2.cvtColor(original_img, cv2.COLOR_BGR2RGB)\n\n    # Flatten the image into a 2D array for clustering\n    flat_img = original_img_array.reshape((-1, 3))\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(flat_img)\n\n    # Reconstruct the segmented image\n    segmented_img_flat = kmeans.cluster_centers_[kmeans.labels_]\n    segmented_img_array = segmented_img_flat.reshape(original_img_array.shape)\n\n    # Save each cluster as a separate image (optional, not included in return for simplicity)\n    # for i in range(n_clusters):\n    #     mask = np.all(segmented_img_array == kmeans.cluster_centers_[i], axis=-1)\n    #     cluster_img = np.zeros_like(original_img_array)\n    #     cluster_img[mask] = original_img_array[mask]\n    #     cv2.imwrite(f'cluster_{i}.jpg', cv2.cvtColor(cluster_img, cv2.COLOR_RGB2BGR))\n\n    return original_img_array, segmented_img_array"}
{"task_id": "BigCodeBench/425", "solution": "import cv2\nimport os\nfrom matplotlib import pyplot as plt\ndef task_func(image_path='image.jpg', histogram_path='histogram.png'):\n    \"\"\"\n    The function as described in the problem statement.\n    \"\"\"\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"The image file {image_path} does not exist.\")\n    \n    # Read the image\n    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    \n    # Calculate the histogram\n    hist = cv2.calcHist([img], [0], None, [256], [0,256])\n    \n    # Normalize the histogram for better visualization\n    hist = cv2.normalize(hist, hist).flatten()\n    \n    # Plot the histogram\n    plt.figure(figsize=(10, 4))\n    plt.hist(hist, bins=255, color='blue', alpha=0.7, range=[0,256])\n    plt.title('Grayscale Histogram')\n    plt.xlabel('Intensity Value')\n    plt.ylabel('Frequency')\n    histogram_axes = plt.gca()\n    \n    # Save the histogram as a PNG file\n    plt.savefig(histogram_path)\n    \n    # Display the image and its histogram (optional, as it may not be visible in non-interactive environments)\n    plt.imshow(img, cmap='gray')\n    plt.show()\n    \n    return histogram_axes"}
{"task_id": "BigCodeBench/426", "solution": "import numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"The file {image_path} does not exist.\")\n    if not (0 <= threshold <= 255) or not isinstance(threshold, int):\n        raise ValueError(\"Threshold must be an integer between 0 and 255.\")\n\n    # Read the image\n    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    if img is None:\n        raise ValueError(\"Failed to read the image.\")\n\n    # Binarize the image\n    binary_img = np.where(img < threshold, 0, 255).astype(np.uint8)\n\n    # Save the binary image\n    cv2.imwrite('binary_image.jpg', binary_img)\n\n    return img, binary_img"}
{"task_id": "BigCodeBench/427", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, features=[\"feature1\", \"feature2\", \"feature3\"], target=\"target\"):\n    # Merge dataframes on 'id' column\n    merged_df = pd.merge(df1, df2, on='id')\n\n    # Create a Linear Regression model\n    lr = LinearRegression()\n\n    # Prepare the data\n    X = merged_df[features]\n    y = merged_df[target]\n\n    # Train the model\n    lr.fit(X, y)\n\n    # Predict the target\n    y_pred = lr.predict(X)\n\n    # Calculate residuals\n    residuals = y - y_pred\n\n    # Plot residuals\n    fig, ax = plt.subplots()\n    ax.scatter(y_pred, residuals)\n    ax.set_title('Residuals Plot')\n    ax.set_xlabel('Predicted Values')\n    ax.set_ylabel('Residuals')\n\n    # Return results as a dictionary\n    return {\n        'coefficients': lr.coef_.tolist(),\n        'intercept': lr.intercept_,\n        'residuals_plot': ax\n    }"}
{"task_id": "BigCodeBench/428", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df1, df2):\n    # Merge dataframes on 'id' column\n    merged_df = pd.merge(df1, df2, on='id', how='outer')\n    \n    # Select numeric columns from df1 for scaling\n    numeric_features = merged_df.select_dtypes(include='number').columns.intersection(df1.columns)\n    \n    # Initialize scaler and fit-transform only the numeric features from df1\n    scaler = StandardScaler()\n    scaled_features = scaler.fit_transform(merged_df[numeric_features])\n    \n    # Put the scaled features back into the dataframe\n    for i, col in enumerate(numeric_features):\n        merged_df[col] = scaled_features[:, i]\n    \n    # Create a pair plot for the scaled features from df1\n    pair_plot = sns.pairplot(merged_df[numeric_features])\n    plt.show()\n    \n    return merged_df, pair_plot"}
{"task_id": "BigCodeBench/429", "solution": "import pandas as pd\nfrom sklearn.feature_selection import SelectKBest, f_classif\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2):\n    # Ensure both dataframes can be merged on 'id'\n    assert 'id' in df1.columns and 'id' in df2.columns, \"Both dataframes must have an 'id' column.\"\n    \n    # Merge dataframes on 'id'\n    merged_df = pd.merge(df1, df2, on='id')\n    \n    # Feature selection using SelectKBest\n    X = merged_df.drop('target', axis=1)  # Features\n    y = merged_df['target']  # Target variable\n    selector = SelectKBest(score_func=f_classif, k=2)\n    selector.fit(X, y)\n    selected_features = X.columns[selector.get_support()]\n    \n    # Create a new dataframe with only selected features\n    selected_df = merged_df[selected_features + ['target']]\n    \n    # Compute the correlation matrix\n    corr = selected_df.corr()\n\n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(corr, dtype=bool))\n\n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n    # Draw the heatmap with the mask and correct aspect ratio\n    heatmap = sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n                          square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n\n    return selected_features.tolist(), heatmap"}
{"task_id": "BigCodeBench/430", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n    # Merge datasets on 'id' assuming both have this column for alignment\n    merged_df = pd.merge(df1, df2, on='id')\n\n    # Prepare features for clustering\n    features = pd.concat([merged_df[column1], merged_df[column2]], axis=1)\n\n    # Initialize and fit KMeans model\n    kmeans = KMeans(n_clusters=2, n_init=10, random_state=0)\n    labels = kmeans.fit_predict(features)\n\n    # Create scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(merged_df[column1], merged_df[column2], c=labels, cmap='viridis')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.set_title('KMeans Clustering (k=2)')\n\n    return labels, ax"}
{"task_id": "BigCodeBench/431", "solution": "import cv2\nimport os\nimport numpy as np\ndef task_func(image_file: str) -> np.ndarray:\n    if not os.path.exists(image_file):\n        raise FileNotFoundError(f\"The image file {image_file} does not exist.\")\n    \n    try:\n        # Read the image in grayscale\n        image = cv2.imread(image_file, cv2.IMREAD_GRAYSCALE)\n    except cv2.error as e:\n        raise ValueError(f\"Invalid image file: {e}\")\n    \n    # Check if the image is grayscale\n    if image.ndim != 2:\n        raise ValueError(\"The image is not grayscale.\")\n    \n    # Calculate the histogram\n    histogram, _ = np.histogram(image.flatten(), bins=256, range=[0,256])\n    \n    return histogram"}
{"task_id": "BigCodeBench/432", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import chi2_contingency\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n    # Merge the dataframes on 'id'\n    merged_df = pd.merge(df1, df2, on='id')\n\n    # Create contingency table\n    contingency_table = pd.crosstab(merged_df[column1], merged_df[column2])\n\n    # Perform chi-square independence test\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n\n    # Draw heatmap\n    heatmap = sns.heatmap(contingency_table, annot=True, fmt=\"d\", cmap='coolwarm', cbar=True)\n    plt.title('Chi-square contingency heatmap')\n    plt.ylabel(column1)\n    plt.xlabel(column2)\n    \n    # Show the plot (optional, if you want the plot displayed immediately)\n    plt.show()\n\n    return p, heatmap.figure"}
{"task_id": "BigCodeBench/433", "solution": "import base64\nimport hashlib\nimport hmac\nimport binascii\ndef task_func(s, signature, secret_key):\n    \"\"\"\n    Validates the HMAC SHA-1 signature of a base64-encoded message against a provided signature using a specified secret key.\n    \"\"\"\n    # Decode the base64-encoded message\n    message = base64.b64decode(s)\n    \n    # Compute the HMAC SHA-1 hash of the message using the secret key\n    computed_signature = hmac.new(secret_key.encode(), message, hashlib.sha1).digest()\n    \n    # Convert the computed signature to its hexadecimal representation for comparison\n    computed_signature_hex = binascii.hexlify(computed_signature).decode()\n    \n    # Compare the computed signature with the provided signature\n    return computed_signature_hex == signature"}
{"task_id": "BigCodeBench/434", "solution": "import pandas as pd\nimport re\nimport random\ndef task_func(s: str, seed: int = 0) -> pd.DataFrame:\n    random.seed(seed)\n    product_names = ['Apple', 'Banana', 'Orange', 'Pear', 'Grape']\n    code_to_name = {}\n\n    # Validate and parse input string\n    segments = s.split('\\n')\n    data_list = []\n    for segment in segments:\n        parts = re.split(r'\\s+', segment.strip())\n        if len(parts) != 5:\n            raise ValueError(\"Each segment must have exactly 5 parts: ID, Quantity, Code, Price, Description.\")\n        ID, Quantity, Code, Price, Description = [part.strip() for part in parts]\n        if not ID.isdigit() or not Quantity.isdigit() or not Price.isdigit():\n            raise ValueError(\"ID, Quantity, and Price must be integers.\")\n        \n        # Assign product name based on code\n        if Code not in code_to_name:\n            code_to_name[Code] = random.choice(product_names)\n        Product = code_to_name[Code]\n        \n        data_list.append([ID, int(Quantity), Code, int(Price), Product, Description])\n\n    # Create DataFrame\n    data_df = pd.DataFrame(data_list, columns=['ID', 'Quantity', 'Code', 'Price', 'Product', 'Description'])\n    return data_df"}
{"task_id": "BigCodeBench/435", "solution": "import pandas as pd\nfrom random import choice\nPREDEFINED_NAMES = ['John', 'Alice', 'Bob', 'Charlie', 'David']\nJOB_TITLES = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\ndef task_func(name: str, age: int, code: str, salary: float, bio: str) -> pd.DataFrame:\n    if name not in PREDEFINED_NAMES:\n        raise ValueError(\"Name must be one of: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    \n    # Randomly assign a job title\n    job_title = choice(JOB_TITLES)\n    \n    # Create a single row DataFrame\n    data_df = pd.DataFrame({\n        'Name': [name],\n        'Age': [age],\n        'Code': [code],\n        'Salary': [salary],\n        'Bio': [bio],\n        'Job Title': [job_title]\n    })\n    \n    return data_df"}
{"task_id": "BigCodeBench/436", "solution": "import string\nimport matplotlib.pyplot as plt\ndef task_func(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Convert string to lowercase to make it case-insensitive\n    s = s.lower()\n    \n    # Initialize a dictionary with all letters as keys and 0 as default values\n    freq_dict = {letter: 0 for letter in string.ascii_lowercase}\n    \n    # Calculate frequencies\n    for letter in s:\n        if letter in freq_dict:\n            freq_dict[letter] += 1\n\n    # Create a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(freq_dict.keys(), freq_dict.values())\n    ax.set_xlabel('Letters')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Letter Frequencies')\n    plt.xticks(rotation=90)  # Rotate x-axis labels for better readability\n\n    return freq_dict, ax"}
{"task_id": "BigCodeBench/437", "solution": "import pandas as pd\nimport pickle\nimport os\ndef task_func(df, file_name=\"save.pkl\"):\n    \"\"\"\n    Save the provided Pandas DataFrame \"df\" in a pickle file with the given name, read it\n    back for validation, and delete the intermediate file.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame to be saved.\n    file_name (str, optional): Name of the file where the DataFrame will be saved. Defaults to 'save.pkl'.\n\n    Returns:\n    loaded_df (pd.DataFrame): The loaded DataFrame from the specified file.\n    \"\"\"\n    # Save the DataFrame to a pickle file\n    df.to_pickle(file_name)\n    \n    # Load the DataFrame from the pickle file\n    loaded_df = pd.read_pickle(file_name)\n    \n    # Validate if the loaded DataFrame is equal to the original DataFrame\n    assert df.equals(loaded_df), \"Loaded DataFrame does not match the original DataFrame.\"\n    \n    # Delete the pickle file\n    if os.path.exists(file_name):\n        os.remove(file_name)\n    \n    return loaded_df"}
{"task_id": "BigCodeBench/438", "solution": "import pickle\nimport os\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(numbers, file_path=\"save.pkl\"):\n    if not isinstance(numbers, list) or not all(isinstance(n, (int, float)) for n in numbers):\n        raise TypeError(\"Input must be a list of numbers.\")\n    \n    # Generate a simple plot from the numbers\n    plt.figure(figsize=(10, 5))\n    plt.hist(numbers, bins=20, color='blue', edgecolor='black')\n    plt.title('Histogram of Provided Numbers')\n    plt.xlabel('Number Range')\n    plt.ylabel('Frequency')\n    \n    # Save the figure to a temporary pickle file\n    plt.savefig(file_path, format='png')\n    \n    # Load the image back for validation\n    with open(file_path, 'rb') as handle:\n        loaded_fig = pickle.load(handle)\n    \n    # Ensure the file is deleted after reading\n    os.remove(file_path)\n    \n    return loaded_fig\nnumbers = [random.random() for _ in range(100)]"}
{"task_id": "BigCodeBench/439", "solution": "import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(P, T):\n    \"\"\"\n    Calculate the product of a matrix 'P' and a 3D tensor 'T' and visualize the results as a heatmap.\n    \n    Parameters:\n    - P (numpy.ndarray): Input matrix of shape (M, 3).\n    - T (numpy.ndarray): Input tensor of shape (3, 3, 3).\n    \n    Returns:\n    - numpy.ndarray: Resultant product after matrix-tensor multiplication.\n    - matplotlib.axes.Axes: Axes object displaying the heatmap of the 2D result.\n    \"\"\"\n    # Reshape T to (3, 9) for multiplication with P\n    T_reshaped = T.reshape(T.shape[0], -1)\n    \n    # Perform matrix multiplication\n    product = np.dot(P, T_reshaped)\n    \n    # Reshape the product back to a 3D tensor of shape (M, 3, 3)\n    product_reshaped = product.reshape(product.shape[0], T.shape[1], T.shape[2])\n    \n    # Flatten the 3D tensor to a 2D array for heatmap visualization\n    product_2D = product_reshaped.reshape(product_reshaped.shape[0], -1)\n    \n    # Visualize the heatmap\n    fig, ax = plt.subplots()\n    heatmap = sns.heatmap(product_2D, ax=ax)\n    \n    return product_reshaped, heatmap\nP = np.array([[6, 2, 7], [1, 1, 8]])\nT = np.random.rand(3, 3, 3)"}
{"task_id": "BigCodeBench/440", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(P, T):\n    \"\"\"\n    Detailed function description as provided.\n    \"\"\"\n    # Check if input arrays are empty\n    if P.size == 0 or T.size == 0:\n        raise ValueError(\"Input arrays P and T must not be empty.\")\n    \n    # Ensure compatibility for multiplication: P should have as many columns as T has depth\n    if P.shape[1] != T.shape[2]:\n        raise ValueError(\"Matrix P and tensor T are not compatible for multiplication.\")\n    \n    # Perform matrix-tensor multiplication\n    # Reshape T to a 2D array for multiplication: (T.shape[0]*T.shape[1], T.shape[2])\n    # Then, multiply with P to get a 2D result: (P.shape[0], T.shape[0]*T.shape[1])\n    result_2d = np.dot(P, T.reshape(T.shape[0]*T.shape[1], T.shape[2]))\n    \n    # Flatten the result to have a 1D array for each original row in P\n    flattened_result = result_2d.reshape(result_2d.shape[0], -1)\n    \n    # Normalize the flattened result using StandardScaler\n    scaler = StandardScaler()\n    normalized_result = scaler.fit_transform(flattened_result)\n    \n    # Convert to DataFrame\n    columns = [f\"feature_{i}\" for i in range(normalized_result.shape[1])]\n    return pd.DataFrame(normalized_result, columns=columns)"}
{"task_id": "BigCodeBench/441", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef task_func(P, T):\n    \"\"\"\n    The function to calculate the product of a matrix and a 3D tensor and visualize it.\n    \"\"\"\n    # Calculate the product using Einstein summation convention effectively\n    result = np.tensordot(P, T, axes=1)\n    \n    # Create a 3D plot\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111, projection='3d')\n    \n    # Reshape the result for visualization, assuming each row represents a point in 3D space\n    X, Y, Z = result.T\n    \n    # Plot\n    ax.scatter(X, Y, Z, c='r', marker='o')\n    ax.set_xlabel('X axis')\n    ax.set_ylabel('Y axis')\n    ax.set_zlabel('Z axis')\n    ax.set_title('3D Visualization of Matrix-Tensor Product')\n    \n    plt.show()\n    \n    return result, ax\nP = np.array([[6, 2, 7], [1, 1, 8], [8, 7, 1]])\nT = np.random.rand(3, 3, 3)"}
{"task_id": "BigCodeBench/442", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(P, T, tensor_shape=(3, 3, 3)):\n    # Flatten the tensor T for multiplication\n    T_flat = T.reshape(-1, T.shape[-1])\n    \n    # Perform matrix multiplication\n    product = P @ T_flat\n    \n    # Reshape the result to 2D for PCA\n    product_2D = product.reshape(product.shape[0], -1)\n    \n    # Apply PCA\n    pca = PCA(n_components=2)\n    pca_result = pca.fit_transform(product_2D)\n    \n    # Visualize PCA result\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    ax.set_title('PCA Result Visualization')\n    plt.close(fig)  # Prevents the plot from displaying immediately\n    \n    return pca_result, ax\nP = np.array([[6, 2, 7], [1, 1, 8], [8, 7, 1], [9, 6, 4], [2, 1, 1]])\nT = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]])"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(P: np.ndarray, T: np.ndarray, n_clusters: int = 3, random_state: int = 0, n_init: int = 10) -> (np.ndarray, plt.Axes):\n    # Calculate the product of matrix 'P' and the flattened 'T'\n    product = np.dot(P, T.reshape(T.shape[0], -1))\n    \n    # Flatten the result for clustering\n    flattened_product = product.flatten()\n    \n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened_product.reshape(-1, 1))\n    \n    # Visualize the clustering\n    fig, ax = plt.subplots()\n    colors = ['navy', 'turquoise', 'darkorange']\n    for i, color in zip(range(n_clusters), colors):\n        ax.scatter(np.where(cluster_result == i)[0], flattened_product[cluster_result == i], color=color, s=10)\n    ax.set_title('KMeans Clustering Visualization')\n    ax=ax\n    \n    return cluster_result, ax"}
{"task_id": "BigCodeBench/444", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef task_func(n_points=100, random_seed=None):\n    \"\"\"\n    Generate an array of random 3D dots in the range [0, 1) for each dimension\n    and draw them in a 3D scatter plot.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n        \n    # Generate random points\n    points = np.random.rand(n_points, 3)\n    \n    # Set up the matplotlib 3D plot\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111, projection='3d')\n    \n    # Scatter plot\n    ax.scatter(points[:, 0], points[:, 1], points[:, 2], c='r', marker='o')\n    ax.set_xlabel('X Axis')\n    ax.set_ylabel('Y Axis')\n    ax.set_zlabel('Z Axis')\n    ax.set_title('3D Scatter Plot of Random Points')\n    \n    # Show plot\n    plt.show()\n    \n    return points, ax"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n    np.random.seed(seed)  # Set the seed for reproducibility\n    \n    # Apply jittering to the points to avoid degenerate cases\n    jitter = np.random.normal(scale=1e-3, size=points.shape)\n    points_jittered = points + jitter\n    \n    # Generate Voronoi diagram\n    vor = Voronoi(points_jittered)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n    \n    # Ensure the plot doesn't show up when the function is called, but it's ready to be shown\n    plt.close(fig) \n    \n    return vor, ax"}
{"task_id": "BigCodeBench/446", "solution": "import matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\ndef task_func(n_samples=100, centers=3, n_features=2, random_seed=42):\n    \"\"\"\n    Create isotropic Gaussian blobs to form clusters and visualize them.\n\n    Parameters:\n    - n_samples (int): The total number of points divided among clusters.\n    - centers (int): The number of centers to generate.\n    - n_features (int): The number of features for each sample.\n    - random_seed (int): The seed for the random number generator.\n\n    Returns:\n    tuple: A tuple containing:\n        - X (numpy.ndarray): The matrix of blob points.\n        - y (numpy.ndarray): The vector of blob labels.\n        - ax (matplotlib.axes.Axes): The Axes object with the scatter plot.\n    \"\"\"\n    # Set the random seed for reproducibility\n    plt.figure(figsize=(8, 6))\n    np.random.seed(random_seed)\n\n    # Generate the blob dataset\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n\n    # Create a scatter plot to visualize the blobs\n    ax = plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='viridis')\n\n    # Label the plot\n    plt.title('Gaussian Blobs Clustering')\n    plt.xlabel('Feature 1')\n    plt.ylabel('Feature 2')\n    plt.colorbar(ax)\n\n    # Show the plot\n    plt.show()\n\n    return X, y, ax"}
{"task_id": "BigCodeBench/447", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, n_components=2, random_state=None):\n    \"\"\"\n    The function description provided in the question.\n    \"\"\"\n    # Initialize PCA with the specified number of components and random state\n    pca = PCA(n_components=n_components, random_state=random_state)\n    \n    # Perform PCA on the data\n    transformed_data = pca.fit_transform(data)\n    \n    # Create a scatter plot based on the number of components\n    if n_components == 1:\n        # For 1D, scatter plot with all Y set to 0\n        ax = plt.scatter(transformed_data[:, 0], np.zeros_like(transformed_data[:, 0]), alpha=0.6)\n    else:\n        # For 2D or more, scatter plot using the first two components\n        ax = plt.scatter(transformed_data[:, 0], transformed_data[:, 1], alpha=0.6)\n    \n    # Label axes and show plot\n    plt.xlabel('PC1')\n    plt.ylabel('PC2' if n_components > 1 else '')\n    plt.title('PCA Visualization')\n    plt.grid(True)\n    \n    # Return the transformed data and the axes object of the plot\n    plt.tight_layout()\n    plt.show()  # Display the plot inline\n    return {\"transformed_data\": transformed_data, \"ax\": ax}"}
{"task_id": "BigCodeBench/448", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(mu=0, sigma=1):\n    \"\"\"\n    Draw and return a subplot of a normal distribution with the given mean and standard deviation.\n    \"\"\"\n    # Create an array of 100 linearly spaced numbers\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    \n    # Calculate the corresponding y values for the normal distribution\n    y = norm.pdf(x, mu, sigma)\n    \n    # Create a new figure\n    fig, ax = plt.subplots()\n    \n    # Plot the normal distribution\n    ax.plot(x, y, label=f'Normal Dist. (\u03bc={mu}, \u03c3={sigma})')\n    \n    # Set plot details\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability Density')\n    ax.legend()\n    \n    # Show the plot on the screen (optional, can be commented out if only saving or returning the axes)\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/449", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, list):\n    # Select only the numeric columns that are expected to be standardized\n    numeric_features = data.select_dtypes(include='number').columns.tolist()\n    scaler = StandardScaler()\n    standardized_data = pd.DataFrame(scaler.fit_transform(data[numeric_features]), columns=numeric_features, index=data.index)\n\n    # Create a figure and a list to hold the axes objects\n    fig, axes = plt.subplots(nrows=1, ncols=len(numeric_features), figsize=(15, 5))\n\n    # If only one feature, make sure axes is not a list but an object\n    if len(numeric_features) == 1:\n        axes = [axes]\n\n    axes_list = []\n    for i, feature in enumerate(numeric_features):\n        ax = axes[i]\n        ax.hist(standardized_data[feature], bins=20, color='blue', edgecolor='black')\n        ax.set_title(f'Histogram of {feature}')\n        ax.set_xlabel('Standardized Value')\n        ax.set_ylabel('Frequency')\n        axes_list.append(ax)\n\n    # Adjust layout to prevent overlap\n    plt.tight_layout()\n    \n    return standardized_data, axes_list"}
{"task_id": "BigCodeBench/450", "solution": "from scipy.spatial.distance import cdist\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n_samples=200, centers=4, plot_path=None, random_seed=None):\n    if random_seed is not None:\n        np.random.seed(random_seed)\n        \n    # Generate synthetic dataset\n    X, _ = make_blobs(n_samples=n_samples, centers=centers, random_state=random_seed, n_features=2)\n    \n    # Calculate Euclidean distances\n    distances = cdist(X, X)\n    \n    # Visualize the dataset\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(X[:, 0], X[:, 1], c=_, cmap='viridis')\n    ax.set_title('Synthetic Dataset')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    plt.colorbar(scatter, ax=ax, label='Cluster')\n    \n    # Save plot or return it\n    if plot_path:\n        plt.savefig(plot_path)\n        return distances, None\n    else:\n        return distances, ax"}
{"task_id": "BigCodeBench/451", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(n_components=2, N_SAMPLES=500, N_FEATURES=50, random_seed=None):\n    \"\"\"\n    Generate a high-dimensional dataset, run PCA to reduce its dimensionality, and then draw a heatmap of\n    the covariance matrix of the transformed data.\n    \"\"\"\n    # Set the random seed for reproducibility\n    if random_seed is not None:\n        np.random.seed(random_seed)\n        \n    # Generate a random high-dimensional dataset\n    data = np.random.randn(N_SAMPLES, N_FEATURES)\n    \n    # Apply PCA to reduce the dimensionality\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    \n    # If more than one component, create a heatmap of the covariance matrix\n    heatmap_axes = None\n    if n_components > 1:\n        covariance_matrix = np.cov(transformed_data, rowvar=False)\n        plt.figure(figsize=(8, 6))\n        heatmap_axes = sns.heatmap(covariance_matrix, annot=False, fmt=\".2f\", cmap='coolwarm', square=True)\n        plt.title('Covariance Matrix of Transformed Data')\n        plt.show()\n    \n    return transformed_data, heatmap_axes"}
{"task_id": "BigCodeBench/452", "solution": "import numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(n_samples=100, n_features=10, random_seed=None):\n    # Set the random seed for reproducibility\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    \n    # Generate synthetic data\n    X, y = datasets.make_regression(n_samples=n_samples, n_features=n_features, noise=0.1, random_state=random_seed)\n    \n    # Split the data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=random_seed)\n    \n    # Create a Linear Regression model\n    model = LinearRegression()\n    \n    # Train the model\n    model.fit(X_train, y_train)\n    \n    # Make predictions\n    predictions = model.predict(X_test)\n    \n    # Get the coefficients and intercept\n    coefficients = model.coef_\n    intercept = model.intercept_\n    \n    # Calculate Mean Squared Error\n    mse = np.mean((predictions - y_test) ** 2)\n    \n    return predictions, coefficients, intercept, mse"}
{"task_id": "BigCodeBench/453", "solution": "import re\nimport string\nfrom random import choice\ndef task_func(n, pattern):\n    \"\"\"\n    Generates a random string of a specified length that conforms to a given regular expression pattern.\n    \"\"\"\n    letters = string.ascii_letters  # Includes both uppercase and lowercase ASCII letters\n    while True:\n        # Generate a random string of length n\n        random_string = ''.join(choice(letters) for _ in range(n))\n        # Check if the generated string matches the given pattern\n        if re.fullmatch(pattern, random_string):\n            return random_string"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n    if not os.path.exists(src_dir) or not os.path.exists(dest_dir):\n        raise FileNotFoundError(\"Source or destination directory does not exist.\")\n    \n    moved_files = []\n    for file_path in glob.glob(os.path.join(src_dir, f'*.{ext}')):\n        file_name = os.path.basename(file_path)\n        dest_file_path = os.path.join(dest_dir, file_name)\n        \n        if not os.path.exists(dest_file_path):\n            shutil.move(file_path, dest_file_path)\n            moved_files.append(file_path)\n    \n    return moved_files"}
{"task_id": "BigCodeBench/455", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, n):\n    \"\"\"\n    Generates a set of samples from a normal distribution with a specified mean and standard deviation.\n    It also visualizes the generated samples by plotting their histogram and the probability density function.\n\n    Parameters:\n    mean (float): The mean (mu) of the normal distribution.\n    std_dev (float): The standard deviation (sigma) of the distribution.\n    n (int): The number of samples to generate.\n\n    Returns:\n    numpy.ndarray: An array of generated samples from the normal distribution.\n    \"\"\"\n    # Generate the samples\n    samples = np.random.normal(mean, std_dev, n)\n    \n    # Plotting the histogram of the samples\n    plt.figure(figsize=(10, 6))\n    plt.hist(samples, bins='auto', density=True, alpha=0.6, color='b')\n    \n    # Plotting the PDF of the normal distribution\n    x = np.linspace(mean - 3*std_dev, mean + 3*std_dev, 100)\n    plt.plot(x, stats.norm.pdf(x, mean, std_dev), 'k', linewidth=2)\n    plt.title('Histogram and PDF of Normal Distribution ($\\mu=$%.1f, $\\sigma=$%.1f)' % (mean, std_dev))\n    plt.xlabel('Values')\n    plt.ylabel('Probability Density')\n    plt.grid(True)\n    plt.show()\n    \n    return samples"}
{"task_id": "BigCodeBench/456", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, plt.Axes):\n    # Normalize the data\n    scaler = MinMaxScaler()\n    normalized_data = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)\n    \n    # Visualize the normalized data using a heatmap\n    plt.figure(figsize=(10, 8))\n    heatmap = sns.heatmap(normalized_data, cmap=\"YlGnBu\", annot=True, fmt=\".2f\", cbar_kws={\"label\": \"Normalized Value\"})\n    plt.title('Heatmap of Normalized Data')\n    plt.show()\n    \n    return normalized_data, heatmap.get_figure()"}
{"task_id": "BigCodeBench/457", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    if not all(isinstance(sublist, list) for sublist in L) or not all(isinstance(i, int) for sublist in L for i in sublist):\n        raise TypeError(\"Input must be a list of list of integers.\")\n    \n    # Flatten the nested list and filter out empty sublists\n    flat_list = [item for sublist in L for item in sublist if sublist]\n    \n    # Convert to numpy array for easier handling\n    np_array = np.array(flat_list)\n    \n    # Create a DataFrame from the numpy array\n    df = pd.DataFrame(np_array, columns=['Values'])\n    \n    # Draw histogram using pandas\n    ax = df['Values'].hist(rwidth=0.8)\n    \n    # Show the plot (this line is optional if you want to display the plot interactively)\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n    # Load JSON string into dictionary\n    data_dict = json.loads(json_str) if json_str else {}\n    \n    # Normalize dictionary: double numerical values, including those in strings\n    def double_num(match):\n        return str(float(match.group()) * 2)\n    for key, value in data_dict.items():\n        if isinstance(value, (int, float)):\n            data_dict[key] = value * 2\n        elif isinstance(value, list):\n            data_dict[key] = [i * 2 if isinstance(i, (int, float)) else double_num(re.search(r'-?\\d+\\.?\\d*', str(i))) for i in value]\n        elif isinstance(value, str):\n            data_dict[key] = double_num(re.search(r'-?\\d+\\.?\\d*', value)) if re.search(r'-?\\d+\\.?\\d*', value) else value\n    \n    # Create a DataFrame, ensuring numerical values are floats\n    df = pd.DataFrame(data_dict)\n    df = df.applymap(lambda x: float(x) if isinstance(x, str) and x.replace('.','',1).isdigit() else x)\n    \n    # Return DataFrame, empty if no valid data\n    return df if df.size > 0 else pd.DataFrame()\njson_str = '{\"a\": [1, 2, 3], \"b\": 4.9, \"c\": \"5\"}'"}
{"task_id": "BigCodeBench/459", "solution": "import subprocess\nimport os\nimport time\nfrom datetime import datetime\ndef task_func(script_dir, scripts, delay):\n    if delay < 0 or not scripts:\n        raise ValueError(\"Delay must be non-negative and scripts list must not be empty.\")\n    \n    execution_times = []\n    for script in scripts:\n        script_path = os.path.join(script_dir, script)\n        if not os.path.isfile(script_path):\n            raise FileNotFoundError(f\"Script not found: {script_path}\")\n        \n        start_time = datetime.now()\n        execution_times.append(start_time.strftime('%Y-%m-%d %H:%M:%S'))\n        \n        subprocess.run(['bash', script_path], check=True)\n        \n        time.sleep(delay)\n    \n    return execution_times"}
{"task_id": "BigCodeBench/460", "solution": "import subprocess\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(script_path, output_file_path):\n    try:\n        # Execute the script\n        subprocess.check_call(['bash', script_path])\n    except subprocess.CalledProcessError as e:\n        raise ValueError(\"Script execution failed with error code: {}\".format(e.returncode))\n\n    # Check if the CSV file exists and can be read\n    try:\n        df = pd.read_csv(output_file_path)\n    except pd.errors.ParserError as e:\n        raise ValueError(\"Error reading CSV: {}\".format(str(e)))\n\n    # Ensure the DataFrame has exactly two columns\n    if len(df.columns) != 2:\n        raise ValueError(\"CSV must contain exactly 2 columns, found {}\".format(len(df.columns)))\n\n    # Plotting the bar graph\n    ax = df.plot(kind='bar', x=df.columns[0], y=df.columns[1])\n    plt.title('Bar Graph from CSV Data')\n    plt.xlabel(df.columns[0])\n    plt.ylabel(df.columns[1])\n    plt.tight_layout()\n\n    return df, ax"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\ndef task_func(script_path: str, timeout=10) -> dict:\n    if not os.path.exists(script_path):\n        return {'Error': 'Script path does not exist.'}\n\n    process = None\n    cpu_usage = 0\n    memory_usage = 0\n    start_time = time.time()\n\n    try:\n        process = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        while process.poll() is None or process.returncode is None:\n            if time.time() - start_time > timeout:\n                if process and process.pid:\n                    os.kill(process.pid, signal.SIGTERM)\n                return {'Error': 'Process timed out.'}\n            try:\n                cpu_usage += psutil.Process(process.pid).cpu_percent(interval=0.1)\n                memory_usage += psutil.Process(process.pid).memory_info().rss\n                time.sleep(0.1)  # To avoid tight loop\n            except psutil.NoSuchProcess:\n                # Process already finished\n                break\n        stdout, stderr = process.communicate()\n        if process.returncode != 0:\n            return {'Error': f'Script execution failed with return code {process.returncode}', 'stderr': stderr.decode()}\n    except Exception as e:\n        return {'Error': str(e)}\n\n    return {'CPU Usage': cpu_usage, 'Memory Usage': memory_usage}"}
{"task_id": "BigCodeBench/462", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    \n    # Set the random seed for reproducibility\n    random.seed(random_seed)\n    \n    # Generate the DataFrame\n    data = {'Category': [random.choice(categories) for _ in range(num_rows)],\n            'Value': [random.randint(1, 100) for _ in range(num_rows)]}\n    df = pd.DataFrame(data)\n    \n    # Create a bar chart\n    ax = df['Category'].value_counts().plot(kind='bar', title='Category Counts')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Count')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/463", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_str, separator=\",\", bins=20):\n    \"\"\"\n    The function implementation is described in the provided problem statement.\n    \"\"\"\n    try:\n        # Convert data string into a list of integers\n        data_list = [int(item) for item in data_str.split(separator)]\n    except ValueError:\n        raise ValueError(\"Failed to convert data into integers.\")\n\n    # Check if data is not empty\n    if not data_list:\n        raise ValueError(\"Data is empty.\")\n\n    # Create a pandas Series\n    series = pd.Series(data_list, dtype=\"int64\")\n\n    # Create a histogram\n    fig, ax = plt.subplots()\n    ax.hist(series, bins=bins, grid=True, rwidth=0.9, color='#607c8e')\n    \n    plt.close(fig)  # Prevents multiple windows if function is called multiple times\n\n    return series, ax"}
{"task_id": "BigCodeBench/464", "solution": "import json\nfrom datetime import datetime\nfrom decimal import Decimal\ndef task_func(my_obj):\n    class DateTimeEncoder(json.JSONEncoder):\n        \"\"\"Custom JSON Encoder to handle datetime and Decimal types.\"\"\"\n        def default(self, obj):\n            if isinstance(obj, datetime):\n                return obj.isoformat()\n            if isinstance(obj, Decimal):\n                return float(obj)  # or str(obj) if you want to keep it as a string in JSON\n            return super().default(obj)\n\n    return json.dumps(my_obj, cls=DateTimeEncoder)"}
{"task_id": "BigCodeBench/465", "solution": "import json\nimport numpy as np\nfrom decimal import Decimal\nfrom datetime import datetime\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        elif isinstance(obj, np.ndarray):\n            return obj.tolist()\n        elif isinstance(obj, Decimal):\n            return float(obj)  # Convert to float for JSON serialization\n        return super().default(obj)\ndef task_func(my_obj):\n    try:\n        return json.dumps(my_obj, cls=CustomJSONEncoder)\n    except TypeError as e:\n        raise TypeError(f\"Object of type '{type(my_obj).__name__}' is not JSON serializable\") from e"}
{"task_id": "BigCodeBench/466", "solution": "import json\nfrom enum import Enum\nclass EnumEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, Enum):\n            return obj.name  # or obj.value if you prefer the value instead of the name\n        return super().default(obj)\ndef task_func(my_obj):\n    \"\"\"\n    Serializes an object into a JSON string with support for complex data types like Enum.\n    \"\"\"\n    return json.dumps(my_obj, cls=EnumEncoder)"}
{"task_id": "BigCodeBench/467", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n, seed=0):\n    np.random.seed(seed)\n    points = [(np.random.rand(), np.random.rand()) for _ in range(n)]\n    \n    fig, ax = plt.subplots()\n    ax.scatter([point[0] for point in points], [point[1] for point in points])\n    ax.set_title('Scatter plot of random points')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    \n    plt.close(fig)  # Prevents the plot from displaying when the function is called.\n    \n    return fig, points"}
{"task_id": "BigCodeBench/468", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(file_path=\"data.csv\", columns=[\"A\", \"B\", \"C\"]):\n    # Read CSV file into DataFrame\n    df = pd.read_csv(file_path)\n    \n    # Convert numeric values to floats\n    df[columns] = df[columns].apply(pd.to_numeric, downcast='float')\n    \n    # Compute the cube-root of the data\n    croot = df[columns].applymap(np.cbrt)\n    \n    # Draw a line chart of the data in specified columns\n    fig, ax = plt.subplots()\n    for col in columns:\n        ax.plot(df[col], label=col)\n    ax.set_title('Line Chart of Specified Columns')\n    ax.legend()\n    \n    # Return DataFrame, plotted Axes, and cube-root Series\n    return df, ax, croot"}
{"task_id": "BigCodeBench/469", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\ndef task_func(student_grades, possible_grades=[\"A\", \"B\", \"C\", \"D\", \"F\"]):\n    # Normalize grades to uppercase to make the function case-insensitive\n    student_grades = [grade.upper().strip() for grade in student_grades if grade.strip()]\n    \n    # Filter out grades that are not in the possible grades\n    valid_grades = [grade for grade in student_grades if grade in possible_grades]\n    \n    # Count the occurrence of each valid grade\n    grade_counts = Counter(valid_grades)\n    \n    # Convert the Counter object to a DataFrame\n    report_df = pd.DataFrame.from_dict(grade_counts, orient='index', columns=['Count'])\n    report_df.sort_index(inplace=True)  # Sort the DataFrame by index (grades)\n    \n    # Create a bar chart\n    ax = plt.figure(figsize=(10, 6)).add_subplot(111)\n    report_df.plot(kind='bar', ax=ax)\n    ax.set_title('Grade Distribution')\n    ax.set_xlabel('Grade')\n    ax.set_ylabel('Number of Students')\n    plt.xticks(rotation=0)  # Keep the grade labels horizontal\n    \n    return report_df, ax\nstudent_grades = ['A', 'B', 'B', 'C', 'A', 'D', 'F', 'B', 'A', 'C']"}
{"task_id": "BigCodeBench/470", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(myList):\n    # Ensure the list contains only integers for appropriate bin alignment\n    myList = [int(x) for x in myList]\n    \n    # Determine the range for bin edges to align with integer values\n    min_val = min(myList)\n    max_val = max(myList)\n    bin_edges = np.arange(min_val - 0.5, max_val + 1.5, 1)\n\n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(myList, bins=bin_edges, edgecolor='black')\n\n    # Set labels and title\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Values')\n\n    # Show plot (comment this line if you want to return the plot without displaying)\n    plt.show()\n\n    return ax\nmyList = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]"}
{"task_id": "BigCodeBench/471", "solution": "from collections import Counter\nimport pandas as pd\ndef task_func(myList):\n    \"\"\"\n    Count the frequency of each word in a list and return a DataFrame of words and their number.\n    \n    Parameters:\n    myList (list): List of strings. Each string is considered a word regardless of its content,\n                                    however the function is case insensitive, and it removes\n                                    leading and trailing whitespaces. If empty, function returns\n                                    a DataFrame with a Count column that is otherwise empty.\n    \n    Returns:\n    DataFrame: A pandas DataFrame with words and their counts.\n    \"\"\"\n    # Handle case where the list is empty\n    if not myList:\n        return pd.DataFrame(columns=['Count'])\n    \n    # Normalize the list (case insensitive, remove leading/trailing whitespaces)\n    normalized_list = [word.strip().lower() for word in myList if word.strip()]\n    \n    # Count the frequency of each word\n    word_counts = Counter(normalized_list)\n    \n    # Convert the Counter object to a DataFrame\n    df = pd.DataFrame.from_dict(word_counts, orient='index', columns=['Count'])\n    \n    return df\nmyList = ['apple', 'banana', 'apple', 'cherry', 'banana', 'banana']"}
{"task_id": "BigCodeBench/472", "solution": "import matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\ndef task_func(myList, n_clusters):\n    if not all(isinstance(point, (list, tuple)) and len(point) == 2 for point in myList):\n        raise ValueError(\"All elements in myList must be 2D points (lists or tuples with two elements).\")\n    if not isinstance(n_clusters, int) or n_clusters < 1:\n        raise ValueError(\"n_clusters must be a positive integer.\")\n\n    # Convert the list to a numpy array for sklearn compatibility\n    points_array = np.array(myList)\n    \n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n    kmeans.fit(points_array)\n    \n    # Plotting the clusters\n    plt.figure()\n    plt.scatter(points_array[:, 0], points_array[:, 1], c=kmeans.labels_)\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='x')\n    plt.title('KMeans Clustering')\n    plt.xlabel('X-axis')\n    plt.ylabel('Y-axis')\n    \n    # Return the Axes object\n    return plt.gca()"}
{"task_id": "BigCodeBench/473", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(n_walks, n_steps, seed=None):\n    if not isinstance(n_walks, int) or n_walks < 1:\n        raise ValueError(\"n_walks must be a positive integer.\")\n    if not isinstance(n_steps, int) or n_steps < 1:\n        raise ValueError(\"n_steps must be a positive integer.\")\n    \n    np.random.seed(seed)\n    \n    # Generate random walks\n    walks = np.cumsum(np.random.randn(n_walks, n_steps), axis=1)\n    walks += np.random.randn(n_walks).reshape(-1, 1)  # Start from a random point\n    \n    # Define colors to cycle through\n    colors = itertools.cycle(['b', 'g', 'r', 'c', 'm', 'y', 'k'])\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    for walk, color in zip(walks, colors):\n        ax.plot(walk, color=color, label=f'Walk {next(itertools.count(1))}')\n    \n    ax.set_title(f'{n_walks} Random Walks with {n_steps} Steps Each')\n    ax.set_xlabel('Steps')\n    ax.set_ylabel('Position')\n    ax.legend()\n    plt.xticks(np.arange(0, n_steps+1, step=20))  # Adjusting x-ticks for readability\n    \n    return ax"}
{"task_id": "BigCodeBench/474", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(n_samples=1000, mu=0, sigma=1, random_seed=0):\n    np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True, alpha=0.6, color='b')\n    \n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    pdf = norm.pdf(x, mu, sigma)\n    ax.plot(x, pdf, 'r-', linewidth=2)\n\n    ax.set_xlabel('Values')\n    ax.set_ylabel('Probability Density')\n    ax.set_title('Normal Distribution N({:.2f}, {:.2f})'.format(mu, sigma))\n\n    return ax, samples"}
{"task_id": "BigCodeBench/475", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\ndefault_country_codes = {\n    'Russia': 'ru_RU',\n    'Germany': 'de_DE',\n    'France': 'fr_FR',\n    'Spain': 'es_ES',\n    'Italy': 'it_IT'\n}\ndef task_func(data, date_format, country, country_codes=None):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a DataFrame.\")\n    if not isinstance(date_format, str):\n        raise ValueError(\"'date_format' must be a string.\")\n    if country not in (country_codes if country_codes is not None else default_country_codes):\n        raise ValueError(f\"'{country}' is not a valid country in the provided or default country_codes.\")\n    if country_codes is not None and not isinstance(country_codes, dict):\n        raise ValueError(\"'country_codes' must be a dictionary.\")\n    \n    # Convert date strings to datetime objects\n    data['dates'] = pd.to_datetime(data['dates'], format=date_format)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.hist(data['dates'], bins='auto')  # more sophisticated binning possible\n    ax.set_title('Date Distribution')\n    ax.set_ylabel('Frequency')\n    \n    return ax"}
{"task_id": "BigCodeBench/476", "solution": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\nimport numpy as np\ndef quadratic_func(x, a, b, c):\n    \"\"\"\n    Quadratic function to be fitted.\n    \"\"\"\n    return a * x**2 + b * x + c\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n    \"\"\"\n    # Curve fitting\n    params, _ = curve_fit(quadratic_func, X, Y)\n\n    # Generating data for the fitted curve\n    x_fit = np.linspace(min(X), max(X), 400)\n    y_fit = quadratic_func(x_fit, *params)\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, label='Data')\n    ax.plot(x_fit, y_fit, 'r', label='Fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(params))\n    ax.legend()\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    \n    return params, ax"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    np.random.seed(seed)\n    \n    # Ensure each category appears at least once if N allows\n    min_N = len(CATEGORIES) if N >= len(CATEGORIES) else N\n    categories = np.random.choice(CATEGORIES, size=min_N, replace=False)\n    remaining_N = N - len(categories)\n    \n    # Fill the rest of the categories randomly if needed\n    if remaining_N > 0:\n        categories = np.concatenate([categories, np.random.choice(CATEGORIES, size=remaining_N, replace=True)])\n    np.random.shuffle(categories)  # Shuffle to avoid any specific order\n    \n    # Generate random data for 'x' and 'y'\n    x = np.random.rand(N)\n    y = np.random.rand(N)\n    \n    # Create DataFrame\n    df = pd.DataFrame({'x': x, 'y': y, 'category': categories})\n    \n    # Draw scatter plot\n    _, ax = plt.subplots()\n    scatter = ax.scatter(df['x'], df['y'], c=df['category'], cmap='viridis', label=df['category'].unique())\n    ax.set_title('Scatter Plot of x vs y, Colored by Category')\n    ax.legend(handles=scatter.legend_elements(prop=\"colors\", num=len(CATEGORIES)))\n    \n    return df, ax"}
{"task_id": "BigCodeBench/478", "solution": "import pandas as pd\nimport re\nimport random\ndef task_func(data_list, seed=None):\n    \"\"\"\n    Removes a random comma-separated value (treated as a \"substring\") from each string\n    in a list and returns a pandas DataFrame containing the original and modified strings.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    # Process each string in the list\n    results = []\n    for s in data_list:\n        # Remove leading and trailing whitespaces\n        s = s.strip()\n        # Split the string into a list by commas\n        items = s.split(',')\n        # Randomly remove one item and rejoin the rest\n        removed_item = random.choice(items)\n        modified_items = [item for item in items if item != removed_item]\n        modified_s = ', '.join(modified_items)\n        results.append((s, modified_s))\n    \n    # Convert results into a DataFrame\n    df = pd.DataFrame(results, columns=['Original String', 'Modified String'])\n    return df"}
{"task_id": "BigCodeBench/479", "solution": "import random\nimport string\nimport pandas as pd\ndef task_func(data_list, seed=0):\n    random.seed(seed)\n    \n    results = []\n    for s in data_list:\n        if not s:\n            results.append((s, s))  # Empty string case\n            continue\n            \n        parts = [part.strip() for part in s.split(',')]\n        if not parts:  # If splitting results in an empty list due to all whitespace\n            results.append((s, s))\n            continue\n            \n        # Randomly choose a part to replace\n        target_part = random.choice(parts)\n        replacement = ''.join(random.choice(string.ascii_lowercase) for _ in target_part)\n        \n        # Replace the chosen part in the original string\n        modified_s = s.replace(target_part, replacement, 1)\n        \n        results.append((s, modified_s))\n    \n    # Convert results to DataFrame\n    df = pd.DataFrame(results, columns=['Original String', 'Modified String'])\n    return df\ndata_list = ['lamp, bag, mirror', 'table, chair, bag, lamp']"}
{"task_id": "BigCodeBench/480", "solution": "import re\nimport random\nimport pandas as pd\ndef task_func(data_list, seed=None):\n    \"\"\"\n    The function's description and example are embedded in the docstring above.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    shuffled_data = []\n    for original_string in data_list:\n        # Split the string into substrings and strip whitespaces\n        substrings = [s.strip() for s in original_string.split(',')]\n        # Shuffle the substrings\n        shuffled_substrings = random.sample(substrings, len(substrings))\n        # Join the shuffled substrings back into a string\n        shuffled_string = ', '.join(shuffled_substrings)\n        shuffled_data.append((original_string, shuffled_string))\n    \n    # Convert the list of tuples into a DataFrame\n    df = pd.DataFrame(shuffled_data, columns=['Original String', 'Shuffled String'])\n    return df"}
{"task_id": "BigCodeBench/481", "solution": "import pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=42):\n    \"\"\"\n    Randomizes the order of comma-separated substrings within each string in a list,\n    normalizing spaces to ensure a single space follows each comma using regex, then\n    returns a DataFrame comparing original and randomized strings.\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Initialize an empty list to store randomized strings\n    randomized_list = []\n    \n    for s in data_list:\n        # Normalize spaces after commas using regex\n        normalized_s = re.sub(r',\\s*', ', ', s)\n        \n        # Split the string into a list of substrings\n        substrings = normalized_s.split(', ')\n        \n        # Randomize the order of substrings\n        randomized_substrings = random.sample(substrings, len(substrings))\n        \n        # Join the randomized substrings back into a string with a single space after commas\n        randomized_s = ', '.join(randomized_substrings)\n        \n        # Append the original and randomized strings to the respective lists\n        randomized_list.append((s, randomized_s))\n    \n    # Convert the list of tuples into a DataFrame\n    df = pd.DataFrame(randomized_list, columns=['Original String', 'Randomized String'])\n    \n    return df"}
{"task_id": "BigCodeBench/482", "solution": "import pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    \n    def remove_substring(s):\n        if len(s.split(',')) > 1:\n            substrings = s.split(',')\n            random_sub = random.choice(substrings)\n            substrings.remove(random_sub)\n            return ','.join(substrings).strip()\n        return s\n\n    def replace_substring(s):\n        substrings = s.split(',')\n        if substrings:\n            random_sub = random.choice(substrings)\n            random_string = 'random_string'\n            substrings[substrings.index(random_sub)] = random_string\n            return ','.join(substrings).strip()\n        return s\n\n    def shuffle_substrings(s):\n        substrings = s.split(',')\n        random.shuffle(substrings)\n        return ','.join(substrings).strip()\n\n    def randomize_substrings(s):\n        substrings = re.split(',\\s*', s)\n        random.shuffle(substrings)\n        return ','.join(substrings).strip()\n\n    operations = [remove_substring, replace_substring, shuffle_substrings, randomize_substrings]\n    \n    results = []\n    for s in data_list:\n        operation = random.choice(operations)\n        modified_s = operation(s)\n        results.append((s, modified_s))\n\n    df = pd.DataFrame(results, columns=['Original String', 'Modified String'])\n    return df\ndata_list = ['lamp, bag, mirror', 'table, chair, bag, lamp']\nseed = 0"}
{"task_id": "BigCodeBench/483", "solution": "import re\nimport pandas as pd\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    The function as described in the problem statement.\n    \"\"\"\n    def reverse_matching_words(s: str) -> str:\n        words = s.split()\n        reversed_words = [word[::-1] if re.match(pattern, word) else word for word in words]\n        return ' '.join(reversed_words)\n    \n    if pattern:  # Only proceed if the pattern is not empty\n        df[column_name] = df[column_name].apply(reverse_matching_words)\n    return df"}
{"task_id": "BigCodeBench/484", "solution": "import math\nimport numpy as np\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(start_time, end_time, step, columns=[\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"], sensor_statuses=[\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"]):\n    # Convert timestamps to datetime and calculate the number of steps\n    start_dt = datetime.fromtimestamp(start_time / 1000.0)\n    end_dt = datetime.fromtimestamp(end_time / 1000.0)\n    num_steps = int((end_time - start_time) / step)\n\n    # Initialize DataFrame\n    df = pd.DataFrame(index=range(num_steps), columns=columns)\n\n    # Generate timestamps\n    df['Timestamp'] = pd.date_range(start=start_dt, periods=num_steps, freq=f'{step}ms')\n\n    # Generate sensor data with noise\n    for i in range(1, len(columns) - 1):  # Skipping the first (Timestamp) and last (SensorStatus) columns\n        sensor_data = np.sin(np.linspace(0, 2 * math.pi, num_steps)) + np.random.normal(0, 0.1, num_steps)  # Example for 'Sensor1', adjust for 'Sensor2', 'Sensor3'\n        if i == 2:  # For 'Sensor3', we would use cosine or tan, but here we'll stick to sine for simplicity\n            sensor_data = np.cos(np.linspace(0, 2 * math.pi, num_steps)) + np.random.normal(0, 0.1, num_steps)\n        df[columns[i]] = sensor_data\n\n    # Generate random sensor statuses\n    df['SensorStatus'] = np.random.choice(sensor_statuses, size=num_steps)\n\n    return df"}
{"task_id": "BigCodeBench/485", "solution": "from datetime import datetime, timedelta\nimport pytz\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time):\n    timezones = ['UTC', 'America/Los_Angeles', 'Europe/Paris', 'Asia/Kolkata', 'Australia/Sydney']\n    colors = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\n    \n    # Convert start_time and end_time to datetime objects\n    start = datetime.strptime(start_time, \"%Y-%m-%d\")\n    end = datetime.strptime(end_time, \"%Y-%m-%d\")\n    \n    # Create an array of dates within the range\n    dates = np.arange(start, end + timedelta(days=1), timedelta(days=1))\n    \n    fig, ax = plt.subplots()\n    \n    for idx, tz in enumerate(timezones):\n        tz_obj = pytz.timezone(tz)\n        local_dates = [start.replace(tzinfo=pytz.utc).astimezone(tz_obj) for start in dates]\n        utc_dates = [dt.astimezone(pytz.utc) for dt in local_dates]\n        differences = [(utc - dt).total_seconds() / 3600 for utc, dt in zip(utc_dates, local_dates)]\n        \n        # Plot the differences\n        ax.plot(dates, differences, color=colors[idx % len(colors)], label=tz)\n\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Time Difference with UTC (hours)')\n    ax.set_title('Hourly Time Difference Between UTC and Specified Time Zones')\n    ax.legend()\n    ax.set_xticks(dates)\n    ax.xaxis.set_major_formatter(matplotlib.dates.DateFormatter('%Y-%m-%d'))\n    \n    return ax"}
{"task_id": "BigCodeBench/486", "solution": "import matplotlib.pyplot as plt\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, trend, seed=42):\n    np.random.seed(seed)\n    \n    # Generate timestamps\n    timestamps = pd.date_range(start=datetime.fromtimestamp(start_time/1000.0), \n                               end=datetime.fromtimestamp(end_time/1000.0), \n                               freq=f'{step}L')\n    \n    # Generate values from a normal distribution and add a linear trend\n    values = np.random.randn(len(timestamps)) + np.linspace(0, trend*len(timestamps), len(timestamps))\n    \n    # Create DataFrame\n    df = pd.DataFrame({'Time': timestamps, 'Value': values})\n    \n    # Plotting\n    ax = df.plot(x='Time', y='Value', title='Time Series with Trend')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    \n    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n    plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels\n    \n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/487", "solution": "import os\nimport pandas as pd\nimport re\ndef task_func(file_path: str) -> pd.DataFrame:\n    \"\"\"\n    Detailed function description as in the prompt.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    \n    log_pattern = re.compile(r'(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}) - (\\w+) - (.*)')\n    \n    log_data = []\n    with open(file_path, 'r') as file:\n        for line in file:\n            match = log_pattern.match(line)\n            if match:\n                timestamp, level, message = match.groups()\n                log_data.append({'Timestamp': timestamp, 'Level': level, 'Message': message})\n    \n    # If no logs matched, return an empty DataFrame with the correct columns\n    if not log_data:\n        return pd.DataFrame(columns=['Timestamp', 'Level', 'Message'])\n    \n    return pd.DataFrame(log_data)"}
{"task_id": "BigCodeBench/488", "solution": "import matplotlib.pyplot as plt\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, amplitude, period, seed=0):\n    np.random.seed(seed)\n    \n    # Generate timestamps\n    timestamps = pd.date_range(start=datetime.fromtimestamp(start_time/1000.0), \n                               end=datetime.fromtimestamp(end_time/1000.0), \n                               freq=str(step)+'ms')\n    \n    # Generate a sine wave with the given amplitude and period, adding some noise\n    values = amplitude * np.sin(2 * np.pi * (np.arange(len(timestamps)) / (period / 1000.0))) + np.random.randn(len(timestamps)) * 0.1\n    \n    # Create DataFrame\n    df = pd.DataFrame({'Timestamp': timestamps, 'Value': values})\n    \n    # Plotting\n    ax = df.plot(x='Timestamp', y='Value', figsize=(10, 5), title='Time Series with Seasonality')\n    ax.set_xlabel('Timestamp')\n    ax.set_ylabel('Value')\n    \n    return ax"}
{"task_id": "BigCodeBench/489", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport random\nUSERS = ['user1', 'user2', 'user3', 'user4', 'user5']\nACTIVITIES = ['login', 'logout', 'browse', 'search', 'purchase']\ndef task_func(epoch_milliseconds, seed=0):\n    if datetime.fromtimestamp(epoch_milliseconds / 1000) > datetime.now():\n        raise ValueError(\"Start time is after the current system time.\")\n    \n    random.seed(seed)\n    \n    # Convert the starting epoch time to a datetime object\n    start_time = datetime.fromtimestamp(epoch_milliseconds / 1000)\n    current_time = datetime.now()\n    \n    logs = []\n    while start_time < current_time:\n        user = random.choice(USERS)\n        activity = random.choice(ACTIVITIES)\n        time_record = start_time\n        logs.append({'User': user, 'Activity': activity, 'Time': time_record})\n        \n        # Increment time by a random number of seconds between 1 and 10\n        start_time += timedelta(seconds=random.randint(1, 10))\n    \n    # Convert the logs list into a DataFrame\n    df = pd.DataFrame(logs)\n    return df"}
{"task_id": "BigCodeBench/490", "solution": "import xmltodict\nimport json\ndef task_func(s, file_path):\n    \"\"\"\n    Converts an XML string into a dictionary representation and saves it as a JSON file.\n    \"\"\"\n    # Parse the XML string into a dictionary\n    xml_dict = xmltodict.parse(s)\n    \n    # Convert the dictionary to a JSON object and save it to a file\n    with open(file_path, 'w') as json_file:\n        json.dump(xml_dict, json_file)\n    \n    # Return the dictionary for immediate use\n    return xml_dict"}
{"task_id": "BigCodeBench/491", "solution": "import random\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\ndef task_func(epoch_milliseconds, seed=None):\n    if epoch_milliseconds < 0 or datetime.fromtimestamp(epoch_milliseconds/1000.0) > datetime.utcnow():\n        raise ValueError(\"Start time must be positive and before current time.\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    categories = ['Electronics', 'Clothing', 'Home', 'Books', 'Sports']\n    sales_data = {category: [] for category in categories}\n    start_date = datetime.fromtimestamp(epoch_milliseconds/1000.0)\n    current_date = start_date\n    \n    while current_date < datetime.utcnow():\n        for category in categories:\n            sales_data[category].append(random.randint(10, 50))\n        current_date += timedelta(days=1)\n    \n    days_since_start = [int((current_date - start_date).days) for current_date in sales_data[categories[0]]]\n    \n    plt.figure(figsize=(10, 6))\n    for category in categories:\n        plt.plot(days_since_start, sales_data[category], label=category)\n    plt.title('Sales Trend Since Epoch')\n    plt.xlabel('Days since (the start date)')\n    plt.ylabel('Sales units')\n    plt.legend()\n    plt.grid(True)\n    \n    return sales_data, plt.gca()"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(epoch_milliseconds, random_seed=0, products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"]):\n    assert isinstance(epoch_milliseconds, int), \"epoch_milliseconds must be an integer\"\n    assert isinstance(random_seed, int), \"random_seed must be an integer\"\n    assert len(products) == 5, \"products list must contain exactly 5 unique strings\"\n    assert all(isinstance(product, str) for product in products), \"All items in products must be strings\"\n    \n    random.seed(random_seed)\n    \n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    current_date = datetime.now()\n    \n    assert start_date < current_date, \"epoch_milliseconds must be before the current system time\"\n    \n    sales_data = []\n    while start_date <= current_date:\n        for product in products:\n            sales = random.randint(10, 50)\n            sales_data.append([product, start_date, sales])\n        start_date += timedelta(days=1)\n    \n    df = pd.DataFrame(sales_data, columns=['Product', 'Date', 'Sales'])\n    df['Date'] = pd.to_datetime(df['Date'])\n    return df"}
{"task_id": "BigCodeBench/493", "solution": "from datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(epoch_milliseconds, teams=[\"Team1\", \"Team2\", \"Team3\", \"Team4\", \"Team5\"], random_seed=0):\n    random.seed(random_seed)\n    # Convert epoch to datetime\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    current_date = datetime.now()\n    \n    # Calculate the number of days between the start date and now\n    delta = current_date - start_date\n    days = delta.days\n    \n    # Generate performance data for each team\n    performance_data = {team: [random.uniform(0.1, 1) for _ in range(days + 1)] for team in teams}\n    \n    # Create a figure and a set of subplots\n    fig, ax = plt.subplots()\n    \n    # Plot performance trend for each team\n    for team, data in performance_data.items():\n        ax.plot(range(days + 1), data, label=team)\n    \n    # Labeling\n    ax.set_xlabel('Days Since Start')\n    ax.set_ylabel('Performance')\n    ax.set_title('Team Performance Trend')\n    ax.legend()\n    \n    # Return the performance data and the figure\n    return performance_data, fig"}
{"task_id": "BigCodeBench/494", "solution": "from datetime import datetime\nimport pytz\nimport re\nfrom faker import Faker\ndef validate_timezone(tz):\n    \"\"\"Validates if a timezone is either in pytz.all_timezones or a valid UTC\u00b1HH:MM format.\"\"\"\n    if tz in pytz.all_timezones:\n        return True\n    match = re.match(r\"^UTC([+-]\\d{2}):(\\d{2})$\", tz)\n    return match is not None\ndef get_valid_timezones(timezones):\n    \"\"\"Filters and returns a list of valid timezones.\"\"\"\n    return [tz for tz in timezones if validate_timezone(tz)] or ['UTC']\ndef task_func(epoch_milliseconds, seed=0, timezones=[\"UTC\"]):\n    fake = Faker()\n    if seed is not None:\n        fake.seed_instance(seed)\n    \n    event_time = datetime.fromtimestamp(epoch_milliseconds / 1000.0, tz=pytz.utc)\n    event_name = fake.name()\n    \n    valid_timezones = get_valid_timezones(timezones)\n    selected_timezone = fake.choice(valid_timezones) if valid_timezones else 'UTC'\n    \n    # Convert event time to the selected timezone\n    event_time_in_tz = event_time.astimezone(pytz.timezone(selected_timezone))\n    \n    return {event_name: [{'date': event_time_in_tz.date(), 'time': event_time_in_tz.time(), 'timezone': selected_timezone}]}"}
{"task_id": "BigCodeBench/495", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(days, random_seed=0):\n    np.random.seed(random_seed)\n    \n    # Create a date range starting from '2023-01-01' for the given number of days\n    dates = pd.date_range(start='2023-01-01', periods=days, freq='D')\n    \n    # Define the columns for the DataFrame\n    columns = ['Groceries', 'Entertainment', 'Rent', 'Utilities', 'Miscellaneous']\n    \n    # If days is 0, return an empty DataFrame with the correct columns\n    if days == 0:\n        return pd.DataFrame(columns=columns, index=dates)\n    \n    # Generate random data and create the DataFrame\n    data = {col: np.random.randint(0, 101, size=days) for col in columns}\n    df = pd.DataFrame(data, index=dates)\n    \n    return df"}
{"task_id": "BigCodeBench/496", "solution": "from datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be at least 1\")\n    \n    np.random.seed(random_seed)\n    \n    # Generate dates for the past 'days_in_past' days\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days_in_past)\n    dates = [end_date - timedelta(days=x) for x in range(days_in_past)]\n    \n    # Generate random temperatures between 15 and 35 degrees Celsius\n    temperatures = np.random.randint(low=15, high=35, size=days_in_past)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(dates, temperatures, marker='o')\n    ax.set_title('Temperature Trend Over the Past Week')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%Y-%m-%d'))\n    plt.xticks(dates)  # Ensuring all dates are shown as per the example requirement\n    \n    return ax"}
{"task_id": "BigCodeBench/497", "solution": "from datetime import datetime, timedelta\nimport pytz\nimport calendar\ndef task_func(days_in_past=7):\n    if days_in_past < 0:\n        raise ValueError(\"'days_in_past' must be a non-negative integer.\")\n    \n    # Get the UTC datetime and go back 'days_in_past' days\n    utc_now = datetime.now(pytz.utc)\n    target_date = utc_now - timedelta(days=days_in_past)\n    \n    # Get the weekday (0 is Monday, 6 is Sunday)\n    weekday_num = target_date.weekday()\n    \n    # Convert the weekday number to its name\n    weekday = calendar.day_name[weekday_num]\n    \n    return weekday"}
{"task_id": "BigCodeBench/498", "solution": "import xmltodict\nimport json\ndef task_func(s, save_json=False, json_file_path=None):\n    if not s.strip():\n        raise ValueError(\"Input XML string is empty or contains only whitespace.\")\n    \n    # Convert XML string to dictionary\n    xml_dict = xmltodict.parse(s)\n    \n    # If save_json is True, ensure a file path is provided\n    if save_json and json_file_path is None:\n        raise ValueError(\"json_file_path is required when save_json is True.\")\n    \n    # Save as JSON if required\n    if save_json and json_file_path:\n        with open(json_file_path, 'w') as json_file:\n            json.dump(xml_dict, json_file)\n    \n    return xml_dict"}
{"task_id": "BigCodeBench/499", "solution": "import xlwt\nimport os\nimport io\nimport csv\ndef task_func(csv_content, filename):\n    \"\"\"\n    Converts CSV content into an Excel file and saves it with the given filename.\n    \"\"\"\n    # Convert CSV content to a list of rows\n    csv_reader = csv.reader(io.StringIO(csv_content))\n    data = list(csv_reader)\n    \n    # Create a new Excel workbook\n    workbook = xlwt.Workbook()\n    sheet = workbook.add_sheet(\"Sheet1\")\n    \n    # Write data into the Excel workbook\n    for row_index, row in enumerate(data):\n        for col_index, cell in enumerate(row):\n            sheet.write(row_index, col_index, cell)\n    \n    # Save the workbook with the given filename\n    workbook.save(filename)\n    \n    # Return the absolute path of the created Excel file\n    return os.path.abspath(filename)"}
{"task_id": "BigCodeBench/500", "solution": "import os\nfrom collections import OrderedDict\nimport xlwt\nFIELDS = ['ID', 'Name', 'Age']\ndef task_func(values, filename):\n    \"\"\"\n    Writes a list of OrderedDicts to an Excel file.\n    \"\"\"\n    # Create a new workbook and sheet\n    workbook = xlwt.Workbook()\n    sheet = workbook.add_sheet('Data')\n\n    # Write column headers\n    for col_num, field in enumerate(FIELDS):\n        sheet.write(0, col_num, field)\n\n    # Write data rows\n    for row_num, record in enumerate(values, start=1):\n        for col_num, field in enumerate(FIELDS):\n            sheet.write(row_num, col_num, record.get(field, \"\"))\n\n    # Save the workbook to the specified filename\n    path = os.path.abspath(filename)\n    workbook.save(path)\n\n    return path"}
{"task_id": "BigCodeBench/501", "solution": "import json\nimport xlwt\nimport os\nimport pandas as pd\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    try:\n        # Parse JSON string\n        data = json.loads(json_str)\n        \n        # Check if JSON is an empty list\n        if not data:\n            # Create a new workbook and add a blank sheet\n            workbook = xlwt.Workbook()\n        else:\n            # Convert JSON data to DataFrame\n            df = pd.DataFrame(data)\n            \n            # Write DataFrame to Excel using pandas\n            with pd.ExcelWriter(filename, engine='xlwt') as writer:\n                df.to_excel(writer, sheet_name=sheet_name, index=False)\n            \n            # Get workbook for further handling if needed\n            workbook = writer.book\n        \n        # Save the workbook\n        workbook.save(filename)\n        \n        # Return the absolute path of the created Excel file\n        return os.path.abspath(filename)\n    \n    except ValueError as ve:\n        raise ValueError(\"Invalid JSON content.\") from ve\n    except TypeError as te:\n        raise TypeError(\"JSON content must be a string, bytes, or bytearray.\") from te\n    except Exception as e:\n        raise Exception(f\"Error writing to Excel file: {e}\")"}
{"task_id": "BigCodeBench/502", "solution": "import pandas as pd\nimport random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\ndef task_func(days_in_past=7, random_seed=0):\n    random.seed(random_seed)\n    \n    # Generate dates in the past\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days_in_past)\n    dates = [end_date - timedelta(days=x) for x in range(days_in_past)]\n    \n    # List of activities\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    \n    # Generate random data\n    data = {activity: [random.randint(0, 120) for _ in dates] for activity in activities}\n    \n    # Create DataFrame\n    df = pd.DataFrame(data, index=dates)\n    df = df.reset_index().rename(columns={'index': 'Date'})\n    df['Date'] = pd.to_datetime(df['Date'])\n    \n    # Plotting\n    ax = sns.lineplot(x=\"Date\", y=\"Duration\", hue=\"Activity\", data=df)\n    plt.title(f'Daily Activity Durations for the Last {days_in_past} Days')\n    plt.xlabel('Date')\n    plt.ylabel('Duration (minutes)')\n    plt.xticks(rotation=45)\n    \n    return ax, df"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\ndef task_func(days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0):\n    np.random.seed(random_seed)  # Ensure reproducibility\n    \n    # Calculate the start date, considering today's date\n    end_date = datetime.today()\n    start_date = end_date - timedelta(days=days_in_past)\n    \n    # Generate random stock prices within the range [0.0, 1.0)\n    prices = np.random.rand(days_in_past, len(stock_names))\n    \n    # Create a DataFrame\n    df = pd.DataFrame(prices, index=pd.date_range(start_date, periods=days_in_past), columns=stock_names)\n    \n    return df"}
{"task_id": "BigCodeBench/504", "solution": "import hashlib\nimport rsa\nimport base64\ndef load_private_key(file_path):\n    with open(file_path, 'rb') as key_file:\n        private_key = rsa.PrivateKey.load_pkcs1(key_file.read())\n    return private_key\ndef task_func(file_path):\n    \"\"\"\n    Generates a signed hash of a file's contents using RSA encryption.\n    \"\"\"\n    # Load the private key\n    private_key_path = 'private.pem'  # Ensure this file exists and is the correct private key\n    private_key = load_private_key(private_key_path)\n\n    # Read file contents\n    with open(file_path, 'rb') as file:\n        file_contents = file.read()\n\n    # Hash the file contents with SHA-256\n    sha256_hash = hashlib.sha256(file_contents).digest()\n\n    # Sign the hash with the private key\n    signature = rsa.sign(sha256_hash, private_key, 'SHA-256')\n\n    # Encode the signature in base64\n    base64_signature = base64.b64encode(signature).decode('utf-8')\n\n    return base64_signature"}
{"task_id": "BigCodeBench/505", "solution": "import hashlib\nimport hmac\ndef task_func(secret, message):\n    \"\"\"\n    Generates an HMAC (Hash-based Message Authentication Code) signature for a given message using a secret key.\n    The function uses SHA-256 as the hash function to create the HMAC signature.\n\n    Parameters:\n    secret (str): The secret key used for HMAC generation.\n    message (str): The message for which the HMAC signature is to be generated.\n\n    Returns:\n    str: The HMAC signature of the message, returned as a hexadecimal string.\n    \"\"\"\n    hmac_signature = hmac.new(secret.encode(), message.encode(), hashlib.sha256).hexdigest()\n    return hmac_signature"}
{"task_id": "BigCodeBench/506", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\ndef task_func(column, data):\n    # Check if data is empty\n    if not data:\n        return {'sum': np.nan, 'mean': np.nan, 'min': np.inf, 'max': -np.inf, 'plot': None}\n    \n    # Convert data into DataFrame\n    df = pd.DataFrame(data, columns=['Date', 'Temperature', 'Humidity', 'Wind Speed', 'Precipitation'])\n    \n    # Ensure the column exists in the DataFrame\n    if column not in df.columns:\n        raise ValueError(f\"Invalid column name. Valid columns are: {', '.join(df.columns)}\")\n    \n    # Calculate statistics\n    stats = df[column].agg(['sum', 'mean', 'min', 'max'])\n    \n    # Generate histogram\n    plt.figure(figsize=(10, 6))\n    plt.hist(df[column], bins=20, color='skyblue', edgecolor='black')\n    plt.title(f'Distribution of {column}')\n    plt.xlabel(column)\n    plt.ylabel('Frequency')\n    plot = plt.bar([1], [1])  # Return a BarContainer to fulfill the return type requirement\n    \n    # Return results\n    return {**stats.to_dict(), 'plot': plot}\ndata = [[datetime(2022, 1, 1), -5, 80, 10, 0], [datetime(2022, 1, 3), -2, 83, 15, 0]]"}
{"task_id": "BigCodeBench/507", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(column, data):\n    valid_columns = {'Date', 'Open', 'High', 'Low', 'Close', 'Volume'}\n    if column not in valid_columns:\n        raise ValueError(f\"Invalid column name. Valid options are: {', '.join(valid_columns)}\")\n\n    # Convert data into a DataFrame\n    df = pd.DataFrame(data, columns=['Date', 'Open', 'High', 'Low', 'Close', 'Volume'])\n    \n    # Convert 'Date' to a datetime object if it's present, assuming it's a string for the sake of this example\n    if 'Date' in df.columns:\n        df['Date'] = pd.to_datetime(df['Date'])\n    \n    # Calculate statistics\n    stats = df[column].agg(['sum', 'mean', 'min', 'max'])\n    \n    # Replace NaN with np.nan to ensure compatibility with the requirement\n    stats = stats.fillna(np.nan)\n    \n    return stats.to_dict()\ndata = [['2022-01-01', 100, 105, 95, 102, 10000]]"}
{"task_id": "BigCodeBench/508", "solution": "import hashlib\nimport os\ndef task_func(file_path1, file_path2):\n    \"\"\"\n    Compares two files to determine if they are identical by computing and comparing their MD5 hash values.\n    This method is effective for checking if two files have exactly the same content.\n\n    Parameters:\n    file_path1 (str): The file path of the first file.\n    file_path2 (str): The file path of the second file.\n\n    Returns:\n    bool: Returns True if the MD5 hashes of the files match (indicating identical content), False otherwise.\n\n    Raises:\n    FileNotFoundError: if either file_path1 or file_path2 does not exist.\n    \"\"\"\n\n    # Check if both files exist\n    if not os.path.exists(file_path1) or not os.path.exists(file_path2):\n        raise FileNotFoundError(\"One or both files do not exist.\")\n\n    # Initialize MD5 hash objects\n    hash1 = hashlib.md5()\n    hash2 = hashlib.md5()\n\n    # Open files in binary mode and update hash objects with file contents\n    with open(file_path1, 'rb') as file1:\n        for chunk in iter(lambda: file1.read(4096), b''):\n            hash1.update(chunk)\n\n    with open(file_path2, 'rb') as file2:\n        for chunk in iter(lambda: file2.read(4096), b''):\n            hash2.update(chunk)\n\n    # Compare the hexadecimal digest of the hash objects\n    return hash1.hexdigest() == hash2.hexdigest()"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nimport os\nfrom difflib import ndiff\ndef read_csv(file_path, delimiter=',', quotechar='\"'):\n    \"\"\"Read CSV file into list of lists.\"\"\"\n    with open(file_path, 'r', encoding='utf-8') as file:\n        csv_reader = csv.reader(file, delimiter=delimiter, quotechar=quotechar)\n        data = [row for row in csv_reader]\n    return data\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    try:\n        data1 = read_csv(file_path1, delimiter, quotechar)\n        data2 = read_csv(file_path2, delimiter, quotechar)\n        \n        if not data1 or not data2:\n            raise ValueError(\"Files cannot be empty.\")\n            \n        diff = list(ndiff(data1, data2))\n        \n        report = []\n        for i, line in enumerate(diff, start=1):\n            if line.startswith('- ') or line.startswith('+ '):\n                status = line[0]\n                content = line[2:].strip()\n                report.append({'Line Number': i, 'Status': status, 'Content': content})\n            elif not line.startswith('  '):  # This handles lines that are different but not indicated by difflib\n                status = ' '\n                content = line.strip()\n                report.append({'Line Number': i, 'Status': status, 'Content': content})\n        \n        return pd.DataFrame(report)\n    \n    except FileNotFoundError:\n        raise FileNotFoundError(\"One or both files not found.\")\n    except Exception as e:\n        raise Exception(f\"An error occurred: {str(e)}\")"}
{"task_id": "BigCodeBench/510", "solution": "import difflib\nimport gzip\ndef task_func(file_path1, file_path2):\n    \"\"\"\n    Compares the contents of two gzip files and returns a string describing the differences between them.\n    It reads the contents of each file, then uses difflib to compute and return the differences. \n    Only differences are returned, with an empty string indicating no differences.\n\n    Parameters:\n    file_path1 (str): The file path of the first gzip file.\n    file_path2 (str): The file path of the second gzip file.\n\n    Returns:\n    str: A string describing the differences between the two files' contents.\n    \"\"\"\n    with gzip.open(file_path1, 'rt') as f1, gzip.open(file_path2, 'rt') as f2:\n        file1_content = f1.readlines()\n        file2_content = f2.readlines()\n    \n    diff = difflib.unified_diff(file1_content, file2_content, fromfile=file_path1, tofile=file_path2)\n    \n    # Join the differences into a single string and remove leading/trailing whitespaces\n    diff_str = '\\n'.join(diff).strip()\n    \n    return diff_str"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    valid_columns = {'Age', 'Salary', 'Experience'}\n    if column not in valid_columns:\n        raise KeyError(f\"Invalid column. Valid options are: {', '.join(valid_columns)}\")\n    \n    # Convert data to DataFrame\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    \n    # Handle empty data\n    if df.empty:\n        return ({'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}, None)\n    \n    # Analyze the specified column\n    stats = df[column].describe().to_dict()\n    # Replace infinity with NaN for mean, min, max if they occur due to empty column\n    for key in ['mean', 'min', 'max']:\n        if not np.isfinite(stats[key]):\n            stats[key] = np.nan\n    \n    # Visualize with a pie chart, but this logic doesn't fit for 'Age' as labels for a pie chart\n    # due to the nature of the data. Typically, pie charts are used for categorical data, not for 'Age', 'Salary', or 'Experience'.\n    # However, to adhere to the task's requirement, we'll visualize 'Age' as an example, understanding it's an unusual use case.\n    if column == 'Age':\n        ax = plt.pie(df['Age'], labels=df['Age'], autopct='%1.1f%%')\n    else:\n        # If not 'Age', we'd normally not use a pie chart for continuous data, but for demonstration:\n        # Let's assume we're visualizing distribution by creating bins, which is still unconventional.\n        ax = df[column].hist(bins=10, edgecolor='black')\n        plt.title(f'Distribution of {column}')\n    \n    plt.tight_layout()\n    plt.show()  # Show the plot\n    \n    return (stats, ax)\ndata = [[25, 50000, 2], [30, 75000, 5], [35, 100000, 7], [40, 125000, 10], [45, 150000, 12]]"}
{"task_id": "BigCodeBench/512", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Check for negative values and raise ValueError if found\n    for record in data:\n        if record[1] < 0 or record[2] < 0:\n            raise ValueError(\"Quantity sold or total sales cannot be negative.\")\n            \n    # Convert data into a DataFrame\n    df = pd.DataFrame(data, columns=['Product', 'Quantity Sold', 'Total Sales'])\n    \n    # Validate column input\n    if column not in df.columns:\n        raise ValueError(\"Column must be 'Product', 'Quantity Sold', or 'Total Sales'.\")\n    \n    # Calculate statistics\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max(),\n    }\n    \n    # Create bar chart\n    if column != 'Product':\n        plot = df.plot(kind='bar', x='Product', y=column, title=f'Bar Chart of {column}')\n    else:\n        plot = df.plot(kind='bar', x=column, title=f'Bar Chart of {column}')\n    \n    # Return statistics and the bar chart Axes object\n    return stats, plot"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\ndef task_func(column, data):\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    \n    # Validate column\n    allowed_columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    if column not in allowed_columns:\n        raise KeyError(f\"Invalid column. Allowed columns are: {', '.join(allowed_columns)}\")\n    \n    # Validate non-negative numeric values\n    for entry in data:\n        if any(value < 0 for value in entry[1:]):\n            raise ValueError(\"Numeric values for steps, calories burned, and distance walked must be non-negative.\")\n    \n    # Convert data into DataFrame\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n    df['Date'] = pd.to_datetime(df['Date'])  # Ensure Date is datetime type\n    \n    # Analysis\n    analysis = df[column].describe().to_dict()\n    \n    # Plotting\n    plt.figure(figsize=(10, 5))\n    ax = df.plot(x='Date', y=column, kind='line', title=f'Line Chart of {column}', legend=False)\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column.capitalize())\n    \n    return analysis, ax"}
{"task_id": "BigCodeBench/514", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(array):\n    \"\"\"\n    Create a Pandas DataFrame from a 2D list and plot the sum of each column.\n    \"\"\"\n    # Create DataFrame\n    df = pd.DataFrame(array, columns=COLUMNS)\n    \n    # Calculate the sum of each column\n    column_sums = df.sum(axis=0)\n    \n    # Plot the sum of each column\n    fig, ax = plt.subplots()\n    ax.bar(column_sums.index, column_sums.values)\n    ax.set_title('Sum of Each Column')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Sum')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/515", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(array):\n    if not array or any(len(row) != 5 for row in array):\n        raise ValueError(\"Input array must be non-empty and all sublists must have length 5.\")\n    \n    # Convert the 2D list into a pandas DataFrame\n    df = pd.DataFrame(array, columns=['A', 'B', 'C', 'D', 'E'])\n    \n    # Calculate the correlation matrix\n    corr_matrix = df.corr()\n    \n    # Generate a heatmap using seaborn\n    plt.figure(figsize=(8, 6))\n    ax = sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True, linewidths=.5)\n    \n    # Return the DataFrame and the heatmap's Axes object\n    return df, ax"}
{"task_id": "BigCodeBench/516", "solution": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\ndef task_func(array: list, random_seed: int = 0) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    # Validate input\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"Each sub-list in the array must have exactly 5 elements.\")\n    \n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n    \n    # Create DataFrame\n    df = pd.DataFrame(array, columns=['A', 'B', 'C', 'D', 'Response'])\n    \n    # Ensure the data types are appropriate (e.g., numeric for regression)\n    df = df.astype(float)\n    \n    # Separate independent variables (X) and dependent variable (y)\n    X = df[['A', 'B', 'C', 'D']]\n    y = df['Response']\n    \n    # Add a constant to the model (intercept term)\n    X = sm.add_constant(X)\n    \n    # Perform multiple linear regression\n    model = sm.OLS(y, X).fit()\n    \n    return df, model"}
{"task_id": "BigCodeBench/517", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    np.random.seed(random_seed)  # Set the random seed for reproducibility\n    \n    # Convert the 2D list into a pandas DataFrame\n    df = pd.DataFrame(array)\n    \n    # Apply PCA for dimensionality reduction to the DataFrame\n    pca = PCA(n_components=2)\n    transformed = pca.fit_transform(df)\n    \n    return df, transformed"}
{"task_id": "BigCodeBench/518", "solution": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\ndef task_func(array):\n    \"\"\"\n    The function defined above in the problem description.\n    \"\"\"\n    # Check if all elements are numbers (integers or floats)\n    if not all(isinstance(item, (int, float)) for sublist in array for item in sublist):\n        raise TypeError(\"All elements in the array must be integers or floats.\")\n    \n    # Convert 2D list to DataFrame with alphabetical column names\n    column_names = [chr(i) for i in range(65, 65+len(array[0]))]  # ASCII values for 'A' to 'Z'\n    df = pd.DataFrame(array, columns=column_names)\n    \n    # Calculate Euclidean distance matrix\n    distance_matrix = squareform(pdist(df, metric='euclidean'))\n    \n    # Convert distance matrix to DataFrame for better readability\n    distance_df = pd.DataFrame(distance_matrix, index=column_names, columns=column_names)\n    \n    return df, distance_df"}
{"task_id": "BigCodeBench/519", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Check if all values in dictionaries are integers\n    for sale in data:\n        for value in sale.values():\n            if not isinstance(value, (int, float)) or isinstance(value, bool):\n                raise TypeError(\"Sales quantities must be int or float.\")\n                \n    # Convert list of dictionaries to pandas DataFrame\n    df = pd.DataFrame(data).fillna(0)\n    \n    # Transpose DataFrame to have time on rows and fruits on columns\n    df = df.transpose()\n    df.index = pd.RangeIndex(1, len(df) + 1)  # Simple index as 'Time'\n    \n    # Generate line chart\n    ax = df.plot(kind='line', title='Fruit Sales over Time', xlabel='Time', ylabel='Sales Quantity')\n    \n    return ax"}
{"task_id": "BigCodeBench/520", "solution": "import collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return {}, None\n\n    # Validate data and sum quantities\n    total_sales = collections.defaultdict(int)\n    for sale in data:\n        for fruit, quantity in sale.items():\n            if quantity < 0:\n                raise ValueError(\"Sales quantity must not be negative.\")\n            total_sales[fruit] += quantity\n\n    # Define fruit colors\n    fruit_colors = {'apple': 'red', 'banana': 'yellow', 'cherry': 'red', 'blueberry': 'blue', 'grape': 'purple'}\n    \n    # Create bar chart\n    if total_sales:\n        fig, ax = plt.subplots()\n        fruits = list(total_sales.keys())\n        sales = list(total_sales.values())\n        colors = [fruit_colors.get(fruit, 'gray') for fruit in fruits]  # Default to gray if fruit color not defined\n        ax.bar(fruits, sales, color=colors)\n        ax.set_xlabel('Fruits')\n        ax.set_ylabel('Total Sales')\n        ax.set_title('Total Fruit Sales')\n        plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n        plt.tight_layout()  # Adjust layout\n        plt.show()\n        return dict(total_sales), ax\n    else:\n        return dict(total_sales), None"}
{"task_id": "BigCodeBench/521", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_list):\n    # Flatten the list of dictionaries into a single dictionary where keys are tuples (student, test number)\n    # and values are scores.\n    flat_data = {(name, idx): score for idx, data in enumerate(data_list, start=1) for name, score in data.items()}\n    \n    # Convert the flattened dictionary into a DataFrame for plotting.\n    df = pd.DataFrame.from_dict(flat_data, orient='index', columns=['Score'])\n    df.reset_index(inplace=True)\n    df.rename(columns={'index': 'Student/Test'}, inplace=True)\n    df[['Student', 'Test']] = df['Student/Test'].str.split('/', expand=True).astype({'Test': int})\n    \n    # Pivot the data to have tests as columns and students as rows.\n    pivot_df = df.pivot(index='Student', columns='Test', values='Score')\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    for student in pivot_df.index:\n        ax.plot(pivot_df.loc[student], label=student, marker='o')\n    \n    # Customizing the plot\n    ax.set_xlabel('Test Number')\n    ax.set_ylabel('Score')\n    ax.set_title('Student Scores Over Multiple Tests')\n    ax.legend()\n    ax.grid(True)\n    \n    # Return the Axes object\n    return ax\ndata = [{'John': 5, 'Jane': 10}, {'John': 6, 'Jane': 8}, {'John': 5, 'Jane': 9}]"}
{"task_id": "BigCodeBench/522", "solution": "import collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return None\n\n    # Flatten the dictionaries into a single dictionary and handle missing keys\n    all_students = set(key for dic in data for key in dic)\n    scores = {student: [dic.get(student, None) for dic in data] for student in all_students}\n\n    # Check for negative scores and raise ValueError if found\n    if any(score < 0 for scores_list in scores.values() for score in scores_list):\n        raise ValueError(\"Negative scores are not allowed.\")\n\n    # Calculate average scores, ignoring None\n    avg_scores = {student: sum(score for score in scores_list if score is not None) / len(scores_list)\n                  for student, scores_list in scores.items()}\n\n    # Create a bar chart\n    if avg_scores:\n        students = list(avg_scores.keys())\n        scores = list(avg_scores.values())\n        colors = ['red', 'yellow', 'green', 'blue', 'purple'][:len(students)]  # Ensure color list doesn't exceed student count\n\n        ax = plt.figure().add_subplot(111)\n        ax.bar(students, scores, color=colors)\n        ax.set_xlabel('Student')\n        ax.set_ylabel('Average Score')\n        ax.set_title('Average Student Scores')\n        plt.xticks(rotation=0)  # Keep the x-axis labels horizontal\n        plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels\n        plt.show()\n        return ax\n    else:\n        return None\ndata = [{'John': 5, 'Jane': 10, 'Joe': 7},\n        {'John': 6, 'Jane': 8, 'Joe': 10},\n        {'John': 5, 'Jane': 9, 'Joe': 8},\n        {'John': 7, 'Jane': 10, 'Joe': 9}]"}
{"task_id": "BigCodeBench/523", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Combine a list of dictionaries with the same keys into a single dictionary, turn it into a\n    Pandas DataFrame and create a line plot of the data.\n    \"\"\"\n    if not data:  # Return None if the data list is empty\n        return None\n\n    # Combine list of dictionaries into a single dictionary and convert it to DataFrame\n    df = pd.DataFrame(data).transpose()\n\n    # Create a line plot\n    fig, ax = plt.subplots()\n    df.plot(ax=ax)\n\n    # Set the title and labels for the axes\n    ax.set_title('Data over Time')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Data Points')\n\n    # Return the axes object\n    return ax"}
{"task_id": "BigCodeBench/524", "solution": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    \n    if not all(isinstance(d, dict) and all(isinstance(val, (int, float)) for val in d.values()) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries with numeric values.\")\n    \n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for entry in data:\n        for key, value in entry.items():\n            stats[key]['mean'] += value\n            stats[key]['std'] += value**2\n    n = len(data)\n    for key in stats:\n        stats[key]['mean'] /= n\n        stats[key]['std'] = np.sqrt((stats[key]['std'] / n) - (stats[key]['mean']**2))\n    \n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(key, [stats[key]['mean']], yerr=[stats[key]['std']], capsize=10)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel('Value')\n        axes.append(ax)\n    \n    return dict(stats), axes"}
{"task_id": "BigCodeBench/525", "solution": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(input_file):\n    # Load data from JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Initialize dictionary to store results\n    result = defaultdict(lambda: {'mean': 0, 'median': 0})\n    data_dict = defaultdict(list)\n    \n    # Populate data_dict and calculate mean and median\n    for record in data:\n        for key, value in record.items():\n            data_dict[key].append(value)\n            result[key]['mean'] += value\n            result[key]['median'] = np.median(data_dict[key])  # Update median after each addition\n    \n    # Correct mean calculation (dividing by total number of values)\n    for key in result:\n        result[key]['mean'] /= len(data)\n        result[key]['median'] = np.median(data_dict[key])  # Final median calculation\n    \n    # Create plots\n    plots = []\n    for key in result:\n        values = data_dict[key]\n        fig, ax = plt.subplots()\n        ax.bar(['Mean', 'Median'], [result[key]['mean'], result[key]['median']], color=['skyblue', 'salmon'])\n        ax.set_title(f'Statistics for {key}')\n        ax.set_ylabel('Value')\n        ax.set_xlabel('Statistic')\n        plots.append(ax)\n    \n    return dict(result), plots"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n    \"\"\"\n    Read a list of dictionaries from a JSON file, calculate the mean and median for each key,\n    (ignoring non-numeric or missing values), and convert the results into a Pandas DataFrame.\n    \"\"\"\n    # Load data from JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    \n    # Initialize defaultdict to handle missing keys\n    all_data = defaultdict(list)\n    \n    # Populate the defaultdict with numeric values, ignoring non-numeric\n    for record in data:\n        for key, value in record.items():\n            try:\n                # Attempt to convert to float, ignore if not possible\n                numeric_value = float(value)\n                all_data[key].append(numeric_value)\n            except ValueError:\n                continue\n    \n    # Calculate mean and median for each key\n    stats = {}\n    for key, values in all_data.items():\n        if values:  # Ensure the list is not empty\n            stats[key] = {'mean': np.mean(values), 'median': np.median(values)}\n        else:  # If all values were non-numeric or missing, set stats as NaN\n            stats[key] = {'mean': np.nan, 'median': np.nan}\n    \n    # Convert to DataFrame and sort by keys\n    df = pd.DataFrame.from_dict(stats, orient='index').reset_index()\n    df = df.rename(columns={'index': 'variable', 0: 'mean', 1: 'median'})\n    df = df.set_index('variable').sort_index()\n    \n    return df"}
{"task_id": "BigCodeBench/527", "solution": "import json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file: str) -> tuple:\n    \"\"\"\n    Read a list of dictionaries from a JSON file, calculate mean and median for each key,\n    and create a box plot.\n    \"\"\"\n    # Read JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Prepare data for statistics\n    data_stats = defaultdict(list)\n    for record in data:\n        for key, value in record.items():\n            data_stats[key].append(value)\n    \n    # Calculate mean and median\n    results = {key: {'mean': np.mean(values), 'median': np.median(values)} for key, values in data_stats.items()}\n    \n    # Convert to DataFrame for plotting\n    df = pd.DataFrame.from_dict(data_stats, orient='index', columns=['Values'])\n    \n    # Create box plot\n    fig, ax = plt.subplots()\n    sns.boxplot(data=df, ax=ax)\n    ax.set_title('Box Plot of Values for Each Key')\n    ax.set_ylabel('Values')\n    ax.set_xlabel('Keys')\n    \n    # Return results and the box plot axis\n    return results, ax"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    if not file_path.endswith('.csv'):\n        raise ValueError(\"The file must be a CSV file with a .csv extension.\")\n    \n    duplicates = Counter()\n    unique_rows = set()\n    \n    with open(file_path, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            # Convert row to tuple for hashing in set and Counter\n            row_tuple = tuple(row)\n            if row_tuple in unique_rows:\n                duplicates[row_tuple] += 1\n            else:\n                unique_rows.add(row_tuple)\n    \n    # Convert duplicates Counter to DataFrame\n    df_duplicates = pd.DataFrame(list(duplicates.items()), columns=['Row', 'Count'])\n    \n    # Plotting\n    ax = df_duplicates.plot(kind='bar', x='Row', y='Count', figsize=(10, 6), legend=False)\n    plt.title('Duplicate Rows Count')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    \n    return duplicates, ax"}
{"task_id": "BigCodeBench/529", "solution": "from collections import Counter\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(num_rolls, num_dice, plot_path=None, random_seed=0):\n    random.seed(random_seed)  # Set the random seed for reproducibility\n    \n    # Simulate rolling 'num_dice' dice 'num_rolls' times\n    rolls = [sum(random.randint(1, 6) for _ in range(num_dice)) for _ in range(num_rolls)]\n    \n    # Count the frequency of each sum\n    counts = Counter(rolls)\n    \n    # Plotting the distribution\n    fig, ax = plt.subplots()\n    ax.bar(counts.keys(), counts.values(), color='blue')\n    ax.set_xlabel('Sum of Dice Roll')\n    ax.set_ylabel('Count')\n    ax.set_title(f'Distribution of Dice Roll Sums (Rolls={num_rolls}, Dice={num_dice})')\n    \n    # Save the plot if a path is provided\n    if plot_path:\n        plt.savefig(plot_path)\n    \n    # Show the plot (optional, can be commented out if not needed)\n    plt.show()\n    \n    return counts, ax"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    if df.empty:\n        raise ValueError(\"DataFrame cannot be empty.\")\n    if df['age'].lt(0).any():\n        raise ValueError(\"Age cannot be negative.\")\n    \n    # Rounding down the age to the nearest integer\n    df['age'] = df['age'].apply(np.floor)\n    \n    # Identifying duplicate names\n    duplicates = df[df.duplicated(['name'], keep=False)]\n    \n    if duplicates.empty:\n        # No duplicates, return empty counter and None for the axes\n        return Counter(), None\n    \n    # Age distribution among duplicate names\n    age_distribution = Counter(duplicates['age'])\n    \n    # Extracting unique names to find the age range for duplicates\n    unique_names_duplicates = duplicates['name'].unique()\n    \n    # Creating a histogram for age distribution among duplicates\n    fig, ax = plt.subplots()\n    sns.histplot(data=duplicates, x='age', bins=np.arange(min(duplicates['age'])-0.5, max(duplicates['age'])+1.5, 1), ax=ax)\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n    ax.set_title('Age Distribution Among Duplicate Names')\n    \n    return age_distribution, ax"}
{"task_id": "BigCodeBench/531", "solution": "import pandas as pd\nfrom collections import Counter\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=None, n_init=10):\n    # Identify duplicate points\n    duplicates = Counter(zip(df['x'], df['y']))\n    unique_points = df.drop_duplicates(subset=['x', 'y'])\n    \n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    unique_points['cluster'] = kmeans.fit_predict(unique_points[['x', 'y']])\n    \n    # Plotting the clusters\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(unique_points['x'], unique_points['y'], c=unique_points['cluster'], cmap='viridis')\n    plt.title('KMeans Clustering')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.colorbar(scatter, ax=ax, label='Cluster')\n    \n    return duplicates, unique_points, ax"}
{"task_id": "BigCodeBench/532", "solution": "import pandas as pd\nfrom collections import Counter\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n    # Count duplicate values\n    duplicates = Counter(df['value'].value_counts())\n\n    # Remove duplicates to analyze the distribution of all values\n    unique_values = df['value'].drop_duplicates()\n\n    # Plotting the histogram\n    fig, ax = plt.subplots()\n    ax.hist(unique_values, bins=bins, alpha=0.6, color='green', label='Data Histogram')\n    \n    # Fit a normal distribution to the data\n    mu, std = norm.fit(unique_values)\n    x = np.linspace(unique_values.min(), unique_values.max(), 100)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2, label='Normal Distribution Fit')\n    \n    ax.set_title('Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n\n    plt.tight_layout()\n    plt.show()\n\n    return duplicates, ax"}
{"task_id": "BigCodeBench/533", "solution": "import numpy as np\nimport secrets\nimport hashlib\nimport base64\ndef task_func(num, from_base, to_base, alphabet):\n    if from_base < 2 or to_base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2.\")\n    \n    # Convert number to base 10\n    try:\n        num_in_base10 = int(num, from_base)\n    except ValueError:\n        raise ValueError(f\"Invalid number '{num}' for base {from_base}.\")\n    \n    # Convert to the target base\n    converted_num = np.base_repr(num_in_base10, base=to_base)\n    \n    # Generate a random salt\n    salt = secrets.token_hex(16)  # 32 bytes in hexadecimal\n    \n    # Concatenate the converted number with the salt\n    combined = converted_num + salt\n    \n    # Hash the combined string using SHA-256\n    hash_object = hashlib.sha256(combined.encode())\n    hash_digest = hash_object.digest()\n    \n    # Encode the hash in base64 using the custom alphabet\n    # Ensure the alphabet is valid for base64 (64 unique characters)\n    if len(set(alphabet)) != 64:\n        raise ValueError(\"Alphabet must have 64 unique characters for base64 encoding.\")\n    \n    # Create a translation table for base64 encoding\n    trans_table = str.maketrans(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", alphabet)\n    encoded_hash = base64.b64encode(hash_digest).translate(trans_table)\n    \n    return encoded_hash.decode(), salt\nalphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/\""}
{"task_id": "BigCodeBench/534", "solution": "import numpy as np\nimport base64\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding, rsa\nfrom cryptography.hazmat.backends import default_backend\ndef convert_base(num, from_base, to_base):\n    return int(num, from_base)\ndef sign_message(message, private_key):\n    message_bytes = message.encode('utf-8')\n    signature = private_key.sign(\n        message_bytes,\n        padding.PSS(\n            mgf=padding.MGF1(hashes.SHA256()),\n            salt_length=padding.PSS.MAX_LENGTH\n        ),\n        hashes.SHA256()\n    )\n    return signature\ndef base64_encode(signature, alphabet):\n    encoded_bytes = base64.b64encode(signature)\n    custom_encoded = ''.join([alphabet[int(i)] for i in encoded_bytes.decode('utf-8')])\n    return custom_encoded\ndef task_func(num, from_base, to_base, private_key, alphabet):\n    converted_num = convert_base(num, from_base, to_base)\n    signed_num = sign_message(str(converted_num), private_key)\n    encoded_num = base64_encode(signed_num, alphabet)\n    return encoded_num"}
{"task_id": "BigCodeBench/535", "solution": "import sqlite3\nimport numpy as np\nfrom random import choice, seed\nNAMES = ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia']\nAGES_RANGE = (18, 64)\nHEIGHTS_RANGE = (150, 199)\ndef task_func(db_path, table_name, num_entries, random_seed=None):\n    if num_entries < 0:\n        raise ValueError(\"num_entries must be non-negative\")\n\n    # Seed the random generator for reproducibility\n    if random_seed is not None:\n        seed(random_seed)\n\n    # Connect to SQLite database\n    conn = sqlite3.connect(db_path)\n    cursor = conn.cursor()\n\n    # Create table if it doesn't exist\n    cursor.execute(f\"\"\"\n        CREATE TABLE IF NOT EXISTS {table_name} (\n            id INTEGER PRIMARY KEY,\n            name TEXT,\n            age INTEGER,\n            height INTEGER\n        )\n    \"\"\")\n\n    # Insert random entries\n    rows_inserted = 0\n    for _ in range(num_entries):\n        cursor.execute(\"\"\"\n            INSERT INTO {} (name, age, height) VALUES (?, ?, ?)\n        \"\"\".format(table_name), (choice(NAMES), choice(range(*AGES_RANGE)), choice(range(*HEIGHTS_RANGE))))\n        rows_inserted += 1\n\n    # Commit the transaction and close the connection\n    conn.commit()\n    conn.close()\n\n    return rows_inserted"}
{"task_id": "BigCodeBench/536", "solution": "import sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_name, table_name, csv_path=\"data.csv\"):\n    \"\"\"\n    Read SQLite3 table via pandas and export to a CSV file.\n\n    Parameters:\n    - db_name (str): The path to the SQLite3 database.\n    - table_name (str): The name of the table to export.\n    - csv_path (str, optional): The path where the CSV file will be saved. Defaults to 'data.csv'.\n\n    Returns:\n    str: The absolute path of the exported CSV file.\n    \"\"\"\n    # Connect to SQLite database\n    conn = sqlite3.connect(db_name)\n    \n    # Use pandas to read the SQL query (which is selecting all rows from the given table)\n    df = pd.read_sql_query(\"SELECT * from %s\" % table_name, conn)\n    \n    # Get the directory of the database to save the CSV relatively\n    db_dir = os.path.dirname(os.path.abspath(db_name))\n    \n    # If no absolute path is provided for csv_path, save it in the same directory as the database\n    if not os.path.isabs(csv_path):\n        csv_path = os.path.join(db_dir, csv_path)\n    \n    # Export the DataFrame to a CSV file\n    df.to_csv(csv_path, index=False)\n    \n    # Close the SQLite connection\n    conn.close()\n    \n    # Return the absolute path of the saved CSV file\n    return os.path.abspath(csv_path)"}
{"task_id": "BigCodeBench/537", "solution": "import sqlite3\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(db_name=\"test.db\", table_name=\"People\"):\n    # Connect to SQLite database\n    conn = sqlite3.connect(db_name)\n    # Load data into a DataFrame\n    data = pd.read_sql_query(\"SELECT * from %s\" % table_name, conn)\n    \n    # Check for negative age values\n    if (data['age'] < 0).any():\n        raise ValueError(\"Age values cannot be negative.\")\n    \n    # Draw the age distribution using seaborn\n    ax = sns.histplot(data=data, x='age', bins=30, kde=True)\n    \n    # Set plot title and labels for clarity\n    ax.set_title('Age Distribution')\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Frequency')\n    \n    # Show plot (optional, can be commented out if the plot is not needed immediately)\n    plt.show()\n    \n    # Close the database connection\n    conn.close()\n    \n    return ax"}
{"task_id": "BigCodeBench/538", "solution": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(db_name, table_name):\n    # Connect to SQLite database\n    conn = sqlite3.connect(db_name)\n    # Get table schema to identify column types\n    cursor = conn.execute(f\"PRAGMA table_info({table_name})\")\n    columns = cursor.fetchall()\n    \n    # Identify numerical columns excluding 'id'\n    num_cols = [col[1] for col in columns[1:] if col[2] in ('REAL', 'INTEGER')]\n    \n    if len(num_cols) < 2:\n        raise ValueError(\"The table must have at least two numerical columns (excluding 'id').\")\n    \n    # Fetch data\n    query = f\"SELECT {', '.join(num_cols)} FROM {table_name}\"\n    data = pd.read_sql_query(query, conn)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.scatter(data[num_cols[0]], data[num_cols[1]])\n    ax.set_xlabel(num_cols[0])\n    ax.set_ylabel(num_cols[1])\n    ax.set_title(f'Plot of {num_cols[0]} vs {num_cols[1]}')\n    \n    # Close the SQLite connection\n    conn.close()\n    \n    return ax"}
{"task_id": "BigCodeBench/539", "solution": "import sqlite3\nfrom random import choice, seed\nimport os\nNAMES = ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia']\nAGES_RANGE = range(18, 66)\nHEIGHTS_RANGE = range(150, 201)\ndef task_func(db_name, table_name, num_entries, random_seed=None):\n    if num_entries < 0:\n        raise ValueError(\"Number of entries must be non-negative.\")\n    \n    # Set the random seed for reproducibility if provided\n    if random_seed is not None:\n        seed(random_seed)\n    \n    # Create a connection to the SQLite database\n    # If the database does not exist, it will be created\n    db_path = os.path.join(os.getcwd(), db_name)\n    conn = sqlite3.connect(db_path)\n    \n    # Create a cursor object\n    cursor = conn.cursor()\n    \n    # Create the table if it doesn't exist\n    cursor.execute(f\"\"\"\n        CREATE TABLE IF NOT EXISTS {table_name} (\n            id INTEGER PRIMARY KEY,\n            name TEXT,\n            age INTEGER,\n            height INTEGER\n        )\n    \"\"\")\n    \n    # Insert random entries\n    for _ in range(num_entries):\n        cursor.execute(\"\"\"\n            INSERT INTO {} (name, age, height)\n            VALUES (?, ?, ?)\n        \"\"\".format(table_name), (choice(NAMES), choice(AGES_RANGE), choice(HEIGHTS_RANGE)))\n    \n    # Commit the transaction to save the changes\n    conn.commit()\n    \n    # Close the connection\n    conn.close()\n    \n    return db_path"}
{"task_id": "BigCodeBench/540", "solution": "from collections import Counter\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(list_of_menuitems, title=\"Menu Distribution\", color=\"blue\", width=1.0):\n    # Flatten the nested list using itertools.chain\n    flattened_list = list(itertools.chain.from_iterable(list_of_menuitems))\n    \n    # Count the occurrences of each menu item using Counter\n    menu_counts = Counter(flattened_list)\n    \n    # Sort the items alphabetically\n    sorted_items = sorted(menu_counts.items())\n    \n    # Unzip the sorted items into two lists: labels and counts\n    labels, counts = zip(*sorted_items)\n    \n    # Create a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(labels, counts, color=color, width=width)\n    \n    # Set the title and labels for the axes\n    ax.set_title(title)\n    ax.set_xlabel('Menu Items')\n    ax.set_ylabel('Frequency')\n    \n    # Show the plot\n    plt.tight_layout()\n    plt.show()\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/541", "solution": "import os\nimport sys\nimport importlib.util\nfrom pkgutil import iter_modules\ndef task_func(package_name):\n    \"\"\"\n    Adds all modules of a specified package to the system path. This function is useful for dynamically\n    importing modules from a package that might not be on the standard path.\n    \"\"\"\n    # Check if the package is already in the system path\n    package_found = any(package_name == module.name for module in iter_modules())\n\n    if not package_found:\n        try:\n            # Attempt to import the package; this will also add it to the path if not already there\n            importlib.import_module(package_name)\n        except ImportError:\n            raise ImportError(f\"The package '{package_name}' is not installed. Please install it using pip, i.e., 'pip install {package_name}'.\")\n\n    # Find all modules in the package\n    package_path = importlib.util.find_spec(package_name).submodule_search_locations[0]\n    modules = [name for _, name, _ in iter_modules([package_path])]\n\n    # Add the modules to the system path\n    for module in modules:\n        sys.path.append(os.path.join(package_path, module))\n\n    return modules"}
{"task_id": "BigCodeBench/542", "solution": "import hashlib\nimport random\nimport struct"}
{"task_id": "BigCodeBench/543", "solution": "import base64\nimport os\ndef task_func():\n    \"\"\"\n    Generates a random float number, converts it to a hexadecimal string,\n    and then encodes this hexadecimal representation in base64.\n\n    Returns:\n        str: The base64 encoded string of the hexadecimal representation of a random float.\n\n    Requirements:\n        - os\n        - base64\n    \"\"\"\n    # Generate a random float\n    random_float = os.urandom(4).hex()  # Generate a random 4-byte float\n    \n    # Convert the float to hexadecimal string\n    hex_str = format(float.fromhex(random_float), '016x')  # Format to ensure consistent length\n    \n    # Encode the hexadecimal string in base64\n    base64_encoded = base64.b64encode(hex_str.encode()).decode()\n    \n    return base64_encoded"}
{"task_id": "BigCodeBench/544", "solution": "import struct\nimport zlib\nKEY = '470FC614'\ndef task_func(hex_string=KEY):\n    \"\"\"\n    Converts a given hex string to a float number and then compresses the binary32 float number.\n\n    Parameters:\n    hex_string (str, optional): The hex string to be converted. Defaults to 470FC614.\n\n    Returns:\n    bytes: The compressed float number.\n\n    Requirements:\n    - struct\n    - zlib\n\n    Example:\n    >>> task_func(\"470FC614\")\n    b'x\\\\x9c\\\\xf3\\\\xeb\\\\x93\\\\xef\\\\x01\\\\x00\\\\x03\\\\xb0\\\\x01\\\\x88'\n    >>> task_func(\"ABCD1234\")\n    b'x\\\\x9c\\\\xf3\\\\xd7>+\\\\x04\\\\x00\\\\x03m\\\\x01Z'\n    \"\"\"\n    # Convert the hex string to a float\n    float_number = struct.unpack('f', bytes.fromhex(hex_string))[0]\n    \n    # Compress the binary32 float number\n    compressed_data = zlib.compress(struct.pack('f', float_number))\n    \n    return compressed_data"}
{"task_id": "BigCodeBench/545", "solution": "import codecs\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS):\n    \"\"\"\n    Generate a random float number from a list of hex strings and then encode the float number in utf-8.\n\n    Parameters:\n    hex_keys (list of str): A list of hexadecimal strings to choose from.\n\n    Returns:\n    bytes: The utf-8 encoded float number.\n\n    Requirements:\n    - struct\n    - codecs\n    - random\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func()\n    b'36806.078125'\n    \"\"\"\n    # Choose a random key\n    random_key = random.choice(hex_keys)\n    \n    # Convert the hex string to an integer, then to a float (assuming it's a IEEE-754 representation)\n    float_num = struct.unpack('!f', struct.pack('!I', int(random_key, 16)))[0]\n    \n    # Encode the float number in utf-8\n    encoded_num = str(float_num).encode('utf-8')\n    \n    return encoded_num"}
{"task_id": "BigCodeBench/546", "solution": "from collections import OrderedDict\nfrom prettytable import PrettyTable\ndef task_func(my_dict):\n    \"\"\"\n    Sorts a given dictionary by its keys in ascending order and returns a PrettyTable object displaying the sorted items with the names 'Key' and 'Value'.\n    \n    Parameters:\n    my_dict (dict): The dictionary to be sorted and displayed.\n    \n    Returns:\n    PrettyTable: A PrettyTable object representing the sorted dictionary.\n    \"\"\"\n    # Sort the dictionary by keys\n    sorted_dict = OrderedDict(sorted(my_dict.items()))\n    \n    # Initialize a PrettyTable\n    table = PrettyTable()\n    \n    # Add field names\n    table.field_names = ['Key', 'Value']\n    \n    # Add rows to the table\n    for key, value in sorted_dict.items():\n        table.add_row([key, value])\n    \n    return table"}
{"task_id": "BigCodeBench/547", "solution": "import hashlib\nimport os\nimport base64\ndef task_func(password: str, salt_length: int = 8) -> str:\n    \"\"\"\n    Encrypt a password using Salt and SHA-256, then encode the result in base64.\n    \n    Parameters:\n    password (str): The password to be encrypted.\n    salt_length (int, optional): The length of the generated salt. Default is 8.\n    \n    Returns:\n    str: The encrypted password in base64 format.\n    \"\"\"\n    # Generate a salt\n    salt = os.urandom(salt_length)\n    \n    # Hash the password with the salt using SHA-256\n    hashed_password = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)\n    \n    # Combine the salt and hashed password\n    combined = salt + hashed_password\n    \n    # Encode the combined bytes in base64\n    encoded = base64.b64encode(combined)\n    \n    return encoded.decode('utf-8')"}
{"task_id": "BigCodeBench/548", "solution": "import random\nimport string\nimport base64\nimport zlib\ndef task_func(string_length=100):\n    \"\"\"\n    Create a random string of a specified length with uppercase letters and digits, compress it with zlib, \n    and then encode the compressed string in base64.\n    \"\"\"\n    # Generate a random string\n    random_string = ''.join(random.choices(string.ascii_uppercase + string.digits, k=string_length))\n    \n    # Compress the string using zlib\n    compressed_data = zlib.compress(random_string.encode())\n    \n    # Encode the compressed data in base64\n    base64_encoded = base64.b64encode(compressed_data)\n    \n    # Return the base64 encoded string as a plain string (not bytes)\n    return base64_encoded.decode('utf-8')"}
{"task_id": "BigCodeBench/549", "solution": "import base64\nimport pandas as pd\ndef task_func(df):\n    \"\"\"\n    Encodes a dict of list as a Base64 string. The dict is first converted to a Pandas DataFrame.\n    Then convert the data frame to CSV format and encoded to bytes, finally encoded it to a Base64 string.\n    \"\"\"\n    # Convert the dictionary to a DataFrame\n    dataframe = pd.DataFrame(df)\n    \n    # Convert DataFrame to CSV format and then to bytes\n    csv_data = dataframe.to_csv(index=False).encode()\n    \n    # Encode the bytes to a Base64 string\n    encoded_df = base64.b64encode(csv_data).decode()\n    \n    return encoded_df"}
{"task_id": "BigCodeBench/550", "solution": "from collections import Counter\nimport pandas as pd\ndef task_func(list_of_menuitems):\n    \"\"\"\n    Given a nested list of menu items, this function flattens the list and returns a Pandas DataFrame\n    detailing the count of each individual menu item with index name 'MenuItem'.\n\n    Parameters:\n        list_of_menuitems (list): A nested list of menu items.\n\n    Returns:\n        DataFrame: A pandas DataFrame with menu items as indices and a 'Count' column showing the count of each menu item.\n    \"\"\"\n    # Flatten the list of menu items\n    flattened_list = [item for sublist in list_of_menuitems for item in sublist]\n    \n    # Count the occurrences of each menu item\n    count_dict = Counter(flattened_list)\n    \n    # Convert the Counter object to a DataFrame\n    result_df = pd.DataFrame.from_dict(count_dict, orient='index', columns=['Count'])\n    \n    # Set the index name\n    result_df.index.name = 'MenuItem'\n    \n    return result_df"}
{"task_id": "BigCodeBench/551", "solution": "from collections import Counter\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\ndef task_func(list_of_menuitems):\n    \"\"\"\n    Given a nested list of menu items, this function flattens the list and visualizes the frequency\n    of each menu item using a seaborn barplot.\n    \n    Parameters:\n        list_of_menuitems (list): A nested list of menu items.\n        \n    Returns:\n        matplotlib.axes.Axes: An Axes object representing the visualization, or None if there are no items to plot.\n    \"\"\"\n    # Flatten the list\n    flattened_list = [item for sublist in list_of_menuitems for item in sublist]\n    \n    # Count the frequency of each item\n    item_counts = Counter(flattened_list)\n    \n    # If there are no items, return None\n    if not item_counts:\n        return None\n    \n    # Convert the Counter object to a DataFrame\n    df = pd.DataFrame.from_dict(item_counts, orient='index', columns=['Frequency'])\n    \n    # Reset index to have 'MenuItems' as a column\n    df.reset_index(inplace=True)\n    df.rename(columns={'index': 'MenuItems'}, inplace=True)\n    \n    # Visualize using seaborn\n    ax = sns.barplot(x='MenuItems', y='Frequency', data=df)\n    plt.title('Frequency of Menu Items')\n    plt.xlabel('Menu Items')\n    plt.ylabel('Frequency')\n    \n    return ax"}
{"task_id": "BigCodeBench/552", "solution": "import collections\nimport itertools\nimport matplotlib.pyplot as plt\nITEMS = ['apple', 'banana']\ndef task_func(a, b, items=ITEMS):\n    \"\"\"\n    Combine two lists and record the frequency of predefined items in the combined list.\n\n    Parameters:\n    a (list): A list of items.\n    b (list): Another list of items.\n    items (list, optional): A list of predefined items.\n\n    Returns:\n    matplotlib.axes.Axes: A bar chart showing the frequency of predefined items in the combined list.\n    \"\"\"\n    # Combine the lists\n    combined = a + b\n    \n    # Count the frequency of each item in the combined list\n    frequency = collections.Counter(combined)\n    \n    # Filter the counts for the predefined items\n    item_frequency = {item: frequency[item] for item in items}\n    \n    # Plotting the bar chart\n    fig, ax = plt.subplots()\n    ax.bar(item_frequency.keys(), item_frequency.values())\n    ax.set_title('Frequency of Predefined Items')\n    ax.set_xlabel('Items')\n    ax.set_ylabel('Frequency')\n    \n    # Show the plot\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n    \"\"\"\n    Generate a pandas DataFrame with random values based on lists 'a' and 'b', and plot it as a bar chart.\n    List 'a' sets the DataFrame's row indices, while the length of list 'b' determines the number of columns\n    using predefined names from the 'COLUMNS = ['A', 'B', 'C', 'D', 'E']' list.\n\n    Parameters:\n    - a (list): A list used to define the number of rows in the DataFrame.\n    - b (list): Another list used to define the number of columns in the DataFrame. The actual column names are predefined.\n\n    Returns:\n    - matplotlib.axes.Axes: The Axes object of the plotted bar chart.\n    \"\"\"\n    # Ensure the number of columns doesn't exceed the predefined columns\n    num_columns = min(len(b), len(COLUMNS))\n    \n    # Generate random data\n    data = np.random.rand(len(a), num_columns)\n    \n    # Create DataFrame with the data and predefined column names\n    df = pd.DataFrame(data, index=a, columns=COLUMNS[:num_columns])\n    \n    # Plot the DataFrame as a bar chart\n    ax = df.plot(kind='bar')\n    \n    # Show the plot (optional, can be removed if the plot is to be handled elsewhere)\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/554", "solution": "import numpy as np\nimport random\ndef task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL):\n    # Randomly choose the number of words\n    num_words = random.randint(MIN_WORDS, MAX_WORDS)\n    \n    # Select random words from the pool\n    selected_words = random.sample(WORDS_POOL, num_words)\n    \n    # Create the first half of the palindrome\n    first_half = ' '.join(selected_words)\n    \n    # For an even number of words, the middle is just the first half's last word\n    # For an odd number, the middle is the central word (no need to repeat as in a classic palindrome due to word selection)\n    if num_words % 2 == 0:\n        middle = selected_words[num_words // 2 - 1]\n    else:\n        middle = ''\n    \n    # Construct the full sentence ensuring it's a \"palindrome\" by nature of selection\n    # Note: This interpretation assumes a \"palindrome\" where the sentence structure mirrors, not each word individually reversing.\n    sentence = first_half + ' ' + middle + ' ' + first_half[::-1]\n    \n    return sentence"}
{"task_id": "BigCodeBench/555", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\ndef task_func(a, b):\n    \"\"\"\n    Calculate the Pearson correlation coefficient of two lists, generate a Pandas DataFrame from these lists, \n    and then draw a scatter plot with a regression line.\n    \"\"\"\n    # Calculate Pearson correlation coefficient\n    correlation = stats.pearsonr(a, b)[0]\n    \n    # Create DataFrame\n    df = pd.DataFrame({'A': a, 'B': b})\n    \n    # Create scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(df['A'], df['B'], color='blue', label='Data Points')\n    \n    # Calculate regression line\n    m, b = np.polyfit(df['A'], df['B'], 1)\n    ax.plot(df['A'], m*df['A'] + b, color='red', label='Regression Line')\n    \n    # Set labels and legend\n    ax.set_xlabel('List A')\n    ax.set_ylabel('List B')\n    ax.legend()\n    \n    return correlation, ax"}
{"task_id": "BigCodeBench/556", "solution": "import numpy as np\nimport random\nfrom difflib import SequenceMatcher\ndef task_func(s, min_length, max_length, letters):\n    \"\"\"\n    Generates a random string and evaluates its similarity to `s`.\n    \n    Parameters:\n    s (str): Reference string.\n    min_length (int): Minimum length of generated string.\n    max_length (int): Maximum length of generated string.\n    letters (str): Characters used for generating the string.\n    \n    Returns:\n    tuple: (generated_string, is_similar)\n    \"\"\"\n    # Generate a random string\n    generated_s = ''.join(random.choice(letters) for _ in range(random.randint(min_length, max_length)))\n    \n    # Calculate similarity\n    similarity = SequenceMatcher(None, s, generated_s).ratio()\n    \n    # Determine if the strings are considered similar\n    is_similar = similarity >= 0.5\n    \n    return generated_s, is_similar"}
{"task_id": "BigCodeBench/557", "solution": "import numpy as np\nfrom difflib import SequenceMatcher\nimport matplotlib.pyplot as plt\ndef task_func(s_list, plot_path=None):\n    if not all(isinstance(item, str) for item in s_list):\n        raise ValueError(\"All elements in the list must be strings.\")\n    \n    if len(s_list) == 1:\n        return [np.nan]\n\n    similarity_scores = []\n    for idx, s1 in enumerate(s_list):\n        score_sum = 0\n        for s2 in s_list[:idx] + s_list[idx+1:]:\n            score_sum += SequenceMatcher(None, s1, s2).ratio()\n        similarity_scores.append(score_sum / (len(s_list) - 1))\n\n    avg_scores = np.array(similarity_scores)\n\n    if plot_path is not None:\n        plt.figure(figsize=(10, 5))\n        plt.bar(range(1, len(s_list) + 1), avg_scores)\n        plt.title('Average Similarity Scores')\n        plt.xlabel('String Index')\n        plt.ylabel('Similarity Score')\n        plt.savefig(plot_path)\n        plt.close()\n\n    return avg_scores.tolist()"}
{"task_id": "BigCodeBench/558", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(a, b, columns=['A', 'B']):\n    \"\"\"\n    Standardize two lists of numbers using the StandardScaler from sklearn and visualize the standardized values using a bar plot.\n    \n    Parameters:\n        a (list): A list of numbers.\n        b (list): Another list of numbers.\n        columns (list, optional): Column names for the resulting DataFrame. Defaults to ['A', 'B'].\n    \n    Returns:\n        pd.DataFrame: A DataFrame containing the standardized values.\n        matplotlib.axes.Axes: Axes object of the displayed bar plot.\n    \"\"\"\n    # Standardize the data\n    scaler = StandardScaler()\n    data = np.column_stack((a, b))\n    standardized_data = scaler.fit_transform(data)\n    \n    # Create a DataFrame\n    df = pd.DataFrame(standardized_data, columns=columns)\n    \n    # Visualize the standardized values with a bar plot\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', ax=ax)\n    ax.set_title('Standardized Values')\n    ax.set_ylabel('Standardized Value')\n    ax.set_xlabel('Features')\n    \n    # Return the DataFrame and the Axes object\n    return df, ax"}
{"task_id": "BigCodeBench/559", "solution": "import pandas as pd\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\ndef task_func(a, b):\n    \"\"\"\n    Calculate the Euclidean distance between two lists, create a Pandas DataFrame from these lists\n    with indices 'A' and 'B', and then draw the values with a line displaying the Euclidean distance.\n    \"\"\"\n    # Calculate Euclidean distance\n    euclidean_distance = distance.euclidean(a, b)\n    \n    # Create DataFrame\n    df = pd.DataFrame({'A': a, 'B': b})\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(df['A'], label='A', marker='o')\n    ax.plot(df['B'], label='B', marker='o')\n    ax.set_title(f'Euclidean Distance: {euclidean_distance:.2f}')\n    ax.legend()\n    \n    # Return distance, DataFrame, and Axes object\n    return euclidean_distance, df, ax"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n    \"\"\"\n    This function plots a bar chart of monthly data values for a single year, with 'month' on the x-axis and 'value'\n    on the y-axis.\n\n    Parameters:\n    data (str): The data string in the format 'yyyy-mm-value'.\n\n    Returns:\n    Axes object: A matplotlib.axes.Axes object representing the plot, with the title formatted as 'Monthly Data for yyyy', x label as 'Month', and y label as 'Value'.\n    \"\"\"\n    # Split the data string into a list\n    data_list = data.split(',')\n\n    # Convert each item in the list to a datetime object and extract the value\n    data_dicts = [{'year': int(d.split('-')[0]), 'month': int(d.split('-')[1]), 'value': int(d.split('-')[2])} for d in data_list]\n\n    # Create a DataFrame\n    df = pd.DataFrame(data_dicts)\n\n    # Create a new figure and an Axes object\n    fig, ax = plt.subplots()\n\n    # Extract unique years from the data\n    year = df['year'].unique()[0]\n\n    # Pivot the data to have months as index and values as columns\n    df_pivot = df.pivot_table(index='month', values='value', aggfunc='sum')\n\n    # Plotting the data\n    ax.bar(df_pivot.index, df_pivot['value'])\n\n    # Formatting the plot\n    ax.set_title(f'Monthly Data for {year}')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n\n    # Return the Axes object\n    return ax\ndata = '2022-01-100,2022-02-200,2022-03-150,2022-04-300,2022-05-250,2022-06-350,2022-07-400,2022-08-450,2022-09-500,2022-10-550,2022-11-600,2022-12-650'"}
{"task_id": "BigCodeBench/561", "solution": "import pytz\nfrom dateutil import parser\ndef task_func(date_str, from_tz, to_tz):\n    \"\"\"\n    Converts a date time from one timezone to another.\n\n    Parameters:\n    date_str (str): The date string in \"yyyy-mm-dd hh:mm:ss\" format.\n    from_tz (str): The timezone of the given date string.\n    to_tz (str): The timezone to which the date should be converted.\n\n    Returns:\n    str: The converted datetime string in \"yyyy-mm-dd hh:mm:ss\" format.\n    \"\"\"\n    # Parse the date string into a datetime object\n    date_obj = parser.parse(date_str)\n    \n    # Get the timezone objects\n    from_tz_obj = pytz.timezone(from_tz)\n    to_tz_obj = pytz.timezone(to_tz)\n    \n    # Localize the datetime object to the original timezone\n    date_obj = from_tz_obj.localize(date_obj)\n    \n    # Convert the datetime object to the target timezone\n    converted_date_obj = date_obj.astimezone(to_tz_obj)\n    \n    # Format the converted datetime object as a string and return\n    return converted_date_obj.strftime('%Y-%m-%d %H:%M:%S')"}
{"task_id": "BigCodeBench/562", "solution": "import os\nimport ctypes\nimport sys\nimport subprocess\ndef get_pip_version():\n    \"\"\"Helper function to get PIP version.\"\"\"\n    try:\n        return subprocess.check_output([sys.executable, '-m', 'pip', '--version'], text=True).split()[1]\n    except subprocess.CalledProcessError:\n        return \"PIP not installed\"\ndef task_func(filepath):\n    \"\"\"\n    Loads a DLL file specified by the given filepath, then retrieves and prints system information.\n    \"\"\"\n    if not isinstance(filepath, str):\n        raise TypeError(\"Filepath must be a string.\")\n    if not filepath:\n        raise OSError(\"Filepath is invalid or empty.\")\n    \n    try:\n        # Attempt to load DLL. This may fail if the DLL is not valid or for system compatibility issues.\n        ctypes.CDLL(filepath)\n    except OSError as e:\n        print(f\"Error loading DLL: {e}\")\n        return filepath\n    \n    # Retrieve system information\n    system_name = os.uname().sysname\n    node_name = os.uname().nodename\n    release = os.uname().release\n    version = os.uname().version\n    machine = os.uname().machine\n    python_version = sys.version.split()[0]\n    pip_version = get_pip_version()\n    \n    # Print system information\n    print(f\"System: {system_name}\")\n    print(f\"Node Name: {node_name}\")\n    print(f\"Release: {release}\")\n    print(f\"Version: {version}\")\n    print(f\"Machine: {machine}\")\n    print(f\"Python Version: {python_version}\")\n    print(f\"PIP Version: {pip_version}\")\n    \n    return filepath"}
{"task_id": "BigCodeBench/563", "solution": "import ctypes\nimport os\nimport shutil\nimport glob\ndef task_func(filepath, destination_dir):\n    \"\"\"\n    Loads a DLL file specified by the given filepath and moves all DLL files in the same directory\n    to another specified directory. This function demonstrates file operations including DLL loading,\n    file path manipulation, and file moving using ctypes, os, shutil, and glob modules.\n\n    Parameters:\n    filepath (str): The path of the DLL file to be loaded.\n    destination_dir (str): The path of the destination directory where DLL files will be moved.\n\n    Returns:\n    str: The name of the loaded DLL file.\n\n    Requirements:\n    - ctypes\n    - os\n    - shutil\n    - glob\n\n    Examples:\n    >>> destination = 'test_destination'\n    >>> task_func('example.dll', destination) # This example assumes 'example.dll' exists and is a valid DLL.\n    'example.dll'\n    >>> isinstance(task_func('example.dll', destination), str)\n    True\n    \"\"\"\n    # Ensure the destination directory exists\n    if not os.path.exists(destination_dir):\n        os.makedirs(destination_dir)\n\n    # Load the DLL file\n    try:\n        ctypes.CDLL(filepath)\n    except Exception as e:\n        print(f\"Error loading DLL: {e}\")\n        return \"\"\n\n    # Get the directory of the provided filepath\n    source_dir = os.path.dirname(filepath)\n\n    # Find all DLL files in the source directory\n    dll_files = glob.glob(os.path.join(source_dir, '*.dll'))\n\n    # Move all DLL files to the destination directory\n    for dll_file in dll_files:\n        shutil.move(dll_file, os.path.join(destination_dir, os.path.basename(dll_file)))\n\n    # Return the name of the loaded DLL file\n    return os.path.basename(filepath)"}
{"task_id": "BigCodeBench/564", "solution": "import os\nimport ctypes\nfrom datetime import datetime\nimport pytz\ndef task_func(filepath):\n    \"\"\"\n    Loads a DLL file from the specified filepath and returns its metadata, including creation time,\n    modification time, and file size. The times are displayed in UTC format.\n    \"\"\"\n    # Check if the file exists\n    if not os.path.exists(filepath):\n        return f\"File {filepath} not found.\", {}\n\n    # Attempt to load the DLL using ctypes (this might fail if the DLL is not compatible with the system)\n    try:\n        dll = ctypes.CDLL(filepath)\n    except Exception as e:\n        return f\"Failed to load DLL: {str(e)}\", {}\n\n    # Get file metadata\n    ctime = os.path.getctime(filepath)\n    mtime = os.path.getmtime(filepath)\n    size = os.path.getsize(filepath)\n\n    # Convert times to datetime objects in UTC\n    creation_time_utc = datetime.fromtimestamp(ctime, tz=pytz.UTC)\n    modification_time_utc = datetime.fromtimestamp(mtime, tz=pytz.UTC)\n\n    # Format the times and size for the output\n    metadata = {\n        'Creation Time': creation_time_utc.strftime('%Y-%m-%d %H:%M:%S UTC'),\n        'Modification Time': modification_time_utc.strftime('%Y-%m-%d %H:%M:%S UTC'),\n        'Size': f\"{size} bytes\"\n    }\n\n    return os.path.basename(filepath), metadata"}
{"task_id": "BigCodeBench/565", "solution": "import ctypes\nimport hashlib\nimport binascii\ndef task_func(filepath):\n    \"\"\"\n    Loads a DLL file from a given filepath, calculates its MD5 and SHA256 hashes,\n    and prints these hashes in hexadecimal format.\n    \"\"\"\n    try:\n        # It's important to note that we are not actually loading the DLL for execution,\n        # but merely reading its content for hash calculation.\n        with open(filepath, 'rb') as file:\n            data = file.read()\n            \n        # Calculate MD5 hash\n        md5_hash = hashlib.md5(data).hexdigest()\n        # Calculate SHA256 hash\n        sha256_hash = hashlib.sha256(data).hexdigest()\n        \n        # Print the hashes\n        print(f\"MD5 Hash: {md5_hash}\")\n        print(f\"SHA256 Hash: {sha256_hash}\")\n        \n        # Return the filename as per requirements\n        return f\"Hashes calculated for: {filepath}\"\n    \n    except FileNotFoundError:\n        return f\"Error: File {filepath} not found.\"\n    except Exception as e:\n        return f\"An error occurred: {str(e)}\""}
{"task_id": "BigCodeBench/566", "solution": "import inspect\nimport types\ndef task_func(f):\n    \"\"\"\n    Inspects a given function 'f' and returns its specifications.\n    \"\"\"\n    is_lambda = isinstance(f, types.LambdaType)\n    signature = inspect.signature(f)\n    args = [param.name for param in signature.parameters]\n    defaults = {param.name: param.default for param in signature.parameters if param.default != inspect.Parameter.empty}\n    annotations = {param.name: param.annotation for param in signature.parameters if param.annotation != inspect.Parameter.empty}\n    \n    return {\n        'function_name': f.__name__,\n        'is_lambda': is_lambda,\n        'args': args,\n        'defaults': defaults,\n        'annotations': annotations\n    }"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    This function draws a histogram to visualize the frequency distribution of numeric values provided in a string format.\n    \"\"\"\n    # Convert the string data into a list of integers\n    values = list(map(int, data.split('-')))\n    \n    # Convert the list into a pandas Series for easier manipulation\n    data_series = pd.Series(values)\n    \n    # Calculate the bins for the histogram\n    bins = np.arange(data_series.min(), data_series.max()+2) - 0.5\n    \n    # Create the histogram\n    fig, ax = plt.subplots()\n    ax.hist(data_series, bins=bins, edgecolor='black')\n    \n    # Set labels and title\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Values')\n    \n    # Show the plot\n    plt.tight_layout()\n    plt.show()\n    \n    # Return the Axes object\n    return ax\ndata = '1-2-3-4-5-6-7-8-9-10'"}
{"task_id": "BigCodeBench/568", "solution": "import inspect\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(f_list):\n    if any(inspect.islambda(f) for f in f_list):\n        raise ValueError(\"The function should not be a lambda function.\")\n    \n    func_args = {f.__name__: len(inspect.signature(f).parameters) for f in f_list}\n    df = pd.DataFrame.from_dict(func_args, orient='index', columns=['Number of Arguments'])\n    \n    df.plot(kind='bar', figsize=(10, 6))\n    plt.ylabel('Number of Arguments')\n    plt.title('Functions vs Number of Arguments')\n    plt.show()\n    \n    return df\ndef f(x): return x*x"}
{"task_id": "BigCodeBench/569", "solution": "import inspect\nimport types\nimport math\ndef task_func(f):\n    \"\"\"\n    Analyzes a given function 'f' and returns a dictionary containing its name, the square root of\n    the number of arguments, and the count of lambda functions present in its default values.\n    \"\"\"\n    # Get function name\n    function_name = f.__name__\n    \n    # Get the number of arguments\n    argspec = inspect.getfullargspec(f)\n    num_args = len(argspec.args)\n    \n    # Calculate the square root of the number of arguments\n    sqrt_args = math.sqrt(num_args)\n    \n    # Count lambda functions in default values\n    lambda_in_defaults = sum(1 for arg in argspec.defaults if isinstance(arg, types.LambdaType))\n    \n    # Return the results in a dictionary\n    return {\n        'function_name': function_name,\n        'sqrt_args': sqrt_args,\n        'lambda_in_defaults': lambda_in_defaults\n    }"}
{"task_id": "BigCodeBench/570", "solution": "import inspect\nimport types\nimport json\ndef task_func(f):\n    \"\"\"\n    Inspects the given function 'f' and returns its specifications as a JSON string. \n    This includes the function's name, arguments, default values, annotations, and a boolean\n    indicating if it's a lambda function.\n    \"\"\"\n    # Check if the function is a lambda function\n    is_lambda = isinstance(f, types.LambdaType)\n    \n    # Get the function's signature\n    sig = inspect.signature(f)\n    \n    # Extract arguments and their default values\n    args = {k: str(v.default) if v.default is not inspect.Parameter.empty else '' \n            for k, v in sig.parameters.items()}\n    \n    # Extract annotations\n    annotations = {k: str(v.annotation) if v.annotation is not inspect.Parameter.empty else '' \n                   for k, v in sig.parameters.items()}\n    \n    # Prepare the dictionary to serialize into JSON\n    func_specs = {\n        'name': f.__name__,\n        'arguments': args,\n        'default_values': args,  # Reusing args since it contains defaults\n        'annotations': annotations,\n        'is_lambda': is_lambda\n    }\n    \n    # Convert the dictionary to a JSON string\n    return json.dumps(func_specs)"}
{"task_id": "BigCodeBench/571", "solution": "import inspect\nimport pandas as pd\nimport os\ndef task_func(f_list, file_path):\n    if not all(inspect.isfunction(f) for f in f_list):\n        raise ValueError(\"All elements in 'f_list' must be function objects.\")\n    if not f_list:\n        raise ValueError(\"'f_list' cannot be empty.\")\n    if not os.path.isdir(os.path.dirname(file_path)):\n        raise ValueError(\"Invalid file path.\")\n\n    function_specs = []\n    for f in f_list:\n        num_args = len(inspect.signature(f).parameters)\n        defaults = [str(param.default) for param in inspect.signature(f).parameters.values() if param.default != inspect._empty]\n        annotations = {str(k): str(v) for k, v in inspect.getfullargspec(f).annotations.items() if k != 'return'}\n        annotations['return'] = str(inspect.getfullargspec(f).annotations.get('return', 'None'))\n        is_lambda = 'Yes' if 'lambda' in inspect.getsource(f).lower() else 'No'\n        function_specs.append({\n            'Function Name': f.__name__,\n            'Number of Arguments': num_args,\n            'Defaults': ', '.join(defaults) if defaults else 'None',\n            'Annotations': ', '.join(f\"{k}: {v}\" for k, v in annotations.items()) if annotations else 'None',\n            'Is Lambda': is_lambda\n        })\n\n    df = pd.DataFrame(function_specs)\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError as e:\n        raise IOError(f\"Error writing to file: {e}\")\ndef f(x): return 2 * x"}
{"task_id": "BigCodeBench/572", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100):\n    \"\"\"\n    Generate two arrays of random integers and draw a line diagram with the \n    maximum values of the respective elements of the two arrays. Set 'Maximum Values' on its y-axis.\n\n    Parameters:\n    - array_length (int): Length of the random arrays to be generated. Default is 100.\n\n    Returns:\n    - matplotlib.axes.Axes: Axes object with the plot.\n    \"\"\"\n    # Generate two arrays of random integers\n    array1 = np.array([randint(0, 100) for _ in range(array_length)])\n    array2 = np.array([randint(0, 100) for _ in range(array_length)])\n    \n    # Calculate the maximum values for each array\n    max_values_array1 = np.max(array1)\n    max_values_array2 = np.max(array2)\n    \n    # Since the requirement seems to plot the maximum values across the arrays, \n    # let's clarify the approach. Here, we'll create a simple plot to represent \n    # these max values as points over the range of the array length.\n    fig, ax = plt.subplots()\n    \n    # Plotting maximum values, assuming we want to represent their comparison over the 'length' index\n    ax.plot([0, array_length], [max_values_array1, max_values_array1], label='Max Array 1', marker='o')\n    ax.plot([0, array_length], [max_values_array2, max_values_array2], label='Max Array 2', marker='o')\n    \n    ax.set_xlabel('Array Index')\n    ax.set_ylabel('Maximum Values')\n    ax.set_title('Maximum Values of Two Random Arrays')\n    ax.legend()\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/573", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(array_length=100):\n    # Generate random arrays\n    array1 = np.random.rand(array_length)\n    array2 = np.random.rand(array_length)\n    \n    # Calculate statistics\n    stats_array1 = {\n        'Mean': np.mean(array1),\n        'Median': np.median(array1),\n        'Standard Deviation': np.std(array1)\n    }\n    stats_array2 = {\n        'Mean': np.mean(array2),\n        'Median': np.median(array2),\n        'Standard Deviation': np.std(array2)\n    }\n    \n    # Store in DataFrame\n    statistics = pd.DataFrame([stats_array1, stats_array2], index=['Array1', 'Array2'])\n    \n    # Draw a bar chart\n    fig, ax = plt.subplots()\n    statistics.plot(kind='bar', ax=ax)\n    ax.set_title('Statistics Comparison')\n    ax.set_ylabel('Value')\n    ax.set_xticks([0, 1, 2])\n    ax.set_xticklabels(['Mean', 'Median', 'Standard Deviation'])\n    \n    return statistics, ax"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef true_sine(x, A, omega, phi, offset):\n    \"\"\"True sine wave function.\"\"\"\n    return A * np.sin(omega * x + phi) + offset\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Create a noisy sine wave and adjust a curve using curve_fit.\n    \"\"\"\n    # Generate array of x values\n    x = np.linspace(0, 2*np.pi, array_length, endpoint=False)\n    \n    # Generate 'true' sine wave data\n    A, omega, phi, offset = 1, 1, 0, 0  # Parameters for the sine wave\n    y_true = true_sine(x, A, omega, phi, offset)\n    \n    # Add noise to the data\n    y_data = y_true + noise_level * np.random.randn(array_length)\n    \n    # Curve fitting\n    popt, _ = curve_fit(true_sine, x, y_data, p0=[A, omega, phi, offset])\n    \n    # Generate curve based on fitted parameters\n    y_fit = true_sine(x, *popt)\n    \n    # Plotting\n    plt.figure(figsize=(10, 5))\n    plt.plot(x, y_data, 'bo', label='Noisy data')\n    plt.plot(x, y_fit, 'r-', label='Fitted curve')\n    plt.title('Curve Fitting of Noisy Sine Wave')\n    plt.xlabel('X axis')\n    plt.ylabel('Y axis')\n    plt.legend()\n    plt.grid(True)\n    \n    # Return the plot\n    return plt.gca()"}
{"task_id": "BigCodeBench/575", "solution": "from random import shuffle\nimport pandas as pd\nimport numpy as np\ndef task_func(l, n_groups=5):\n    \"\"\"\n    Given a list `l`, this function shuffles the list, constructs a dataframe using the shuffled list,\n    and then for each row in the dataframe, moves the first n_groups elements to the end of the same row.\n\n    Parameters:\n    - l (list): A list of elements.\n    - n_groups (int): number of groups. Default value is 5.\n\n    Returns:\n    - DataFrame: A modified DataFrame constructed from the shuffled list.\n    \"\"\"\n    # Shuffle the list\n    shuffle(l)\n    \n    # Calculate the number of iterations to cover the entire list\n    iterations = -(-len(l) // n_groups)  # Ceiling division\n    \n    # Initialize DataFrame\n    df = pd.DataFrame(columns=[f'Col_{i}' for i in range(len(l))])\n    \n    start = 0\n    for _ in range(iterations):\n        end = start + n_groups if start + n_groups <= len(l) else len(l)\n        # Rotate the segment of the list\n        rotated_segment = l[start:end] + l[start:end][:n_groups]\n        # Assign to DataFrame\n        df.loc[len(df)] = rotated_segment\n        start = end\n    \n    # Ensure DataFrame has the correct shape, if not, fill with NaNs\n    if df.shape[0] < iterations:\n        df = df.iloc[:iterations]\n    else:\n        df = df.iloc[:iterations].reindex(range(iterations), fill_value=np.nan)\n    \n    return df"}
{"task_id": "BigCodeBench/576", "solution": "from random import shuffle, randint\nimport pandas as pd\ndef task_func(l, n_groups=5):\n    \"\"\"\n    Generate a Series from a list \"l\". The function shuffles the list, \n    then creates a longer series by cycling through the shuffled list. \n    For each element in the series, it randomly selects n_groups characters\n    from the start of the string and moves them to the end. \n    \"\"\"\n    # Shuffle the list\n    shuffle(l)\n    \n    # Create an empty list to hold the modified strings\n    modified_strings = []\n    \n    # Cycle through the list n_groups times for each element\n    for _ in range(n_groups * len(l)):\n        for s in l:\n            # Randomly select n_groups characters from the start\n            n_chars_moved = randint(1, len(s) - n_groups) if len(s) > n_groups else 1\n            chars_moved = s[:n_chars_moved]\n            # Remove the moved characters and append them to the end\n            remaining_chars = s[n_chars_moved:]\n            modified_string = remaining_chars + chars_moved\n            # Add the modified string to the list\n            modified_strings.append(modified_string)\n    \n    # Convert the list to a pandas Series\n    result_series = pd.Series(modified_strings)\n    \n    return result_series"}
{"task_id": "BigCodeBench/577", "solution": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes.\n    \"\"\"\n    file_info = {}\n    for path in pathlib.Path(directory).iterdir():\n        if path.is_file():\n            # Normalize filename to ASCII\n            normalized_name = unicodedata.normalize('NFKD', path.name).encode('ASCII', 'ignore').decode()\n            # Calculate MD5 hash\n            with open(path, \"rb\") as file:\n                file_hash = md5(file.read()).hexdigest()\n            # Get file size\n            file_size = path.stat().st_size\n            \n            file_info[normalized_name] = {\"Size\": file_size, \"MD5 Hash\": file_hash}\n    \n    return file_info"}
{"task_id": "BigCodeBench/578", "solution": "import unicodedata\nimport requests\nURL = 'https://api.github.com/users/'\ndef task_func(username):\n    \"\"\"\n    Retrieves user information from the GitHub API for a given username, normalizes all string data to ASCII,\n    and returns a dictionary of the normalized data.\n    \"\"\"\n    try:\n        response = requests.get(URL + username)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx or 5xx)\n        \n        user_data = response.json()\n        \n        # Normalize all string values to ASCII\n        normalized_data = {}\n        for key, value in user_data.items():\n            if isinstance(value, str):\n                normalized_data[key] = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode('ascii')\n            else:\n                normalized_data[key] = value\n        \n        return normalized_data\n    \n    except requests.exceptions.HTTPError as http_err:\n        print(f'HTTP error occurred: {http_err}')  # Handle HTTP errors\n    except Exception as err:\n        print(f'An error occurred: {err}')  # Handle other errors"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef normalize_text(text):\n    \"\"\"\n    Normalize text to ASCII.\n    \"\"\"\n    return unicodedata.normalize('NFKD', text).encode('ASCII', 'ignore').decode()\ndef read_and_count(csv_file):\n    \"\"\"\n    Reads a CSV file, normalizes text, and counts words.\n    \"\"\"\n    word_count = Counter()\n    try:\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            for row in reader:\n                for cell in row:\n                    # Normalize and split words, then count them\n                    normalized_cell = normalize_text(cell)\n                    word_count.update(normalized_cell.split())\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {csv_file} was not found.\")\n    except IOError:\n        raise IOError(f\"Error reading the file {csv_file}.\")\n    return word_count\ndef plot_and_return_most_common(word_count, top_n=10):\n    \"\"\"\n    Plots the most common words and returns them as a list.\n    \"\"\"\n    most_common_words = word_count.most_common(top_n)\n    words, frequencies = zip(*most_common_words)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.bar(words, frequencies)\n    ax.set_title('10 Most Common Words')\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequencies')\n    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n    plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels\n    plt.show()\n    \n    return ax, most_common_words\ndef task_func(csv_file):\n    \"\"\"\n    Main function to execute the task.\n    \"\"\"\n    word_count = read_and_count(csv_file)\n    ax, most_common_words = plot_and_return_most_common(word_count)\n    return ax, most_common_words"}
{"task_id": "BigCodeBench/580", "solution": "import pandas as pd\nimport random\nimport statistics\nimport matplotlib.pyplot as plt\nimport numpy as np\nRANGE = 10000\nSIZE = 1000\nBIN_WIDTH = 100\ndef task_func():\n    # Generate a list of random integers\n    random_numbers = [random.randint(0, RANGE) for _ in range(SIZE)]\n    \n    # Initialize a list to hold moving averages, with the first few being None due to no previous values\n    moving_averages = [None] * 5\n    for i in range(5, SIZE):\n        moving_averages.append(statistics.mean(random_numbers[i-5:i+1]))\n    \n    # Create a DataFrame\n    df = pd.DataFrame({\n        'Random Numbers': random_numbers,\n        'Moving Average': moving_averages\n    })\n    \n    # Plotting the histogram\n    plt.figure(figsize=(10, 6))\n    plt.hist(df['Random Numbers'], bins=np.arange(0, RANGE + BIN_WIDTH, BIN_WIDTH), edgecolor='black')\n    plt.title('Histogram of Random Numbers')\n    plt.xlabel('Random Numbers')\n    plt.ylabel('Frequency')\n    plt.show()\n    \n    return df"}
{"task_id": "BigCodeBench/581", "solution": "import math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\nSIZE = 1000\nPI = np.pi\ndef task_func(size=SIZE, frequency=1):\n    '''\n    Create a list of random sinusoidal values and plot them in a graph.\n    \n    Parameters:\n    - size (int): The number of points for the sinusoidal wave. Default is 1000.\n    - frequency (float): The frequency of the sinusoidal wave. Default is 1.\n    \n    Returns:\n    - Axes object: The plot of the sinusoidal wave.\n    '''\n    # Generate x values from 0 to 2*PI*frequency, SIZE times\n    x_values = np.linspace(0, 2*PI*frequency, size)\n    \n    # Generate random amplitudes for each point\n    amplitudes = [random.uniform(-1, 1) for _ in range(size)]\n    \n    # Calculate y values as a sinusoidal function with random amplitudes\n    y_values = [amp * np.sin(freq*x) for amp, freq, x in zip(amplitudes, [frequency]*size, x_values)]\n    \n    # Plotting\n    plt.figure(figsize=(10, 5))\n    plt.plot(x_values, y_values, label='Sinusoidal Wave')\n    plt.title(f'Sinusoidal Wave with Frequency {frequency}')\n    plt.xlabel('X-axis')\n    plt.ylabel('Y-axis')\n    plt.legend()\n    plt.grid(True)\n    \n    # Return the Axes object\n    return plt.gca()"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(size=1000):\n    \"\"\"\n    Create a list of normally distributed random numbers and plot their histogram and probability density function (PDF).\n    \n    Parameters:\n    - size (int): The number of random numbers to generate. Default is 1000.\n    \n    Returns:\n    - matplotlib.figure.Figure: A figure object containing the histogram and PDF plot.\n    \"\"\"\n    # Generate random numbers\n    data = np.random.randn(size)\n    \n    # Create a figure and a single set of axes\n    fig, ax = plt.subplots()\n    \n    # Plot histogram\n    ax.hist(data, bins='auto', density=True, alpha=0.6, color='b')\n    \n    # Plot PDF\n    x = np.linspace(data.min(), data.max(), 100)\n    pdf = stats.norm.pdf(x, data.mean(), data.std())\n    ax.plot(x, pdf, 'k', linewidth=2)\n    \n    # Set plot title and labels\n    ax.set_title('Normal Distribution Random Numbers: Histogram and PDF')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    # Return the figure\n    return fig"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n    # Generate RSA key pair\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    \n    # Generate a random password for AES encryption\n    password = get_random_bytes(16)\n    \n    # Generate a random nonce for AES encryption\n    nonce = get_random_bytes(16)\n    \n    # Create a cipher object for AES encryption\n    cipher = AES.new(password, AES.MODE_EAX, nonce)\n    \n    # Encrypt the private key\n    encrypted_priv_key, tag = cipher.encrypt_and_digest(priv_key.save_pkcs1('PEM'))\n    \n    # Encode the encrypted key, password, and nonce for safe storage/transfer\n    encrypted_priv_key_b64 = b64encode(encrypted_priv_key).decode('utf-8')\n    password_b64 = b64encode(password).decode('utf-8')\n    nonce_b64 = b64encode(nonce).decode('utf-8')\n    \n    # Create a filename based on random bytes\n    filename = f\"private_key_{os.urandom(8).hex()}.txt\"\n    \n    # Write the encrypted private key to a file (in base64 to avoid encoding issues)\n    with open(filename, 'w') as file:\n        file.write(f\"Encrypted Key:\\n{encrypted_priv_key_b64}\\nNonce:\\n{nonce_b64}\\nTag:\\n{tag.hex()}\")\n    \n    return pub_key, filename, password, nonce"}
{"task_id": "BigCodeBench/584", "solution": "import rsa\nimport urllib.request\nfrom hashlib import sha256\ndef task_func(url):\n    try:\n        # Fetch content from URL\n        with urllib.request.urlopen(url) as response:\n            content = response.read()\n    except urllib.error.URLError as e:\n        raise ValueError(f\"Unable to reach the server: {e}\")\n\n    # Generate RSA keys\n    (pubkey, privkey) = rsa.newkeys(2048)\n\n    # Calculate SHA256 hash of the content\n    hash_value = sha256(content).digest()\n\n    try:\n        # Sign the hash with the private key\n        signed_hash = rsa.sign(hash_value, privkey, 'SHA-256')\n        signed_hash_hex = signed_hash.hex()\n    except rsa.pkcs1.VerificationError as e:\n        raise rsa.pkcs1.VerificationError(f\"Failed to sign the hash: {e}\")\n\n    return pubkey, signed_hash_hex, hash_value"}
{"task_id": "BigCodeBench/585", "solution": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\ndef task_func(directory):\n    # Generate RSA key pair\n    (pubkey, privkey) = rsa.newkeys(2048)\n\n    # Initialize a list to hold encrypted file contents\n    encrypted_files = []\n\n    # Walk through the directory\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            # Open the file for reading in binary mode\n            with open(os.path.join(root, file), 'rb') as f:\n                data = f.read()\n            # Encrypt the file data using the public key (Note: Not efficient for large files)\n            encrypted_data = rsa.encrypt(data, pubkey)\n            # Append the encrypted data and original file name to the list\n            encrypted_files.append((b64encode(encrypted_data).decode('utf-8'), file))\n\n    # Create a zip file\n    zip_filename = 'encrypted_files.zip'\n    with zipfile.ZipFile(zip_filename, 'w') as zipf:\n        for data, filename in encrypted_files:\n            zipf.writestr(filename, data)\n\n    return pubkey, zip_filename"}
{"task_id": "BigCodeBench/586", "solution": "import os\nimport rsa\nfrom cryptography.fernet import Fernet\nfrom base64 import b64encode\ndef task_func(file_path):\n    # Generate RSA key pair\n    (public_key, private_key) = rsa.newkeys(2048)\n\n    # Create a Fernet instance with a new key\n    fernet_key = Fernet.generate_key()\n    fernet = Fernet(fernet_key)\n\n    # Read the file to be encrypted\n    with open(file_path, 'rb') as file:\n        file_data = file.read()\n\n    # Encrypt the file data\n    encrypted_data = fernet.encrypt(file_data)\n\n    # Encrypt the Fernet key with the RSA public key\n    encrypted_fernet_key = rsa.encrypt(fernet_key, public_key)\n\n    # Save the encrypted file data\n    encrypted_file_name = os.path.splitext(file_path)[0] + '.encrypted'\n    with open(encrypted_file_name, 'wb') as encrypted_file:\n        encrypted_file.write(encrypted_data)\n\n    # Save the encrypted Fernet key\n    encrypted_key_file_name = 'key.' + os.path.splitext(file_path)[0] + '.encrypted'\n    with open(encrypted_key_file_name, 'wb') as encrypted_key_file:\n        encrypted_key_file.write(b64encode(encrypted_fernet_key))\n\n    return public_key, encrypted_file_name, encrypted_key_file_name"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n    # Generate RSA keys\n    (pub_key, priv_key) = rsa.newkeys(2048)\n\n    # Encrypt file with AES\n    with open(file_path, 'rb') as f:\n        data = f.read()\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(data) + padder.finalize()\n    iv = os.urandom(16)\n    cipher = Cipher(algorithms.AES(priv_key.public_key().encrypt(iv, padding.OAEP(\n        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n        algorithm=hashes.SHA256(),\n        label=None\n    ))), modes.CBC(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n\n    # Encrypt AES key with RSA public key\n    encrypted_aes_key = b64encode(pub_key.encrypt(iv + encrypted_data[:16], padding.OAEP(\n        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n        algorithm=hashes.SHA256(),\n        label=None\n    )))\n\n    # Save encrypted file and encrypted AES key\n    encrypted_file = file_path + '.encrypted'\n    encrypted_key_file = file_path + '_key.encrypted'\n    with open(encrypted_file, 'wb') as f:\n        f.write(encrypted_data)\n    with open(encrypted_key_file, 'wb') as f:\n        f.write(encrypted_aes_key)\n\n    return pub_key, encrypted_file, encrypted_key_file"}
{"task_id": "BigCodeBench/588", "solution": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nRANGE = 100\nSIZE = 1000\ndef task_func():\n    \"\"\"\n    Generates and visualizes a DataFrame with random integers.\n    \n    Returns:\n        pd.DataFrame: DataFrame with 'X' and 'Y' columns.\n    \"\"\"\n    # Generate DataFrame\n    df = pd.DataFrame({\n        'X': np.random.randint(0, RANGE, SIZE),\n        'Y': np.random.randint(0, RANGE, SIZE)\n    })\n    \n    # Plot DataFrame using seaborn\n    plt.figure(figsize=(10, 8))\n    sns.scatterplot(data=df, x='X', y='Y', color='blue', alpha=0.6)\n    plt.title('Scatter Plot of Randomly Generated Integers')\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.grid(True)\n    plt.show()\n    \n    return df"}
{"task_id": "BigCodeBench/589", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\ndef task_func():\n    # Generate random 2D data points\n    np.random.seed(0)  # For reproducible results\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    \n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    \n    # Plot the results\n    plt.figure(figsize=(8, 6))\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='X', label='Centroids')\n    plt.title('KMeans Clustering')\n    plt.xlabel('Feature 1')\n    plt.ylabel('Feature 2')\n    plt.legend()\n    plt.show()\n    \n    return data, kmeans"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom urllib.error import URLError\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n    if not url:\n        raise ValueError(\"URL is invalid or empty.\")\n    \n    try:\n        with urllib.request.urlopen(url) as response:\n            html = response.read()\n    except URLError as e:\n        raise URLError(f\"Failed to reach the server. Error: {e}\")\n    \n    doc = pq(html)\n    anchor_tags = doc('a')\n    \n    data = []\n    for tag in anchor_tags.items():\n        text = tag.text()\n        href = tag.attr('href')\n        fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        data.append({'text': text, 'href': href, 'fetch_time': fetch_time})\n    \n    return pd.DataFrame(data)"}
{"task_id": "BigCodeBench/591", "solution": "from datetime import datetime, timedelta\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEMP_CATEGORIES = ['Cold', 'Normal', 'Hot']\nFILE_PATH = 'custom_data.csv'\ndef task_func(hours, file_path=FILE_PATH):\n    \"\"\"\n    Generate temperature data for the specified number of hours, save it in a CSV file, \n    and plot the data using matplotlib.\n    \"\"\"\n    # Initialize data list\n    data = []\n    \n    # Start time\n    start_time = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)\n    \n    for _ in range(hours):\n        # Generate random temperature in Celsius\n        temp = randint(-10, 40)\n        # Assign temperature category\n        category = TEMP_CATEGORIES[randint(0, 2)]\n        # Append data\n        data.append({'Time': start_time, 'Temperature': temp, 'Category': category})\n        # Increment time by one hour\n        start_time += timedelta(hours=1)\n    \n    # Convert data to DataFrame\n    df = pd.DataFrame(data)\n    \n    # Save DataFrame to CSV\n    df.to_csv(file_path, index=False)\n    \n    # Plotting\n    plt.figure(figsize=(14, 7))\n    plt.plot(df['Time'], df['Temperature'], marker='o', linestyle='-', color='b')\n    plt.title('Temperature over Time')\n    plt.xlabel('Time')\n    plt.ylabel('Temperature (\u00b0C)')\n    plt.grid(True)\n    \n    # Category colors for legend\n    colors = ['blue', 'green', 'red']\n    for category, color in zip(TEMP_CATEGORIES, colors):\n        df_category = df[df['Category'] == category]\n        plt.plot(df_category['Time'], df_category['Temperature'], color=color, label=category, linestyle='--')\n    \n    plt.legend()\n    plt.tight_layout()\n    \n    # Return file path and the plot object\n    return FILE_PATH, plt.gca()"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data for the specified number of hours and save it in a CSV file.\n    \"\"\"\n    # Ensure the output directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    \n    # Generate a unique filename with timestamp\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    file_path = os.path.join(output_dir, f'sensor_data_{timestamp}.csv')\n    \n    # Write sensor data to CSV\n    with open(file_path, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time', *SENSORS])  # Write headers\n        \n        start_time = datetime.now()\n        for _ in range(hours * 3600):  # Assuming one data point per second\n            current_time = start_time + datetime.timedelta(seconds=_)\n            data_row = [current_time.strftime('%Y-%m-%d %H:%M:%S'),\n                        randint(-20, 50),  # Temperature (-20 to 50 degrees Celsius)\n                        randint(0, 100),   # Humidity (0 to 100%)\n                        randint(900, 1100)]  # Pressure (900 to 1100 hPa)\n            writer.writerow(data_row)\n    \n    print(f\"Data generated and saved in: {file_path}\")\n    return hours"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef ensure_dir(file_path):\n    directory = os.path.dirname(file_path)\n    if not os.path.exists(directory):\n        os.makedirs(directory)\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data for different vehicle types over a specified number of hours,\n    saves the data to a CSV file, and plots the data.\n\n    Parameters:\n    - hours (int): Number of hours to generate data for.\n    - output_dir (str, optional): The output directory path.\n\n    Returns:\n    - tuple: Path to the CSV file and the matplotlib axes object of the line plot.\n    \"\"\"\n    # Generate data\n    data = {vehicle: [] for vehicle in VEHICLE_TYPES}\n    for _ in range(hours * 60):  # Assuming data is collected every minute\n        for vehicle in VEHICLE_TYPES:\n            data[vehicle].append(randint(0, 100))  # Random count for each vehicle type\n\n    # Create DataFrame\n    time_series = [datetime.now().strftime('%H:%M:%S') for _ in range(hours*60)]\n    df = pd.DataFrame(data, index=time_series)\n\n    # Save to CSV\n    file_path = os.path.join(output_dir, 'traffic_data.csv')\n    ensure_dir(file_path)\n    df.to_csv(file_path)\n\n    # Plot data\n    plt.figure(figsize=(10, 6))\n    for vehicle in VEHICLE_TYPES:\n        plt.plot(df.index, df[vehicle], label=vehicle)\n    plt.title('Traffic Count Over Time')\n    plt.xlabel('Time')\n    plt.ylabel('Vehicle Count')\n    plt.legend()\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    # Save plot and return\n    plot_file_path = os.path.join(output_dir, 'traffic_plot.png')\n    plt.savefig(plot_file_path)\n    plt.close()  # Close the plot to prevent display in non-interactive environments\n\n    return file_path, plot_file_path"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\nBACKUP_DIR = './backup'\ndef ensure_dir_exists(dir_path):\n    \"\"\"Ensure a directory exists, creating it if necessary.\"\"\"\n    if not os.path.exists(dir_path):\n        os.makedirs(dir_path)\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data for the specified number of hours, save it in a CSV file, and back up the file.\n    \"\"\"\n    ensure_dir_exists(output_dir)\n    file_path = os.path.join(output_dir, 'weather_data.csv')\n    \n    with open(file_path, 'w', newline='') as csvfile:\n        fieldnames = ['Time', 'Condition']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        \n        for hour in range(hours):\n            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # Current time\n            weather_condition = random.choice(WEATHER_CONDITIONS)  # Random weather condition\n            writer.writerow({'Time': current_time, 'Condition': weather_condition})\n    \n    # Create a backup\n    backup_path = os.path.join(BACKUP_DIR, 'weather_data_backup_' + datetime.now().strftime('%Y%m%d%H%M%S') + '.csv')\n    ensure_dir_exists(BACKUP_DIR)\n    shutil.copy(file_path, backup_path)\n    \n    return file_path"}
{"task_id": "BigCodeBench/595", "solution": "import random\nimport bisect\nfrom array import array\ndef task_func(n=10, total=100):\n    \"\"\"\n    Generates 'n' random integer numbers such that their sum equals 'total', sorts these numbers,\n    and determines the position where a new random number can be inserted to maintain the sorted order.\n    The function uses a retry mechanism to ensure the generated numbers sum up to 'total'.\n\n    Parameters:\n    n (int): The number of random numbers to generate. Default is 10.\n    total (int): The total sum of the generated numbers. Default is 100.\n\n    Returns:\n    tuple: A tuple containing the sorted numbers as an array and the insertion position for a new number.\n    \"\"\"\n    while True:\n        # Generate random numbers and ensure their sum equals 'total'\n        nums = [random.randint(1, total // n) for _ in range(n)]\n        if sum(nums) == total:\n            break\n    # Sort the numbers\n    nums_sorted = array('i', sorted(nums))\n    # Determine the insertion position for a new number\n    pos = bisect.bisect(nums_sorted, random.randint(1, total // n))\n    return nums_sorted, pos"}
{"task_id": "BigCodeBench/596", "solution": "import time\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func(duration):\n    \"\"\"\n    Generate and draw random data in real time for the specified duration.\n\n    Parameters:\n    - duration (int): The duration in seconds for which data is to be generated and plotted.\n\n    Returns:\n    - tuple: A tuple containing two lists.\n        - The first list contains timestamps (as strings) in the format '%H:%M:%S.%f'.\n        - The second list contains the generated random values.\n    \"\"\"\n    timestamps = []\n    data_values = []\n    \n    for _ in range(duration):\n        # Generate timestamp\n        timestamp_now = datetime.now().strftime('%H:%M:%S.%f')\n        timestamps.append(timestamp_now)\n        \n        # Generate random data\n        data_value = randint(0, 100)\n        data_values.append(data_value)\n        \n        # Plot data in real time\n        plt.plot(timestamps, data_values, 'r-', animated=True)\n        plt.ylabel('Random Data')\n        plt.xlabel('Time')\n        plt.title('Real-time Data Generation')\n        \n        # Clear previous plot to animate it\n        plt.gca().clear()\n        \n        # Show the plot and pause for a short time to simulate real-time data\n        plt.pause(0.1)\n        time.sleep(0.1)  # Adjust this for slower/faster updates\n    \n    # Final plot without clearing\n    plt.plot(timestamps, data_values, 'r-')\n    plt.ylabel('Random Data')\n    plt.xlabel('Time')\n    plt.title('Real-time Data Generation (Complete)')\n    plt.show()\n    \n    return timestamps, data_values"}
{"task_id": "BigCodeBench/597", "solution": "import pandas as pd\nimport time\ndef task_func(data, letter):\n    \"\"\"\n    Filters rows in a dictionary where the 'Name' column values start with a specified letter.\n    First, convert the dict to a DataFrame and then filter rows in this DataFrame.\n\n    Parameters:\n    - data (dict of list): The input dict. It should have a 'Name' key.\n    - letter (str): The letter to filter the 'Name' column by.\n\n    Returns:\n    - pd.Series: A Series of filtered 'Name' column.\n\n    Example:\n    >>> data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva', 'Fiona']}\n    >>> filtered_names = task_func(data, 'a')\n    >>> filtered_names.index[0].startswith('A')\n    True\n    >>> len(filtered_names)\n    1\n    \"\"\"\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Filter the DataFrame where 'Name' starts with the given letter\n    filtered_df = df[df['Name'].str.startswith(letter)]\n    \n    # Return the 'Name' column of the filtered DataFrame as a Series\n    return filtered_df['Name']"}
{"task_id": "BigCodeBench/598", "solution": "import pandas as pd\ndef task_func(df_dict, letter):\n    \"\"\"\n    The function filters rows in a DataFrame where words begin with a specified letter,\n    then calculates the length of these words and returns a dictionary of word lengths and counts.\n\n    Parameters:\n    df_dict (dict): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the words by.\n\n    Returns:\n    dict: A dictionary with word lengths as keys and their counts as values.\n    \"\"\"\n    # Convert the dictionary to a DataFrame\n    df = pd.DataFrame(df_dict)\n    \n    # Filter the DataFrame to include only rows where 'Word' starts with the specified letter\n    filtered_df = df[df['Word'].str.startswith(letter)]\n    \n    # Calculate the length of the words\n    word_lengths = filtered_df['Word'].apply(len)\n    \n    # Count the occurrence of each word length\n    length_counts = word_lengths.value_counts().to_dict()\n    \n    return length_counts"}
{"task_id": "BigCodeBench/599", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df_dict, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns a histogram plot of the word lengths.\n    \n    Parameters:\n    - df_dict (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    - letter (str): The letter to filter the 'Word' column by. It should be a lowercase letter.\n    \n    Returns:\n    - Axes: A histogram plot of word lengths for words starting with the specified letter.\n    \"\"\"\n    # Convert dictionary to DataFrame\n    df = pd.DataFrame(df_dict)\n    \n    # Filter DataFrame for rows where 'Word' starts with the specified letter\n    filtered_df = df[df['Word'].str.startswith(letter)]\n    \n    # Calculate word lengths\n    word_lengths = filtered_df['Word'].apply(len)\n    \n    # Create histogram\n    plt.figure(figsize=(10, 6))\n    ax = plt.hist(word_lengths, bins=range(1, 11), edgecolor='black')\n    \n    # Label the axes\n    plt.title(f'Word Lengths Histogram for Words Starting with \"{letter}\"')\n    plt.xlabel('Word Length')\n    plt.ylabel('Frequency')\n    \n    # Show plot\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/600", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(df_dict, letter):\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(df_dict)\n    \n    # Filter rows where 'Word' column starts with the specified letter\n    filtered_df = df[df['Word'].str.startswith(letter)]\n    \n    # Calculate the lengths of the words\n    word_lengths = filtered_df['Word'].apply(len)\n    \n    # Calculate statistics\n    stats = {\n        'mean': np.mean(word_lengths),\n        'median': np.median(word_lengths),\n        'mode': pd.Series(word_lengths).mode().iloc[0] if not word_lengths.empty else None\n    }\n    \n    return stats"}
{"task_id": "BigCodeBench/601", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, letter):\n    \"\"\"\n    Filters rows in a DataFrame based on the starting letter of the values in the 'Word' column.\n    It then calculates the lengths of these words and returns a box plot representing the distribution\n    of these lengths.\n    \"\"\"\n    # Check if 'Word' column exists\n    if 'Word' not in df.columns:\n        print(\"The DataFrame does not contain a 'Word' column.\")\n        return None\n    \n    # Filter DataFrame for rows where 'Word' starts with the given letter\n    filtered_df = df[df['Word'].str.startswith(letter)]\n    \n    # If no words start with the given letter, return None\n    if filtered_df.empty:\n        print(f\"No words start with the letter '{letter}'.\")\n        return None\n    \n    # Calculate word lengths\n    word_lengths = filtered_df['Word'].apply(len)\n    \n    # Create a box plot\n    plt.figure(figsize=(10, 6))\n    sns.boxplot(y=word_lengths)\n    plt.title(f'Distribution of Word Lengths Starting with \"{letter}\"')\n    plt.ylabel('Word Length')\n    plt.grid(True)\n    \n    # Show the plot\n    plt.show()"}
{"task_id": "BigCodeBench/602", "solution": "import os\nimport numpy as np\nimport pandas as pd\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\nOUTPUT_DIR = './output'\ndef task_func(file_path, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create a CSV file containing a 2D matrix populated exclusively with random lowercase letters.\n    \n    Parameters:\n    - file_path (str): The path of the CSV file to be created.\n    - output_dir (str, optional): The directory of the CSV file to be created.\n    \n    Returns:\n    None: Writes a CSV file to the specified path.\n    \"\"\"\n    # Ensure the output directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    \n    # Define the size of the matrix (example: 5x5 matrix)\n    matrix_size = (5, 5)  # You can change this to any size you want\n    \n    # Generate a random matrix with letters\n    random_matrix = np.random.choice(LETTERS, size=matrix_size)\n    \n    # Convert the numpy array to a pandas DataFrame\n    df = pd.DataFrame(random_matrix)\n    \n    # Save the DataFrame to a CSV file\n    file_path = os.path.join(output_dir, file_path)\n    df.to_csv(file_path, index=False, header=False)\n    \n    print(f\"CSV file with random matrix has been created at {file_path}\")"}
{"task_id": "BigCodeBench/603", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(matrix1, matrix2):\n    \"\"\"\n    Connects two 2D numeric arrays (matrices) along the second axis (columns),\n    converts them into a Pandas DataFrame, and returns a string representation of the DataFrame.\n\n    Parameters:\n    - matrix1 (np.ndarray): The first 2D numpy array.\n    - matrix2 (np.ndarray): The second 2D numpy array.\n\n    Returns:\n    - str: The string representation of the DataFrame without the index and header.\n\n    Example:\n    >>> matrix1 = np.array([[1, 2, 3], [4, 5, 6]])\n    >>> matrix2 = np.array([[7, 8, 9], [10, 11, 12]])\n    >>> result = task_func(matrix1, matrix2)\n    >>> all(x in result.replace(' ', '') for x in ['123789', '456101112'])\n    True\n    \"\"\"\n    # Concatenate the matrices along the columns (axis=1)\n    concatenated_matrix = np.concatenate((matrix1, matrix2), axis=1)\n    \n    # Convert the concatenated matrix into a DataFrame\n    df = pd.DataFrame(concatenated_matrix)\n    \n    # Return the string representation of the DataFrame without index and header\n    return df.to_string(index=False, header=False)"}
{"task_id": "BigCodeBench/604", "solution": "import subprocess\nimport logging\ndef task_func(filepath):\n    \"\"\"\n    Attempts to compile a C++ file specified by 'filepath'.\n    \"\"\"\n    try:\n        # Construct the g++ command for compilation (assuming g++ is the compiler)\n        compile_command = ['g++', '-o', filepath.split('.')[0], filepath]\n        \n        # Run the compilation command\n        subprocess.check_call(compile_command)\n        \n        logging.info(f\"Compilation successful for {filepath}.\")\n        \n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Compilation failed for {filepath}. Error: {e}\")\n    except FileNotFoundError as e:\n        logging.error(f\"File not found or compiler not accessible: {e}\")"}
{"task_id": "BigCodeBench/605", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    \"\"\"\n    Visualize a 2D numeric array (matrix) as a heatmap using matplotlib, specifying a cmap for the color mapping\n    and interpolation to control the pixel rendering.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    ax (matplotlib.axes._axes.Axes): The Axes object with the heatmap of the 'hot' colormap.\n    \"\"\"\n    # Convert the numpy array to a pandas DataFrame for better handling by seaborn\n    df = pd.DataFrame(matrix)\n    \n    # Create a new figure and an Axes object\n    fig, ax = plt.subplots()\n    \n    # Draw the heatmap using the 'hot' colormap and 'nearest' interpolation\n    cax = ax.matshow(df, cmap='hot', interpolation='nearest')\n    \n    # Set the labels for x-axis and y-axis\n    ax.set_xticklabels([''] + list(range(df.shape[1])) )\n    ax.set_yticklabels([''] + list(range(df.shape[0])) )\n    \n    # Add a color bar\n    plt.colorbar(cax)\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/606", "solution": "import numpy as np\nimport pandas as pd\nfrom scipy import stats\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    # Convert the matrix to a DataFrame\n    df = pd.DataFrame(matrix)\n    \n    # Normalize using Z-score method\n    normalized_df = stats.zscore(df, ddof=0)\n    \n    return pd.DataFrame(normalized_df)"}
{"task_id": "BigCodeBench/607", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom random import sample\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n    '''\n    Remove rows from a dataframe based on column values and generate random scatter plots.\n    '''\n    # Remove rows based on the tuples provided\n    for t in tuples:\n        df = df[(df != t).all(axis=1)]\n    \n    # Generate scatter plots\n    plots = []\n    column_pairs = sample(list(combinations(COLUMNS, 2)), n_plots) if n_plots <= len(COLUMNS)*(len(COLUMNS)-1)//2 else combinations(COLUMNS, 2)\n    for pair in column_pairs:\n        plt.figure(figsize=(6, 6))\n        plt.scatter(df[pair[0]], df[pair[1]])\n        plt.title(f'Scatter plot of {pair[0]} vs {pair[1]}')\n        plt.xlabel(pair[0])\n        plt.ylabel(pair[1])\n        plots.append(plt.gca())\n    \n    # Clearing the current figure after all plots are created\n    plt.clf()\n    \n    return df, plots"}
{"task_id": "BigCodeBench/608", "solution": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom random import sample\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n    \"\"\"\n    Remove rows from a dataframe based on values of multiple columns, and then create n random pairs of two columns \n    against each other to generate pairplots.\n    \"\"\"\n    # Remove specified rows from the dataframe\n    for t in tuples:\n        df = df[(df[COLUMNS] != t).any(axis=1)]\n    \n    # Generate pairplots\n    axes_list = []\n    columns_for_pairplot = sample(COLUMNS, min(n_plots, len(COLUMNS)))\n    for _ in range(n_plots):\n        pair = sample(columns_for_pairplot, 2)\n        g = sns.pairplot(df, vars=pair)\n        axes_list.extend(g.axes.flatten())\n        \n    return df, axes_list"}
{"task_id": "BigCodeBench/609", "solution": "import pandas as pd\nimport numpy as np\nfrom itertools import combinations\nfrom random import sample\nimport matplotlib.pyplot as plt\ndef task_func(df, tuples, n_plots):\n    \"\"\"\n    Removes rows from a DataFrame based on a list of tuples, each representing row values to match and remove.\n    Generates up to 'n_plots' scatter plots for random combinations of two columns from the remaining DataFrame.\n\n    Parameters:\n    - df (pd.DataFrame): The input DataFrame.\n    - tuples (list): A list of tuples, where each tuple contains values that, if matched, should result in the row being removed.\n    - n_plots (int): The maximum number of scatter plots to generate from the remaining data.\n\n    Returns:\n    - pd.DataFrame: The DataFrame after specified rows have been removed.\n    - list: A list of tuples, each containing a pair of column names used for the plot and the corresponding plot object.\n    \"\"\"\n    # Remove rows based on the tuples\n    for t in tuples:\n        df = df[(df != t).all(axis=1)]\n    \n    # Generate scatter plots\n    plots = []\n    columns = df.columns.tolist()\n    for _ in range(n_plots):\n        if len(columns) < 2:\n            break\n        cols_to_plot = sample(columns, 2)\n        plt.figure(figsize=(6, 4))\n        plt.scatter(df[cols_to_plot[0]], df[cols_to_plot[1]])\n        plt.title(f'Scatter plot of {cols_to_plot[0]} vs {cols_to_plot[1]}')\n        plt.xlabel(cols_to_plot[0])\n        plt.ylabel(cols_to_plot[1])\n        plots.append((cols_to_plot, plt.gcf()))\n        columns.remove(cols_to_plot[0])\n        columns.remove(cols_to_plot[1])  # Avoid reusing the same columns in the next plot\n    \n    return df, plots"}
{"task_id": "BigCodeBench/610", "solution": "from random import sample\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n    '''\n    Remove rows from a dataframe based on values of multiple columns, \n    and then create n random joint plots of two columns against each other if the DataFrame is not empty.\n    '''\n    # Remove rows based on the tuples\n    for tuple_val in tuples:\n        df = df[~df[COLUMNS].eq(tuple_val).all(axis=1)]\n        \n    # If DataFrame is empty after removal, return it along with an empty list\n    if df.empty:\n        return df, []\n    \n    # Generate joint plots\n    plots = []\n    while len(plots) < n_plots and len(COLUMNS) > 1:\n        # Randomly select two columns for joint plot\n        cols_to_plot = sample(COLUMNS, 2)\n        g = sns.jointplot(data=df, x=cols_to_plot[0], y=cols_to_plot[1])\n        plots.append(g)\n        \n    return df, plots"}
{"task_id": "BigCodeBench/611", "solution": "import pandas as pd\nimport numpy as np\nfrom random import sample\nimport matplotlib.pyplot as plt\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n    \"\"\"\n    Removes rows from a DataFrame based on values of multiple columns, \n    and then create n random line plots of two columns against each other.\n    \"\"\"\n    # Remove rows based on tuples\n    for t in tuples:\n        df = df[(df != t).any(axis=1)]\n    \n    # Generate line plots\n    plot_details = []\n    for _ in range(n_plots):\n        cols_to_plot = sample(COLUMNS, 2)\n        plt.figure(figsize=(8, 6))\n        plt.plot(df[cols_to_plot[0]], df[cols_to_plot[1]], marker='o')\n        plt.title(f'Plot of {cols_to_plot[0]} vs {cols_to_plot[1]}')\n        plt.xlabel(cols_to_plot[0])\n        plt.ylabel(cols_to_plot[1])\n        plt.grid(True)\n        plot_details.append((cols_to_plot[0], cols_to_plot[1]))\n        plt.show()\n    \n    return df, plot_details"}
{"task_id": "BigCodeBench/612", "solution": "from random import choice\nimport numpy as np\nimport pandas as pd\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTIES_COSTS = [100, 200, 300, 400, 500]\ndef task_func(goals, penalties, teams=TEAMS, penalties_costs=PENALTIES_COSTS):\n    \"\"\"\n    Function as described in the problem statement.\n    \"\"\"\n    performance_report = []\n\n    for team in teams:\n        # Fetching or defaulting goal and penalty counts\n        team_goals = goals.get(team, 0)\n        team_penalties = penalties.get(team, 0)\n        \n        # Randomly selecting a multiplier for penalties cost\n        penalties_cost_multiplier = choice(penalties_costs)\n        \n        # Calculating 'Penalties Cost'\n        penalties_cost = team_penalties * penalties_cost_multiplier\n        \n        # Calculating 'Performance Score'\n        performance_score = max(team_goals - team_penalties, 0)\n        \n        # Appending to the report\n        performance_report.append({\n            'Team': team,\n            'Goals': team_goals,\n            'Penalties': team_penalties,\n            'Penalties Cost': penalties_cost,\n            'Performance Score': performance_score\n        })\n\n    # Converting the list of dictionaries into a DataFrame\n    return pd.DataFrame(performance_report)"}
{"task_id": "BigCodeBench/613", "solution": "import pandas as pd\nfrom matplotlib import pyplot as plt\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nGOALS_RANGE = (-10, 10)\ndef task_func(goals, penalties):\n    \"\"\"\n    The function to calculate and visualize net scores for teams.\n    \"\"\"\n    # Calculate net scores and clip them to the range\n    net_scores = {team: max(min(goals[team] - penalties[team], GOALS_RANGE[1]), GOALS_RANGE[0]) for team in TEAMS}\n    \n    # Create a DataFrame\n    df = pd.DataFrame(list(net_scores.items()), columns=['Team', 'Score'])\n    \n    # Visualize the scores\n    plt.figure(figsize=(10, 6))\n    plt.bar(df['Team'], df['Score'], color='skyblue')\n    plt.title('Net Scores for Teams')\n    plt.xlabel('Team')\n    plt.ylabel('Score')\n    plt.ylim(GOALS_RANGE[0], GOALS_RANGE[1])\n    plt.xticks(rotation=0)\n    plt.tight_layout()\n    plt.show()\n    \n    return df"}
{"task_id": "BigCodeBench/614", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(goals, penalties):\n    \"\"\"\n    Visualize the distribution of goals and penalties for a number of teams and return the data as a\n    DataFrame with columns 'Team', 'Goals' and 'Penalties'.\n    \"\"\"\n    # Combine goals and penalties into a single DataFrame\n    data = {'Team': list(goals.keys()), 'Goals': list(goals.values()), 'Penalties': list(penalties.values())}\n    df = pd.DataFrame(data)\n\n    # Visualize the data using seaborn pairplot\n    sns.set(style=\"ticks\")\n    pairplot = sns.pairplot(df, x_vars=['Goals'], y_vars=['Penalties'], kind=\"scatter\", height=4)\n    plt.title('Goals vs Penalties Distribution')\n\n    return df, pairplot.axes[0, 0]\ngoals = {'Team A': 3, 'Team B': 2, 'Team C': 1, 'Team D': 0, 'Team E': 2}\npenalties = {'Team A': 1, 'Team B': 0, 'Team C': 2, 'Team D': 3, 'Team E': 1}"}
{"task_id": "BigCodeBench/615", "solution": "from random import randint, seed\nimport pandas as pd\nPENALTY_COST = 500\ndef task_func(goals, penalties, rng_seed=None):\n    \"\"\"\n    Generate a Pandas DataFrame with columns 'Team' and 'Match Result' of the results of football matches for multiple\n    teams, incorporating random goals and penalties. Penalties are converted into fines using a predefined cost.\n    \"\"\"\n    if rng_seed is not None:\n        seed(rng_seed)\n    \n    teams = ['Team {}'.format(i) for i in range(1, 6)]  # Assuming 5 teams for this example\n    results = []\n    \n    for team in teams:\n        team_goals = randint(0, goals)\n        team_penalties = randint(0, penalties)\n        team_fines = team_penalties * PENALTY_COST\n        result_str = f\"({team_goals} goals, ${team_fines})\"\n        results.append({'Team': team, 'Match Result': result_str})\n    \n    return pd.DataFrame(results)"}
{"task_id": "BigCodeBench/616", "solution": "from random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties, teams=TEAMS, penalty_cost=PENALTY_COST, rng_seed=None):\n    \"\"\"\n    The function definition provided in the question.\n    \"\"\"\n    if rng_seed is not None:\n        seed(rng_seed)\n    \n    # Generate random data\n    results = {\n        'Team': teams,\n        'Goals': [randint(0, goals) for _ in teams],\n        'Penalties': [randint(0, penalties) for _ in teams],\n        'Penalty Cost': [p * penalty_cost for p in results['Penalties']]\n    }\n    \n    # Create DataFrame\n    df = pd.DataFrame(results)\n    \n    # Create a bar plot\n    ax = plt.figure(figsize=(10, 6)).add_subplot(111)\n    df.plot(kind='bar', x='Team', ax=ax, y=['Goals', 'Penalty Cost'], stacked=True, color=['green', 'red'])\n    ax.set_ylabel('Score and Penalty Cost')\n    ax.set_title('Football Match Results')\n    for p in ax.patches:\n        ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2., p.get_height()), ha='center', va='bottom')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/617", "solution": "from random import randint, seed\nimport pandas as pd\nimport matplotlib.pyplot as plt\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties, rng_seed=None, teams=TEAMS):\n    \"\"\"\n    The function to generate and analyze football match results.\n    \"\"\"\n    if rng_seed is not None:\n        seed(rng_seed)\n    \n    # Initialize DataFrame\n    results = pd.DataFrame({'Team': teams})\n    \n    # Generate random goals and penalties\n    results['Goals'] = [randint(0, goals) for _ in teams]\n    results['Penalties'] = [randint(0, penalties) for _ in teams]\n    \n    # Calculate penalty cost\n    results['Penalty Cost'] = results['Penalties'] * PENALTY_COST\n    \n    # Analyze and visualize\n    # Plotting is commented out as it's not directly asked for in the function description\n    # plt.bar(results['Team'], results['Goals'], label='Goals')\n    # plt.bar(results['Team'], results['Penalty Cost'], bottom=results['Goals'], label='Penalty Cost', color='r')\n    # plt.legend()\n    # plt.show()\n    \n    return results"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties):\n    \"\"\"\n    Generate and visualize a Pandas DataFrame of the results of football matches for multiple teams with random goals and penalties.\n    \"\"\"\n    # Generate random data\n    np.random.seed(0)  # For reproducible results\n    results = {team: {'Goals': randint(0, goals), 'Penalties': randint(0, penalties)} for team in TEAMS}\n    \n    # Convert penalties into fines\n    for team in results:\n        results[team]['Penalty Cost'] = results[team]['Penalties'] * PENALTY_COST\n    \n    # Create DataFrame\n    df = pd.DataFrame(results).T\n    \n    # Visualize Goals\n    plt.figure(figsize=(10, 5))\n    sns.barplot(x=df.index, y='Goals', data=df)\n    plt.title('Goals by Team')\n    goals_plot = plt.gca()\n    \n    # Visualize Penalty Costs\n    plt.figure(figsize=(10, 5))\n    sns.barplot(x=df.index, y='Penalty Cost', data=df)\n    plt.title('Penalty Cost by Team')\n    penalty_plot = plt.gca()\n    \n    # Show plots\n    plt.show()\n    \n    return df, [goals_plot, penalty_plot]"}
{"task_id": "BigCodeBench/619", "solution": "from random import randint, seed\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000\ndef task_func(goals, penalties, rng_seed=None):\n    \"\"\"\n    Simulates football match results with random goals and penalties for multiple teams,\n    and trains a linear regression model to predict penalty costs from goals.\n    \"\"\"\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    # Simulate match results\n    data = []\n    for _ in range(len(TEAMS)):\n        team = TEAMS[_]\n        team_goals = randint(0, goals)\n        team_penalties = randint(0, penalties)\n        penalty_cost = team_penalties * PENALTY_COST\n        data.append([team, team_goals, penalty_cost])\n\n    # Create DataFrame\n    df = pd.DataFrame(data, columns=['Team', 'Goals', 'Penalty Cost'])\n\n    # Train a Linear Regression Model\n    model = LinearRegression()\n    X = df[['Goals']]  # Features\n    y = df['Penalty Cost']  # Target variable\n    model.fit(X, y)\n\n    return df, model"}
{"task_id": "BigCodeBench/620", "solution": "import numpy as np\nimport pandas as pd\nRANGE = (1, 100)\ndef task_func(L):\n    '''\n    Generates a DataFrame filled with random integers. The dimensions of the DataFrame (number of rows and columns)\n    are determined by multiplying pairs of integers from nested lists within the input list of lists 'L'.\n    \n    Parameters:\n    L (list of lists): A list of lists where each sublist contains two integers.\n    \n    Returns:\n    DataFrame: A pandas DataFrame with random integers.\n    '''\n    # Generate a DataFrame for each pair and concatenate them\n    dfs = [pd.DataFrame(np.random.randint(*RANGE, size=(i, j)), columns=[f'Col_{j}' for j in range(i)]) for i, j in L]\n    return pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame()"}
{"task_id": "BigCodeBench/621", "solution": "from itertools import chain\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    '''\n    Convert a list of lists 'L' into a single list of integers, standardize the integers, and plot the standardized values.\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    matplotlib.axes._axes.Axes: A plot displaying the standardized values.\n    '''\n    # Flatten the list of lists into a single list\n    flat_list = list(chain.from_iterable(L))\n    \n    # Convert the list into a numpy array for standardization\n    int_array = np.array(flat_list, dtype=int)\n    \n    # Standardize the integer values\n    scaler = StandardScaler()\n    standardized_values = scaler.fit_transform(int_array.reshape(-1, 1))\n    \n    # Plot the standardized values\n    plt.figure(figsize=(10, 5))\n    plt.plot(standardized_values, marker='o', linestyle='-', color='b')\n    plt.title('Standardized Values')\n    plt.xlabel('Data Point Index')\n    plt.ylabel('Standardized Value')\n    plt.grid(True)\n    \n    # Return the plot\n    return plt.gca()"}
{"task_id": "BigCodeBench/622", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\nfrom itertools import chain\ndef task_func(L):\n    '''\n    Convert a list of lists 'L' into a flattened list of integers, then fit a normal distribution to the data \n    and plot a histogram with the fitted normal distribution overlay.\n\n    Parameters:\n    L (list of lists): A nested list where each inner list contains integers.\n\n    Returns:\n    matplotlib.axes._axes.Axes: Axes object with the plotted histogram and normal distribution overlay.\n    '''\n    # Flatten the list of lists into a single list\n    flat_list = list(chain.from_iterable(L))\n    \n    # Convert the list to a numpy array for calculations\n    data = np.array(flat_list, dtype=int)\n    \n    # Fit a normal distribution to the data\n    mu, std = norm.fit(data)\n    \n    # Plot the histogram\n    fig, ax = plt.subplots()\n    ax.hist(data, bins='auto', density=True, alpha=0.6, color='b')\n    \n    # Plot the normal distribution curve\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    ax.set_title(\"Flattened List Histogram with Normal Distribution Fit\")\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    return ax"}
{"task_id": "BigCodeBench/623", "solution": "import matplotlib.pyplot as plt\nfrom itertools import chain\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists into a list of integers, apply the KMeans clustering, \n    and return a scatter plot 'matplotlib.axes.Axes' with data points color-coded by their cluster.\n    \n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    matplotlib.axes.Axes: An Axes object representing the scatter plot.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    flat_list = list(chain.from_iterable(L))\n    \n    # Convert the list into a numpy array for sklearn compatibility\n    data = np.array(flat_list).reshape(-1, 1)\n    \n    # Determine the optimal number of clusters using the Elbow Method or a fixed number (e.g., 3 for demonstration)\n    kmeans = KMeans(n_clusters=3)  # Here, we assume 3 clusters for simplicity. Consider using a method to find the optimal 'n_clusters'.\n    kmeans.fit(data)\n    \n    # Predict the clusters for the data points\n    labels = kmeans.predict(data)\n    \n    # Create a scatter plot with color-coded clusters\n    plt.figure(figsize=(8, 6))\n    scatter = plt.scatter(range(len(flat_list)), [0]*len(flat_list), c=labels, cmap='viridis')\n    \n    # Adding title and labels for clarity\n    plt.title('KMeans Clustering')\n    plt.xlabel('Data Point Index')\n    plt.ylabel('Value')\n    plt.grid(True)\n    \n    # Show the plot\n    plt.show()\n    \n    return plt.gca()  # Return the current Axes object"}
{"task_id": "BigCodeBench/624", "solution": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\nN_COMPONENTS = 2\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n    \"\"\"\n    # Convert the list of lists into a 2D numpy array\n    data = np.array(L)\n    \n    # Apply PCA\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    \n    # Create a scatter plot of the PCA result\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    ax.set_title('PCA Scatter Plot')\n    \n    # Return the PCA result and the scatter plot\n    return pca_result, ax"}
{"task_id": "BigCodeBench/625", "solution": "import math\nfrom random import randint\nimport pandas as pd\ndef task_func(cities_list):\n    \"\"\"\n    Generate a DataFrame with population data for a list of cities. The population is generated randomly \n    and rounded up to the next thousand.\n    \n    Parameters:\n    cities_list (list): A list of city names.\n    \n    Returns:\n    DataFrame: A pandas DataFrame with columns 'City' and 'Population'.\n    \"\"\"\n    # Generate random populations and round up to the nearest thousand\n    populations = [math.ceil(randint(1000, 10000000) / 1000) * 1000 for _ in cities_list]\n    \n    # Create a DataFrame\n    data = {'City': cities_list, 'Population': populations}\n    pop_data = pd.DataFrame(data)\n    \n    return pop_data\ncities = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']"}
{"task_id": "BigCodeBench/626", "solution": "from random import choice\nimport pytz\nfrom dateutil.parser import parse\nTIMEZONES = ['America/New_York', 'Europe/London', 'Asia/Shanghai', 'Asia/Tokyo', 'Australia/Sydney']\ndef task_func(date_str, from_tz):\n    \"\"\"\n    Converts a datetime string from a given timezone to a datetime string in a randomly chosen timezone.\n\n    Parameters:\n    - date_str (str): The datetime string in \"yyyy-mm-dd hh:mm:ss\" format.\n    - from_tz (str): The timezone of the given datetime string.\n\n    Returns:\n    - tuple: A tuple containing the converted datetime string and the randomly chosen timezone.\n    \"\"\"\n    # Parse the datetime string into a datetime object\n    dt = parse(date_str)\n    \n    # Get a random timezone from the list\n    to_tz = choice(TIMEZONES)\n    \n    # Convert the datetime object to the new timezone\n    from_zone = pytz.timezone(from_tz)\n    to_zone = pytz.timezone(to_tz)\n    dt = dt.replace(tzinfo=from_zone).astimezone(to_zone)\n    \n    # Format the datetime object back into a string\n    converted_date_str = dt.strftime('%Y-%m-%d %H:%M:%S')\n    \n    return converted_date_str, to_tz"}
{"task_id": "BigCodeBench/627", "solution": "from random import randint\nimport pandas as pd\ndef task_func(products_list):\n    \"\"\"\n    This function takes in a list of product names and generates random sales data for each product over a period of\n    12 months. It then calculates the average sales for each product and returns the results as a pandas DataFrame with\n    columns: 'Product', 'Month 1', 'Month 2', ..., 'Month 12', 'Average Sales'.\n    \n    Parameters:\n    products_list (list): A list of product names.\n    \n    Returns:\n    DataFrame: A pandas DataFrame with columns: 'Product', 'Month 1', 'Month 2', ..., 'Month 12', 'Average Sales'.\n    \"\"\"\n    # Initialize an empty list to hold the data for each product\n    data = []\n    \n    for product in products_list:\n        # Generate random sales data for 12 months\n        sales_data = [randint(1, 100) for _ in range(12)]\n        # Calculate the average sales\n        avg_sales = sum(sales_data) / 12\n        # Append the product name, monthly sales, and average sales to the data list\n        data.append([product] + sales_data + [avg_sales])\n    \n    # Convert the data list into a pandas DataFrame\n    columns = ['Product', *[f'Month {i+1}' for i in range(12)], 'Average Sales']\n    sales_df = pd.DataFrame(data, columns=columns)\n    \n    return sales_df\nproducts = ['Apples', 'Bananas', 'Grapes', 'Oranges', 'Pineapples']"}
{"task_id": "BigCodeBench/628", "solution": "import math\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func():\n    # Generate random parameters\n    freq = randint(1, 10)  # Random frequency between 1 and 10\n    ampl = randint(1, 10)  # Random amplitude between 1 and 10\n    phase = randint(-math.pi, math.pi)  # Random phase shift between -\u03c0 and \u03c0\n    x_values = [i / 100 for i in range(0, 200)]  # 200 points for x-axis in the range [0, 2]\n\n    # Calculate sine wave\n    y_values = [ampl * math.sin(freq * x + phase) for x in x_values]\n\n    # Create a new plot\n    fig, ax = plt.subplots()\n\n    # Plot the sine wave\n    ax.plot(x_values, y_values, label='Random Sine Wave')\n\n    # Set the title and labels\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n\n    # Add a legend\n    ax.legend()\n\n    # Show the plot\n    plt.show()\n\n    # Return the axis object\n    return ax"}
{"task_id": "BigCodeBench/629", "solution": "import os\nimport time\nimport pandas as pd\nOUTPUT_DIR = './output'\ndef task_func(dataset, filename, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Writes multiple Pandas DataFrames to a single CSV file, separating each DataFrame by a line of hyphens (\"------\").\n    \n    Parameters:\n    - dataset (list of pd.DataFrame): A list containing the DataFrames to be written to the file.\n    - filename (str): The name of the file (excluding the path) where the DataFrames will be written.\n    - output_dir (str, optional): The output directory.\n    \n    Returns:\n    None: The function writes the DataFrames to a CSV file but does not return any value.\n    \"\"\"\n    # Ensure the output directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    \n    filepath = os.path.join(output_dir, filename)\n    \n    with open(filepath, 'w') as f:\n        for i, df in enumerate(dataset, start=1):\n            df.to_csv(f, index=False)\n            # Add a separator between DataFrames except after the last one\n            if i < len(dataset):\n                f.write('\\n------\\n')"}
{"task_id": "BigCodeBench/630", "solution": "import pandas as pd\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Save a Pandas DataFrame to a JSON file in a specified directory.\n    \"\"\"\n    # Ensure the output directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    \n    # Construct the full file path\n    file_path = os.path.join(output_dir, filename)\n    \n    # Save the DataFrame to JSON\n    df.to_json(file_path, orient='records')\n    \n    # Return the full file path\n    return file_path"}
{"task_id": "BigCodeBench/631", "solution": "import pandas as pd\nimport csv\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Save a Pandas DataFrame to a CSV file in a specified directory.\n    \"\"\"\n    # Ensure the output directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    \n    # Construct the full path to the CSV file\n    filepath = os.path.join(output_dir, filename)\n    \n    # Save the DataFrame to the CSV file\n    df.to_csv(filepath, index=False)\n    \n    # Return the absolute path of the saved CSV file\n    return os.path.abspath(filepath)"}
{"task_id": "BigCodeBench/632", "solution": "import pandas as pd\nimport time\nOUTPUT_DIR = './output'\ndef task_func(df: pd.DataFrame, filename: str) -> str:\n    \"\"\"\n    Write a Pandas DataFrame into a JSON Lines file and save it in a specified directory.\n\n    Parameters:\n    - df (pd.DataFrame): A Pandas DataFrame to be saved.\n    - filename (str): The filename of the JSON Lines file to be saved.\n\n    Returns:\n    - str: The full path where the JSON Lines file was saved.\n    \"\"\"\n    # Construct the full path\n    filepath = f\"{OUTPUT_DIR}/{filename}\"\n    \n    # Ensure the output directory exists\n    if not os.path.exists(OUTPUT_DIR):\n        os.makedirs(OUTPUT_DIR)\n    \n    # Write the DataFrame to a JSON Lines file\n    df.to_json(filepath, orient='records', lines=True)\n    \n    # Confirm the file was created\n    assert os.path.isfile(filepath), f\"File {filepath} was not created.\"\n    \n    return filepath"}
{"task_id": "BigCodeBench/633", "solution": "import re\nfrom collections import Counter\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n    \"\"\"\n    Analyzes a given text string by removing duplicate words and stopwords defined by nltk.corpus,\n    and then returns a frequency distribution of the remaining words.\n    \"\"\"\n    # Convert text to lowercase and remove non-alphabetic characters\n    cleaned_text = re.sub(r'[^a-zA-Z\\s]', '', text.lower())\n    \n    # Split the text into words\n    words = cleaned_text.split()\n    \n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    filtered_words = [word for word in words if word not in stop_words]\n    \n    # Get the frequency distribution\n    frequency_dist = dict(Counter(filtered_words))\n    \n    return frequency_dist"}
{"task_id": "BigCodeBench/634", "solution": "import itertools\nfrom typing import Any\nfrom scipy import stats\ndef task_func(input_list: list, repetitions: int) -> Any:\n    \"\"\"\n    Calculate the mode of a list of elements with multiple repetitions of the original list.\n    \"\"\"\n    # Flatten the list with multiple repetitions\n    flattened_list = list(itertools.chain.from_iterable(itertools.repeat(input_list, repetitions)))\n    \n    # Calculate the mode of the flattened list\n    mode_result = stats.mode(flattened_list)\n    \n    return mode_result"}
{"task_id": "BigCodeBench/635", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\ndef task_func(text, n=2):\n    \"\"\"\n    Analyzes a text string, removes duplicate consecutive words and stopwords, generates a square co-occurrence matrix of words, and plots this matrix.\n    \"\"\"\n    # Remove duplicate consecutive words\n    text = re.sub(r'\\b(\\w+)(\\s+\\1\\b)+', r'\\1', text)\n    \n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    words = [word for word in text.split() if word.lower() not in stop_words]\n    \n    # Generate n-grams\n    vectorizer = CountVectorizer(ngram_range=(n,n), token_pattern=r'\\b\\w+\\b')\n    vectorizer.fit([words])\n    bag_of_words = vectorizer.transform([words])\n    \n    # Create co-occurrence matrix\n    co_matrix = bag_of_words.T * bag_of_words\n    co_matrix = pd.DataFrame(co_matrix.toarray(), columns=vectorizer.get_feature_names_out(), index=vectorizer.get_feature_names_out())\n    \n    # Plotting the co-occurrence matrix\n    fig, ax = plt.subplots()\n    cax = ax.matshow(co_matrix, cmap='viridis')\n    fig.colorbar(cax)\n    ax.set_xticklabels([''] + co_matrix.columns.tolist())\n    ax.set_yticklabels([''] + co_matrix.index.tolist())\n    \n    return co_matrix, ax"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n    \"\"\"\n    Create a Pandas DataFrame with random integer values between 0 and 9 for a given number of rows.\n    Count the non-zero values in each column and visualize this information using a bar plot.\n    \n    Parameters:\n    rows (int): The number of rows in the DataFrame.\n\n    Returns:\n    tuple: A tuple containing the DataFrame and the matplotlib Axes object.\n    \"\"\"\n    # Generate DataFrame\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, len(COLUMNS))), columns=COLUMNS)\n    \n    # Count non-zero values in each column\n    non_zero_counts = df.ne(0).sum()\n    \n    # Create a bar plot\n    fig, ax = plt.subplots()\n    non_zero_counts.plot(kind='bar', ax=ax)\n    \n    # Set title and labels\n    ax.set_title('Non-Zero Value Counts')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Count')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students: int) -> Tuple[pd.DataFrame, plt.Axes]:\n    # Define the number of courses\n    num_courses = 5\n    # Generate random grades for each student in each course\n    grades = {f'Course_{i+1}': sample(range(1, 101), num_students) for i in range(num_courses)}\n    # Create DataFrame\n    df = pd.DataFrame(grades)\n    \n    # Calculate average grades for each course\n    avg_grades = df.mean()\n    \n    # Calculate the number of students with passing grades (>= 60)\n    passing_grades = {col: (df[col] >= 60).sum() for col in df.columns}\n    \n    # Add average grades and passing counts to DataFrame\n    df_summary = pd.DataFrame([avg_grades, passing_grades], index=['Average Grade', 'Passing Count'])\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    df_summary.T.plot(kind='bar', ax=ax)  # Transpose for plotting\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.set_ylabel('Counts')\n    ax.legend(title='Metrics')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/638", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(num_teams=5, num_games=100):\n    \"\"\"\n    Create a Pandas DataFrame that displays the random scores of different teams in multiple games.\n    The function generates random scores for each game played by each team and populates them in\n    a DataFrame with index=teams, columns=games.\n\n    Parameters:\n    - num_teams (int, optional): The number of teams participating. Default is 5.\n    - num_games (int, optional): The number of games played. Default is 100.\n\n    Returns:\n    DataFrame: The generated DataFrame containing random scores for each team in each game.\n    \"\"\"\n    # Generate random scores\n    scores = np.random.randint(0, 100, (num_teams, num_games))\n    \n    # Create a DataFrame\n    df = pd.DataFrame(scores, index=[f'Team_{i+1}' for i in range(num_teams)], \n                      columns=[f'Game_{i+1}' for i in range(num_games)])\n    \n    return df"}
{"task_id": "BigCodeBench/639", "solution": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(num_samples=100, num_features=5):\n    \"\"\"\n    Generate a Pandas DataFrame with random values, representing a dataset with multiple features. \n    Calculate the correlation between the features and visualize this information using a heatmap.\n    \n    Parameters:\n    - num_samples (int): The number of samples to generate. Default is 100.\n    - num_features (int): The number of features to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: The generated DataFrame with random values.\n    - Axes: The heatmap visualization of the correlation matrix.\n    \"\"\"\n    # Generate random data\n    data = np.random.rand(num_samples, num_features)\n    columns = [f'Feature_{i+1}' for i in range(num_features)]\n    df = pd.DataFrame(data, columns=columns)\n    \n    # Calculate correlation matrix\n    corr_matrix = df.corr()\n    \n    # Visualize the correlation matrix using a heatmap\n    plt.figure(figsize=(10, 8))\n    ax = sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True, linewidths=.5)\n    \n    return df, ax"}
{"task_id": "BigCodeBench/640", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nPRODUCTS = ['Product' + str(i) for i in range(1, 6)]\nMONTHS = ['Month' + str(i) for i in range(1, 13)]\ndef task_func():\n    np.random.seed(0)  # For reproducible results\n    # Generate random sales data\n    sales_data = np.random.randint(100, 1000, size=(12, 5))\n    df = pd.DataFrame(sales_data, index=MONTHS, columns=PRODUCTS)\n\n    # Line plot for total sales per product\n    total_sales = df.sum(axis=0)\n    plt.figure(figsize=(10, 5))\n    total_sales.plot(kind='line')\n    plt.title('Total Sales per Product Over All Months')\n    plt.ylabel('Total Sales')\n    plt.xlabel('Products')\n    plt.xticks(rotation=45)\n    plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels\n\n    # Heatmap for sales figures\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(df, annot=True, fmt=\"d\", cmap='coolwarm', xticklabels=PRODUCTS, yticklabels=MONTHS)\n    plt.title('Monthly Sales Heatmap')\n    plt.ylabel('Months')\n    plt.xlabel('Products')\n\n    # Show plots\n    plt.show()\n\n    return df"}
{"task_id": "BigCodeBench/641", "solution": "import os\nimport re\nimport pandas as pd\ndef task_func(pattern: str, directory: str, output_csv: str) -> pd.DataFrame:\n    \"\"\"\n    The function to search for files matching a regex pattern in a directory.\n    \"\"\"\n    matched_files = []\n\n    # Walking through the directory\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                matched_files.append(os.path.join(root, file))\n\n    # Creating a DataFrame\n    df = pd.DataFrame(matched_files, columns=['File Path'])\n\n    # Saving the DataFrame to a CSV\n    df.to_csv(output_csv, index=False)\n\n    return df"}
{"task_id": "BigCodeBench/642", "solution": "import os\nimport re\nimport hashlib\nimport binascii\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n    \"\"\"\n    file_hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                file_path = os.path.join(root, file)\n                try:\n                    with open(file_path, \"rb\") as f:\n                        file_content = f.read()\n                        sha256_hash = hashlib.sha256(file_content).hexdigest()\n                        file_hashes[file_path] = sha256_hash\n                except Exception as e:\n                    print(f\"Error hashing {file_path}: {e}\")\n    return file_hashes"}
{"task_id": "BigCodeBench/643", "solution": "import re\nimport pandas as pd\nimport numpy as np\nDATA_PATTERN = r'>\\d+\\.\\d+<'\ndef task_func(dataframe, data_pattern=DATA_PATTERN):\n    \"\"\"\n    Extract numeric data from a Pandas DataFrame based on a specific pattern.\n    \"\"\"\n    # Apply the regex pattern to each cell in the DataFrame\n    def extract_numeric(cell):\n        match = re.search(data_pattern, str(cell))\n        return float(match.group()) if match else np.nan\n    \n    # Apply the function to each cell in the DataFrame\n    return dataframe.applymap(extract_numeric)"}
{"task_id": "BigCodeBench/644", "solution": "import hashlib\nimport base64\nimport os\ndef task_func(filename, data, password):\n    \"\"\"\n    Encrypt a string with a password, then write the encrypted string to a file. \n    If the file or directory does not exist, create it.\n\n    Parameters:\n    filename (str): The name of the file to write to.\n    data (str): The string to encrypt and write to the file.\n    password (str): The password to use for encryption.\n\n    Returns:\n    str: The encrypted string encoded in base64.\n\n    Example:\n    >>> task_func('test.txt', 'Hello, World!', 'password')\n    '...encrypted data...'\n    \"\"\"\n    # Create the directory if it doesn't exist\n    directory = os.path.dirname(filename)\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    # Generate a key from the password\n    key = hashlib.sha256(password.encode()).digest()\n\n    # Use the key to encrypt the data\n    cipher = AES.new(key, AES.MODE_EAX)\n    ciphertext, tag = cipher.encrypt_and_digest(data.encode())\n\n    # Save the ciphertext to the file\n    with open(filename, 'wb') as file:\n        [file.write(x) for x in (cipher.nonce, tag, ciphertext)]\n\n    # Encode the ciphertext in base64 for the return value\n    encrypted_data_base64 = base64.b64encode(ciphertext).decode()\n    return encrypted_data_base64"}
{"task_id": "BigCodeBench/645", "solution": "import os\nimport pandas as pd\ndef task_func(filename: str) -> pd.DataFrame:\n    \"\"\"\n    The function attempts to read a CSV file into a DataFrame and then deletes the file.\n    \"\"\"\n    if not os.path.exists(filename):\n        raise FileNotFoundError(f\"No such file: '{filename}'\")\n    \n    # Read the CSV file into a DataFrame\n    df = pd.read_csv(filename)\n    \n    # Delete the original file\n    os.remove(filename)\n    \n    return df"}
{"task_id": "BigCodeBench/646", "solution": "import os\nimport pandas as pd\nfrom dateutil.parser import parse\nimport matplotlib.pyplot as plt\nOUTPUT_DIR = './output'\ndef task_func(csv_path=os.path.join(OUTPUT_DIR, 'data.csv'), date_column='date'):\n    \"\"\"\n    Read a CSV file, convert a column of date strings into datetime objects,\n    and draw a histogram of the year distribution of these dates.\n    \"\"\"\n    if not os.path.exists(csv_path):\n        raise FileNotFoundError(f\"{csv_path} does not exist\")\n    \n    # Read CSV file\n    df = pd.read_csv(csv_path)\n    \n    # Convert date strings to datetime objects\n    df[date_column] = df[date_column].apply(parse)\n    \n    # Extract years from the datetime objects\n    years = df[date_column].dt.year\n    \n    # Draw a histogram of the year distribution\n    plt.figure(figsize=(10, 6))\n    plt.hist(years, bins=range(min(years), max(years) + 2, 1), edgecolor='black')\n    plt.title('Year Distribution')\n    plt.xlabel('Year')\n    plt.ylabel('Frequency')\n    plt.xticks(range(min(years), max(years) + 1))\n    plt.grid(axis='y', alpha=0.75)\n    \n    # Show the plot\n    plt.show()"}
{"task_id": "BigCodeBench/647", "solution": "import pytz\nfrom dateutil.parser import parse\nfrom datetime import datetime\ndef task_func(date_str, from_tz, to_tz):\n    \"\"\"\n    Convert a date string from one time zone to another and return the time difference in seconds to the current time\n    in the destination time zone.\n\n    Parameters:\n    date_str (str): The date string in \"yyyy-mm-dd hh:mm:ss\" format.\n    from_tz (str): The timezone of the given date string.\n    to_tz (str): The timezone to which the date string should be converted.\n\n    Returns:\n    int: The time difference in seconds.\n    \"\"\"\n    # Parse the date string into a datetime object\n    parsed_date = parse(date_str)\n    \n    # Convert the datetime object to the original timezone\n    from_tz_obj = pytz.timezone(from_tz)\n    localized_date = from_tz_obj.localize(parsed_date)\n    \n    # Convert the datetime object to the target timezone\n    to_tz_obj = pytz.timezone(to_tz)\n    converted_date = localized_date.astimezone(to_tz_obj)\n    \n    # Get the current time in the target timezone\n    now = datetime.now(to_tz_obj)\n    \n    # Calculate the time difference in seconds\n    time_diff_seconds = (now - converted_date).total_seconds()\n    \n    return int(time_diff_seconds)"}
{"task_id": "BigCodeBench/648", "solution": "from dateutil.parser import parse\nfrom datetime import timedelta, datetime\ndef task_func(date_str):\n    \"\"\"\n    Get the next business day (Mon-Fri) after a certain date string. Implemented by dateutil.parser and datetime.\n\n    Parameters:\n    date_str (str): The date string in \"yyyy-mm-dd\" format.\n\n    Returns:\n    datetime: The datetime object of the next business day.\n    \"\"\"\n    # Parse the date string into a datetime object\n    date = parse(date_str)\n    \n    # Loop until we find the next business day\n    while date.weekday() > 4:  # 5 and 6 represent Saturday and Sunday\n        date += timedelta(days=1)\n    \n    # Return the next business day\n    return date"}
{"task_id": "BigCodeBench/649", "solution": "import pandas as pd\nfrom dateutil.parser import parse\ndef task_func(dates_str_list):\n    \"\"\"\n    Analyze the weekday distribution in a list of date strings. Implemented by dateutil.parser.\n\n    This function takes a list of date strings in \"yyyy-mm-dd\" format, calculates \n    the weekday for each date, and returns a distribution of the weekdays.\n\n    Parameters:\n    - dates_str_list (list): The list of date strings in \"yyyy-mm-dd\" format.\n\n    Returns:\n    - Series: A pandas Series of the weekday distribution, where the index represents \n              the weekdays (from Monday to Sunday) and the values represent the counts \n              of each weekday in the provided list.\n    \"\"\"\n    # Convert date strings to datetime objects\n    dates = [parse(date_str) for date_str in dates_str_list]\n    \n    # Map weekdays to integers (Monday=0, Tuesday=1, ..., Sunday=6)\n    weekdays = [date.weekday() for date in dates]\n    \n    # Create a DataFrame to count occurrences of each weekday\n    weekday_counts = pd.DataFrame(weekdays, columns=['Weekday'])\n    \n    # Count the occurrences of each unique weekday\n    weekday_distribution = weekday_counts['Weekday'].value_counts(sort=False)\n    \n    # Map integer weekdays back to their names\n    weekday_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    weekday_distribution.index = weekday_names\n    \n    # Fill in zeros for weekdays with no occurrences\n    weekday_distribution = weekday_distribution.reindex(weekday_names, fill_value=0)\n    \n    return weekday_distribution\ndates = ['2022-10-22', '2022-10-23', '2022-10-24', '2022-10-25']"}
{"task_id": "BigCodeBench/650", "solution": "from datetime import datetime\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, tz_str):\n    \"\"\"\n    Determine the time in seconds until the next turn of the year in a certain time zone from a given date string.\n\n    Parameters:\n    - date_str (str): The date string in \"yyyy-mm-dd hh:mm:ss\" format.\n    - tz_str (str): The IANA timezone string (e.g., 'America/Chicago').\n\n    Returns:\n    - int: The time in seconds until the next New Year in the specified timezone.\n\n    Example:\n    >>> task_func('2022-10-22 11:59:59', 'America/Chicago')\n    78345\n    \"\"\"\n    # Parse the date string into a datetime object\n    parsed_date = parse(date_str)\n    \n    # Get the timezone object\n    tz = pytz.timezone(tz_str)\n    \n    # Convert the parsed date to the specified timezone\n    local_date = parsed_date.replace(tzinfo=pytz.utc).astimezone(tz)\n    \n    # Calculate the end of the year in the specified timezone\n    end_of_year = datetime(local_date.year, 12, 31, 23, 59, 59, tzinfo=tz)\n    \n    # If the given date is already past the end of the year, calculate for the next year\n    if local_date > end_of_year:\n        end_of_year = datetime(local_date.year + 1, 12, 31, 23, 59, 59, tzinfo=tz)\n    \n    # Calculate the timedelta until the end of the year and convert it to seconds\n    time_until_new_year = (end_of_year - local_date).total_seconds()\n    \n    return int(time_until_new_year)"}
{"task_id": "BigCodeBench/651", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df_dict, target_value):\n    '''\n    Convert the input dict of lists to DataFrame and search in this DataFrame for rows with cells equal to the\n    provided target_value. It then plots the count of such rows per column.\n    '''\n    # Convert dict to DataFrame\n    df = pd.DataFrame(df_dict)\n    \n    # Check if DataFrame is empty\n    if df.empty:\n        print(\"DataFrame is empty.\")\n        return pd.Series(), None\n    \n    # Find rows with target_value and count per column\n    count_series = df.apply(lambda col: (col == target_value).sum())\n    \n    # Plot the counts per column\n    fig, ax = plt.subplots()\n    count_series.plot(kind='bar', ax=ax)\n    ax.set_title(f'Count of \"{target_value}\" per Column')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Count')\n    \n    # Show plot (optional, can be commented out if not needed in automated scripts)\n    plt.show()\n    \n    return count_series, ax\ndf_dict = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': ['30', '25', '35'], 'ID': ['123', '456', '789']}"}
{"task_id": "BigCodeBench/652", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\nTARGET_VALUE = '332'\nARRAY = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['33', '22', '332']])\ndef task_func(target_value=TARGET_VALUE, array=ARRAY):\n    # Find indices where the first cell matches the target value\n    indices = np.where(array[:, 0] == target_value)[0]\n    \n    # If no such indices exist\n    if indices.size == 0:\n        return 'N/A', 'N/A', 'N/A', 'N/A'\n    \n    # Perform statistical analysis on these indices\n    mean_val = indices.mean()\n    var_val = indices.var() if indices.size > 1 else 'N/A'  # Variance not defined for single value\n    skew_val = stats.skew(indices) if indices.size > 2 else 'N/A'  # Skewness not defined for <=2 values\n    kurt_val = stats.kurtosis(indices) if indices.size > 3 else 'N/A'  # Kurtosis not defined for <=3 values\n    \n    # Plot the distribution of indices\n    plt.hist(indices, bins='auto')  # automatic number of bins\n    plt.title('Distribution of Indices Matching Target Value')\n    plt.xlabel('Index')\n    plt.ylabel('Frequency')\n    plt.show()\n    \n    return mean_val, var_val, skew_val, kurt_val"}
{"task_id": "BigCodeBench/653", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(dataframe, target_value='332'):\n    \"\"\"\n    Searches a given DataFrame for occurrences of a specified target value and visualizes these occurrences using a heatmap.\n\n    Parameters:\n    - dataframe (pd.DataFrame): The input DataFrame to search.\n    - target_value (str, optional): The value to search for in the DataFrame. Defaults to '332'.\n\n    Returns:\n    - tuple: A tuple containing:\n        - pd.DataFrame: A DataFrame with Boolean values indicating the presence of the target value in the input DataFrame.\n        - matplotlib.axes._axes.Axes: The Axes object of the heatmap.\n    \"\"\"\n    # Create a mask for the target value\n    mask = dataframe.applymap(lambda x: x == target_value)\n    \n    # Create a heatmap using seaborn\n    plt.figure(figsize=(10, 8))\n    ax = sns.heatmap(mask, cmap='viridis', annot=dataframe, fmt='', cbar=False)\n    \n    return mask, ax"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef exponential_decay(x, a, b, c):\n    \"\"\"\n    Exponential decay function to be fitted.\n\n    Parameters:\n    - x (float): Independent variable.\n    - a (float): Initial value.\n    - b (float): Decay rate.\n    - c (float): Offset.\n\n    Returns:\n    - float: Value of the exponential decay function at x.\n    \"\"\"\n    return a * np.exp(-b * x) + c\ndef task_func(array, target_value):\n    \"\"\"\n    Fit an exponential decay function to the indices in the array where the first column matches the target value.\n    \"\"\"\n    # Filter data where the first column matches the target value\n    filtered_data = array[array[:, 0] == target_value][:, 1]\n    \n    # If there's not enough data to fit, return a message\n    if len(filtered_data) < 2:\n        print(\"Not enough data to fit for the target value.\")\n        return None, None\n    \n    # Initial guess for the parameters\n    p0 = [max(filtered_data), 1, min(filtered_data)]\n    \n    # x values are just the indices for the filtered data\n    x = np.arange(len(filtered_data))\n    \n    # Perform the curve fitting\n    popt, _ = optimize.curve_fit(exponential_decay, x, filtered_data, p0=p0)\n    \n    # Plotting the data and the fitted curve\n    fig, ax = plt.subplots()\n    ax.plot(x, filtered_data, 'bo', label='data')\n    ax.plot(x, exponential_decay(x, *popt), 'r-', label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))\n    ax.legend()\n    plt.show()\n    \n    return popt, ax"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.corpus import stopwords\nALPHANUMERIC_PATTERN = re.compile('[\\W_]+')\nSTOPWORDS = stopwords.words('english')\ndef task_func(texts, num_topics):\n    \"\"\"\n    Preprocesses texts, vectorizes them, and extracts topics using NMF.\n    \"\"\"\n    # Text preprocessing\n    processed_texts = [' '.join(word.lower() for word in ALPHANUMERIC_PATTERN.split(text) if word.lower() not in STOPWORDS) for text in texts]\n\n    # Vectorize the texts using TF-IDF\n    vectorizer = TfidfVectorizer(stop_words='english')  # Redundant with our preprocessing but kept for clarity\n    tfidf = vectorizer.fit_transform(processed_texts)\n\n    # Apply NMF for topic extraction\n    nmf = NMF(n_components=num_topics, random_state=42)\n    nmf.fit(tfidf)\n\n    # Get feature names and form topics\n    feature_names = vectorizer.get_feature_names_out()\n    topics = [[feature_names[i] for i in topic.argsort()[:-n - 1:-1]] for topic in nmf.components_]\n\n    return topics"}
{"task_id": "BigCodeBench/656", "solution": "import re\nimport string\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nALPHANUMERIC = re.compile('[\\W_]+')\nPUNCTUATIONS = string.punctuation\ndef clean_text(text):\n    \"\"\"Helper function to clean the text\"\"\"\n    text = ALPHANUMERIC.sub(' ', text)  # Remove non-alphanumeric characters except spaces\n    text = text.lower()  # Convert to lowercase\n    text = text.translate(str.maketrans('', '', PUNCTUATIONS))  # Remove punctuation\n    return text\ndef task_func(text: str, sia: SentimentIntensityAnalyzer) -> dict:\n    \"\"\"\n    Analyze the sentiment of a text using the provided SentimentIntensityAnalyzer.\n    \"\"\"\n    cleaned_text = clean_text(text)\n    sentiment_scores = sia.polarity_scores(cleaned_text)\n    return sentiment_scores"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\nfrom nltk.corpus import stopwords\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Generate word vectors from a list of texts using the gensim Word2Vec model and nltk.corpus.stopwords.\n    The texts are first cleaned by removing all non-alphanumeric characters except space,\n    lowercased, and stop words are removed.\n\n    Parameters:\n    texts (list): A list of strings.\n    stopwords (list, optional): A list of stopwords to be removed. If not provided, nltk's English stopwords will be used.\n\n    Returns:\n    Word2Vec: A trained Word2Vec model.\n    \"\"\"\n    if stopwords is None:\n        stopwords = set(nltk.corpus.stopwords.words('english'))\n\n    # Clean and tokenize texts\n    tokenized_texts = []\n    for text in texts:\n        cleaned_text = ALPHANUMERIC.sub(' ', text).lower()  # Remove non-alphanumeric and lowercase\n        tokens = nltk.word_tokenize(cleaned_text)\n        tokenized_texts.append([token for token in tokens if token not in stopwords])\n\n    # Train Word2Vec model\n    model = Word2Vec(tokenized_texts, min_count=1)  # min_count=1 to include every word\n\n    return model"}
{"task_id": "BigCodeBench/658", "solution": "import re\nimport nltk\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\nALPHANUMERIC_PATTERN = re.compile('[\\W_]+')\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(texts):\n    \"\"\"\n    Function to create a document-term matrix from a list of texts.\n    \"\"\"\n    # Text preprocessing function\n    def preprocess(text):\n        # Remove non-alphanumeric characters and convert to lowercase\n        text = ALPHANUMERIC_PATTERN.sub(' ', text).lower()\n        # Split into words, remove stopwords, and rejoin into a string\n        words = [word for word in text.split() if word not in STOPWORDS]\n        return ' '.join(words)\n    \n    # Preprocess all texts\n    preprocessed_texts = [preprocess(text) for text in texts]\n    \n    # Create a CountVectorizer object\n    vectorizer = CountVectorizer()\n    \n    # Fit and transform the preprocessed texts into a document-term matrix\n    dtm = vectorizer.fit_transform(preprocessed_texts)\n    \n    # Convert the sparse matrix to a pandas DataFrame\n    feature_names = vectorizer.get_feature_names_out()\n    dtm_df = pd.DataFrame(dtm.toarray(), columns=feature_names)\n    \n    return dtm_df"}
{"task_id": "BigCodeBench/659", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\ndef task_func(x, y, labels):\n    \"\"\"\n    Draw normal distributions for multiple 'x' and 'y' arrays with labels.\n    Each pair (x, y) represents a different chemical compound in the 'labels' list.\n\n    Parameters:\n    x (list): List of numpy arrays representing the x-values of the data points.\n    y (list): List of numpy arrays representing the y-values of the data points.\n    labels (list): List of strings representing the labels for the chemical compounds.\n\n    Returns:\n    fig: Matplotlib figure object.\n    \"\"\"\n    # Ensure x and y have the same length to avoid errors\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"The lengths of x, y, and labels lists must match.\")\n    \n    # Set up the figure and axis\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5) if len(x) > 1 else (5, 5))\n    \n    for i in range(len(x)):\n        # Ensure x and y are 1D arrays for compatibility with scipy.stats.norm\n        x_i = np.array(x[i]).flatten()\n        y_i = np.array(y[i]).flatten()\n        \n        # Fit a normal distribution to the data\n        mu, std = stats.norm.fit(y_i)\n        \n        # Plot the data and the fitted normal distribution\n        axs[i].hist(y_i, bins='auto', density=True, alpha=0.6, color='b')\n        xmin, xmax = axs[i].get_xlim()\n        x_fit = np.linspace(xmin, xmax, 100)\n        p = stats.norm.pdf(x_fit, mu, std)\n        axs[i].plot(x_fit, p, 'k', linewidth=2)\n        axs[i].set_title(f'Distribution of {labels[i]}')\n        axs[i].set_xlabel('Value')\n        axs[i].set_ylabel('Frequency')\n    \n    # Show the plot\n    plt.tight_layout()\n    return fig"}
{"task_id": "BigCodeBench/660", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(x, y, labels):\n    \"\"\"\n    The function to scale and plot data.\n    \"\"\"\n    fig, ax = plt.subplots()\n\n    # Standardize the data\n    scaler = StandardScaler()\n    scaled_x = [scaler.fit_transform(xi.reshape(-1, 1)) for xi in x]\n    scaled_y = [scaler.fit_transform(yi.reshape(-1, 1)) for yi in y]\n\n    # Plot the scaled data\n    for i in range(len(x)):\n        ax.plot(scaled_x[i].flatten(), scaled_y[i].flatten(), label=labels[i])\n\n    ax.set_xlabel('Scaled X')\n    ax.set_ylabel('Scaled Y')\n    ax.legend()\n\n    return fig"}
{"task_id": "BigCodeBench/661", "solution": "import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(x, y, labels):\n    \"\"\"\n    Create a heatmap using the seaborn library for \"x\" as x-values and \"y\" as y-values with labels.\n    \n    Parameters:\n    x (list): List of numpy arrays representing the x-values of the data points.\n    y (list): List of numpy arrays representing the y-values of the data points.\n    labels (list): List of strings representing the labels for the chemical compounds.\n    \n    Returns:\n    ax (Axes): A seaborn heatmap object.\n    df (DataFrame): The dataframe used to create the heatmap.\n    \"\"\"\n    # Ensure x and y have the same length\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"The length of x, y, and labels lists must be the same.\")\n    \n    # Create a DataFrame\n    index = labels\n    columns = labels\n    data = np.zeros((len(labels), len(labels)), dtype=float)\n    \n    # Fill the DataFrame\n    for i in range(len(x)):\n        for j in range(len(y)):\n            data[i, j] = np.corrcoef(x[i], y[j])[0, 1]  # Example: using correlation as heatmap value\n    \n    df = pd.DataFrame(data, index=index, columns=columns)\n    \n    # Create a heatmap\n    fig, ax = plt.subplots()\n    sns.heatmap(df, annot=True, fmt=\".1f\", ax=ax)\n    \n    return ax, df\nx = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\ny = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\nlabels = ['H\u2082O', 'O\u2082', 'CO\u2082']"}
{"task_id": "BigCodeBench/662", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(x, y, labels):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on \"x\" and \"y\" values and plot the first two principal components.\n    \n    Parameters:\n    x (list of np.ndarray): List of numpy arrays representing x-values.\n    y (list of np.ndarray): List of numpy arrays representing y-values.\n    labels (list of str): Labels for each dataset.\n\n    Returns:\n    matplotlib.figure.Figure: The generated plot figure.\n    \"\"\"\n    # Concatenate x and y into a single array for PCA\n    data = np.column_stack((np.concatenate(x), np.concatenate(y)))\n    \n    # Perform PCA\n    pca = PCA(n_components=2)\n    principal_components = pca.fit_transform(data)\n    \n    # Split the principal components back into x and y for plotting\n    pca_x = principal_components[:, 0]\n    pca_y = principal_components[:, 1]\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        ax.scatter(pca_x[i*len(x[i]):(i+1)*len(x[i])], pca_y[i*len(x[i]):(i+1)*len(x[i])], label=labels[i])\n    ax.set_xlabel('First Principal Component')\n    ax.set_ylabel('Second Principal Component')\n    ax.legend()\n    plt.title('PCA of Chemical Compound Data')\n    \n    return fig\nx = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\ny = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\nlabels = ['H\u2082O', 'O\u2082', 'CO\u2082']"}
{"task_id": "BigCodeBench/663", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\ndef exponential_func(x, a, b, c):\n    \"\"\"\n    Exponential function for curve fitting.\n    \"\"\"\n    return a * np.exp(-b * x) + c\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    \"\"\"\n    fig, ax = plt.subplots()\n\n    for i in range(len(x)):\n        # Curve fitting\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        a, b, c = popt\n        \n        # Generate fitted curve\n        x_fit = np.linspace(min(x[i]), max(x[i]), 100)\n        y_fit = exponential_func(x_fit, a, b, c)\n        \n        # Plotting\n        ax.plot(x_fit, y_fit, label=f'Fitted {labels[i]}')\n        ax.scatter(x[i], y[i], label=f'{labels[i]} Data', alpha=0.6)\n    \n    ax.legend()\n    ax.set_xlabel('X-axis')\n    ax.set_ylabel('Y-axis')\n    ax.set_title('Exponential Curve Fit')\n    \n    return fig"}
{"task_id": "BigCodeBench/664", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport statistics\ndef task_func(sales_data):\n    \"\"\"\n    Plot sales trends for five products over a year, highlighting variability with standard deviation shading.\n    \"\"\"\n    # Ensure the DataFrame has the expected structure\n    expected_columns = ['Month'] + [f'Product {chr(65+i)}' for i in range(5)]\n    assert set(expected_columns) == set(sales_data.columns), \"Dataframe columns do not match the expected format.\"\n\n    # Prepare the plot\n    fig, ax = plt.subplots(figsize=(14, 7))\n\n    # Plot each product's sales\n    for product in expected_columns[1:]:\n        # Extract sales data\n        sales = sales_data[product]\n        # Calculate mean and standard deviation\n        mean_sales = statistics.mean(sales)\n        std_dev = statistics.stdev(sales)\n        # Plot the line for sales\n        ax.plot(sales_data['Month'], sales, label=product)\n        # Shade the area representing one standard deviation\n        ax.fill_between(sales_data['Month'], mean_sales - std_dev, mean_sales + std_dev, alpha=0.3)\n\n    # Set plot details\n    ax.set_title('Sales Trends Over a Year with Standard Deviation Shading')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Sales')\n    ax.legend()\n    ax.grid(True)\n\n    return ax"}
{"task_id": "BigCodeBench/665", "solution": "import shutil\nimport os\nimport fnmatch\ndef task_func(src_dir, dst_dir):\n    \"\"\"\n    Copy all files from 'src_dir' to 'dst_dir' that match any pattern in ['*.txt', '*.docx'].\n\n    Parameters:\n    - src_dir (str): The source directory.\n    - dst_dir (str): The destination directory.\n\n    Returns:\n    - str: The destination directory.\n    \"\"\"\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n\n    patterns = ['*.txt', '*.docx']\n    matched_files = []\n\n    for root, dirs, files in os.walk(src_dir):\n        for pattern in patterns:\n            for filename in fnmatch.filter(files, pattern):\n                matched_files.append(os.path.join(root, filename))\n\n    for file_path in matched_files:\n        shutil.copy(file_path, dst_dir)\n\n    return dst_dir"}
{"task_id": "BigCodeBench/666", "solution": "from itertools import combinations\nimport math\ndef task_func(seq, letter_weight_dict):\n    \"\"\"\n    The function to find the subsequence with the maximum total weight.\n    \"\"\"\n    max_weight = -math.inf\n    max_subseq = \"\"\n    \n    # Generate all possible subsequences\n    for r in range(1, len(seq) + 1):\n        for subseq in combinations(seq, r):\n            # Calculate the weight of the current subsequence\n            subseq_weight = sum(letter_weight_dict[letter] for letter in subseq)\n            # Update max_weight and max_subseq if current weight is higher\n            if subseq_weight > max_weight:\n                max_weight = subseq_weight\n                max_subseq = ''.join(sorted(subseq))  # sorted to maintain consistent order in case of ties\n                \n    return max_subseq"}
{"task_id": "BigCodeBench/667", "solution": "import heapq\nimport collections\ndef task_func(x, n):\n    \"\"\"\n    Find the n most common letters in a dictionary, x, where the key letters and the values are their frequencies.\n\n    Parameters:\n    - x (dict): The dictionary of letter frequencies.\n    - n (int): The number of most frequent letters to return.\n\n    Returns:\n    - list: The n most frequent letters.\n\n    Example:\n    >>> task_func({'a': 1, 'b': 2, 'c': 3}, 2)\n    ['c', 'b']\n    \"\"\"\n    # Using Counter to simplify frequency counting\n    counter = collections.Counter(x)\n    \n    # Using heapq.nlargest to find n most common elements\n    most_common_n = heapq.nlargest(n, counter.keys(), key=counter.get)\n    \n    return most_common_n"}
{"task_id": "BigCodeBench/668", "solution": "import itertools\ndef task_func(x):\n    \"\"\"\n    Find the sub-sequence of a dictionary, x, with the minimum total length, where the keys are letters and the values are their lengths.\n\n    Parameters:\n    - x (dict): The dictionary of letter lengths.\n\n    Returns:\n    - list: The subsequence with the minimum total length.\n\n    Example:\n    >>> task_func({'a': 1, 'b': 2, 'c': 3})\n    ['a']\n    >>> task_func({'a': 1, 'b': -2, 'c': -5, 'd': 4})\n    ['b', 'c']\n    \"\"\"\n    # Create a list of items from the dictionary where each item is a tuple (key, value)\n    items = [(k, v) for k, v in x.items() if v >= 0]  # Exclude keys with negative lengths\n    \n    if not items:  # If all lengths are negative, return an empty list as there's no valid subsequence\n        return []\n    \n    # Generate all possible subsequences using itertools.combinations\n    subsequences = (itertools.combinations(items, r) for r in range(len(items) + 1))\n    \n    # Find the subsequence with the minimum sum of values (lengths)\n    min_length_subseq = min((sum(v for k, v in seq), seq) for seq in subsequences if sum(v for k, v in seq) > 0)[1]\n    \n    # Return only the keys from the found subsequence as a list\n    return [k for k, v in min_length_subseq]"}
{"task_id": "BigCodeBench/669", "solution": "import itertools\nimport math\ndef calculate_cosine(value):\n    \"\"\"Calculate the cosine of a value.\"\"\"\n    return math.cos(value)\ndef task_func(x):\n    \"\"\"\n    Find the key pair in a dictionary, x, which has the highest sum of the cosine of each of its values.\n    \"\"\"\n    # Calculate the cosine for each value in the dictionary\n    cosine_values = {key: calculate_cosine(value) for key, value in x.items()}\n    \n    # Find the pair of keys with the highest sum of cosine values\n    max_sum = -math.inf\n    max_pair = ()\n    for pair in itertools.combinations(cosine_values, 2):\n        current_sum = sum(cosine_values[key] for key in pair)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_pair = pair\n    \n    return max_pair"}
{"task_id": "BigCodeBench/670", "solution": "from itertools import combinations\nimport math\ndef task_func(x, w):\n    \"\"\"\n    Find the continuous substring of x, which has the maximum total weight, given a dictionary where the keys are characters and the values are their weights.\n\n    Parameters:\n    - x (str): The input string.\n    - w (dict): The dictionary of character weights.\n\n    Returns:\n    - max_substr (str): The continuous substring with the highest weight.\n\n    Example:\n    >>> task_func('c', {'a': 1, 'b': 2, 'c': 3})\n    'c'\n    >>> task_func('abc', {'a': 10, 'b': -5, 'c': 3})\n    'a'\n    \"\"\"\n    # Initialize maximum weight and substring\n    max_weight = -math.inf\n    max_substr = \"\"\n\n    # Iterate over all possible substrings\n    for i in range(len(x)):\n        for j in range(i, len(x)):\n            # Calculate the weight of the current substring\n            current_weight = sum(w[char] for char in x[i:j+1])\n            # Update maximum weight and substring if current weight is higher\n            if current_weight > max_weight:\n                max_weight = current_weight\n                max_substr = x[i:j+1]\n\n    return max_substr"}
{"task_id": "BigCodeBench/671", "solution": "import os\nimport random\nimport json\ndef task_func(directory, n):\n    \"\"\"\n    Create n random files in a directory with json content with the key 'number' and a random integer value between 1 and 100, and then reset the cursor to the beginning of each file.\n\n    Parameters:\n    - directory (str): The directory in which to generate the files.\n    - n (int): The number of files to generate.\n\n    Returns:\n    - directory (str): The directory in which the files were generated.\n    \"\"\"\n    # Ensure the directory exists\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    for i in range(n):\n        # Generate a random integer between 1 and 100\n        rand_num = random.randint(1, 100)\n        \n        # Define the file path\n        file_path = os.path.join(directory, f'file_{i+1}.json')\n        \n        # Create the JSON content\n        file_content = {'number': rand_num}\n        \n        # Write the content to the file\n        with open(file_path, 'w') as file:\n            json.dump(file_content, file)\n        \n        # Reset the cursor to the beginning of the file (though this is generally not needed after write)\n        file.seek(0)\n    \n    return directory"}
{"task_id": "BigCodeBench/672", "solution": "import csv\nimport sys\ndef task_func(filename):\n    \"\"\"\n    Read a CSV file, inverse the order of the lines and write the inverted lines back into the file. Then reset the cursor to the beginning of the file.\n\n    Parameters:\n    - filename (str): The name of the CSV file.\n\n    Returns:\n    - filename (str): The name of the CSV file.\n    \"\"\"\n    try:\n        # Read the CSV file and store lines\n        with open(filename, 'r') as file:\n            lines = list(csv.reader(file))\n        \n        # Invert the order of lines\n        lines.reverse()\n        \n        # Write the inverted lines back into the file\n        with open(filename, 'w', newline='') as file:\n            writer = csv.writer(file)\n            writer.writerows(lines)\n        \n        # Reset the cursor to the beginning of the file (not strictly necessary, as opening for read will do this)\n        with open(filename, 'r') as file:\n            file.seek(0)\n        \n        return filename\n    \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        sys.exit(1)"}
{"task_id": "BigCodeBench/673", "solution": "import os\nimport random\ndef task_func(directory, n_files):\n    \"\"\"\n    Create n random txt files in a specific directory, write a single digit random integer into each file, and reset the cursor to the beginning of each file.\n    \"\"\"\n    # Ensure the directory exists\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    \n    for i in range(1, n_files + 1):\n        # Generate a random integer between 0 and 9\n        random_int = random.randint(0, 9)\n        \n        # Define the file path\n        file_path = os.path.join(directory, f'file_{i}.txt')\n        \n        # Write the random integer into the file\n        with open(file_path, 'w') as file:\n            file.write(str(random_int))\n            \n        # Reset the cursor to the beginning of the file (though this is generally not necessary when closing the file)\n        file.seek(0)\n    \n    return n_files"}
{"task_id": "BigCodeBench/674", "solution": "import pandas as pd\nimport os\ndef task_func(filename):\n    \"\"\"\n    Read a CSV file, reverse the order of the data lines, and write them back while keeping the header at the top.\n    \n    Parameters:\n    - filename (str): The name of the CSV file.\n\n    Returns:\n    - filename (str): The name of the CSV file, after processing.\n    \"\"\"\n    # Check if the file exists\n    if not os.path.isfile(filename):\n        print(f\"File {filename} does not exist.\")\n        return filename\n\n    # Read the CSV file\n    try:\n        df = pd.read_csv(filename)\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return filename\n\n    # Reverse the data lines (excluding the header)\n    df_reversed = pd.concat([df.iloc[0:1], df.iloc[1:][::-1]])\n\n    # Write the DataFrame back to the file\n    try:\n        df_reversed.to_csv(filename, index=False)\n    except Exception as e:\n        print(f\"Error writing to file: {e}\")\n    else:\n        # Moving the cursor back to the beginning is not necessary when writing to a file.\n        # The file is closed automatically after writing, and reopening it would be needed to move the cursor.\n        # However, for the sake of the exercise's requirements, we'll assume a symbolic 'reset' by acknowledging the operation.\n        print(\"File processed and written back successfully.\")\n\n    return filename"}
{"task_id": "BigCodeBench/675", "solution": "import os\nimport random\nimport string\ndef task_func(directory, n_files):\n    \"\"\"\n    Create n random text files in a specific directory, write a random string to each file, and then reset the cursor to the beginning of each file.\n\n    Parameters:\n    - directory (str): The directory in which to generate the files.\n    - n_files (int): The number of files to generate.\n\n    Returns:\n    - directory (str): The directory in which the files were generated.\n    \"\"\"\n    # Ensure the directory exists\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    for _ in range(n_files):\n        # Generate a random string\n        random_string = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(100))\n        \n        # Create a file with a random name in the directory\n        file_path = os.path.join(directory, f'file_{random.randint(1, 10000)}.txt')\n        \n        # Write the random string to the file\n        with open(file_path, 'w') as file:\n            file.write(random_string)\n            \n        # Reset the cursor to the beginning of the file (not strictly necessary after 'w' mode, but good practice)\n        file.seek(0)\n    \n    return directory"}
{"task_id": "BigCodeBench/676", "solution": "import pandas as pd\nimport random\ndef task_func(df):\n    \"\"\"\n    The function provided as per the description.\n    \"\"\"\n    df['winner'] = np.where(df['score1'] > df['score2'], df['team1'], \n                            np.where(df['score1'] < df['score2'], df['team2'],\n                                     random.choice([df['team1'], df['team2']])))\n\n    return df"}
{"task_id": "BigCodeBench/677", "solution": "import numpy as np\nimport pandas as pd\nfrom scipy.stats import linregress\ndef task_func(df):\n    \"\"\"\n    Analyze the relationship between two variables in a DataFrame.\n    The function performs a linear regression on the two variables and adds a 'predicted' column to the DataFrame.\n\n    Parameters:\n    - df (pandas.DataFrame): The input DataFrame with columns 'var1', 'var2'.\n    \n    Returns:\n    - df (pandas.DataFrame): The DataFrame with the added 'predicted' column.\n    \"\"\"\n    # Ensure the DataFrame has the required columns\n    assert set(df.columns) == {'var1', 'var2'}, \"DataFrame must have 'var1' and 'var2' columns.\"\n\n    # Perform linear regression\n    slope, intercept, _, _, _ = linregress(df['var1'], df['var2'])\n\n    # Generate predicted values\n    df['predicted'] = slope * df['var1'] + intercept\n\n    return df"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\ndef task_func(path):\n    if not os.path.exists(path):\n        os.makedirs(path)\n    \n    # Initialize an empty DataFrame to hold the combined data\n    df_combined = pd.DataFrame()\n\n    # Ensure the 'processed' subdirectory exists\n    processed_path = os.path.join(path, 'processed')\n    if not os.path.exists(processed_path):\n        os.makedirs(processed_path)\n\n    # List all JSON files in the directory, sorted alphabetically\n    json_files = sorted([f for f in os.listdir(path) if f.endswith('.json')])\n    \n    for file in json_files:\n        file_path = os.path.join(path, file)\n        \n        # Read the JSON file into a DataFrame\n        with open(file_path, 'r') as f:\n            data = json.load(f)\n        df = pd.DataFrame(data)\n        \n        # Add a 'Source' column\n        df['Source'] = file\n        \n        # Append the DataFrame to the combined DataFrame\n        df_combined = pd.concat([df_combined, df], ignore_index=True)\n        \n        # Move the processed file to the 'processed' subdirectory\n        shutil.move(file_path, os.path.join(processed_path, file))\n    \n    return df_combined"}
{"task_id": "BigCodeBench/679", "solution": "import pandas as pd\nfrom collections import Counter\ndef task_func(df):\n    \"\"\"\n    Calculate the frequency of combinations of elements in a DataFrame.\n    \"\"\"\n    # Create a 'combination' column by joining all item columns into a tuple\n    df['combination'] = df.apply(lambda row: tuple(row), axis=1)\n    \n    # Calculate the frequency of each combination using Counter\n    combination_counts = Counter(df['combination'])\n    \n    return dict(combination_counts)"}
{"task_id": "BigCodeBench/680", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, features):\n    \"\"\"\n    Standardize the specified features in a DataFrame using StandardScaler from scikit-learn.\n    \n    Parameters:\n    - df (pandas.DataFrame): The input DataFrame.\n    - features (list): The list of features to standardize. If empty, no action is taken.\n    \n    Returns:\n    - pandas.DataFrame: The DataFrame with the specified features standardized.\n    \"\"\"\n    if features:  # If the list of features is not empty\n        scaler = StandardScaler()\n        scaled_features = scaler.fit_transform(df[features])\n        df[features] = scaled_features\n    return df"}
{"task_id": "BigCodeBench/681", "solution": "import pandas as pd\nimport json\ndef task_func(file_path, key):\n    \"\"\"\n    Load a JSON file into a Pandas DataFrame, remove a specific key from each object and write the processed DataFrame back into a JSON file oriented by records.\n    \n    Parameters:\n    - file_path (str): The path to the JSON file.\n    - key (str): The key to remove from each object.\n    \n    Returns:\n    - df (DataFrame): A pandas DataFrame representation of the processed JSON data.\n    \"\"\"\n    # Load JSON file\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n    \n    # Convert list of dictionaries into DataFrame\n    df = pd.DataFrame(data)\n    \n    # Remove specified key from each row (dictionary)\n    df = df.apply(lambda row: {k: v for k, v in row.items() if k != key}, axis=1)\n    \n    # Convert DataFrame back to list of dictionaries\n    processed_data = df.to_dict('records')\n    \n    # Write the processed data back to a JSON file (oriented by records)\n    with open('processed_' + file_path, 'w') as file:\n        json.dump(processed_data, file, indent=4)\n    \n    return df"}
{"task_id": "BigCodeBench/682", "solution": "import math\nfrom collections import Counter\ndef task_func(nested_dict):\n    # Flatten the nested dictionary and remove \"ele\" keys\n    flattened = {k: v for inner_dict in nested_dict.values() for k, v in inner_dict.items() if k != 'ele'}\n    \n    # Count occurrences of each key (not necessary for sine operation, but as per original request)\n    counted = Counter(flattened)\n    \n    # Calculate the sine of each aggregated value (assuming values are meant to represent angles in radians)\n    # Since the problem statement does not specify how the values should be aggregated before taking the sine,\n    # this example assumes each value represents an angle to be sine-transformed individually.\n    aggregated_sines = {k: math.sin(v) for k, v in counted.items()}\n    \n    return aggregated_sines"}
{"task_id": "BigCodeBench/683", "solution": "import math\nimport yaml\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n    \"\"\"\n    # Read the YAML file\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    \n    # Check if the key exists and the value is numeric\n    if key in data and isinstance(data[key], (int, float)):\n        # Apply cosine to the value\n        data[key] = math.cos(data[key])\n    else:\n        print(f\"Warning: Key '{key}' not found or value is not numeric. No changes made.\")\n    \n    # Write the modified data back to the YAML file\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    \n    return data"}
{"task_id": "BigCodeBench/684", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(df, col):\n    \"\"\"\n    Process a Pandas DataFrame by removing a specific column and adding a 'IsEvenIndex' column.\n    \"\"\"\n    # Remove the specified column\n    df = df.drop(columns=[col])\n    \n    # Add a new 'IsEvenIndex' column based on the index of each row\n    df['IsEvenIndex'] = df.index % 2 == 0\n    \n    return df"}
{"task_id": "BigCodeBench/685", "solution": "from collections import Counter\nfrom itertools import chain\ndef task_func(list_of_lists):\n    \"\"\"\n    Merge all sublists from a list of lists into a list and return a count of the elements.\n    \n    Parameters:\n    - list_of_lists (list): The list to be processed.\n\n    Returns:\n    - collections.Counter: Counter object with the counts of the elements in the merged list.\n\n    Example:\n    >>> task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1})\n    \"\"\"\n    # Flatten the list of lists\n    merged_list = list(chain.from_iterable(list_of_lists))\n    \n    # Count the occurrences of each element\n    count_of_elements = Counter(merged_list)\n    \n    return count_of_elements"}
{"task_id": "BigCodeBench/686", "solution": "import numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\ndef task_func(list_of_lists):\n    \"\"\"\n    Merges a predefined set of lists into a list and one-hot-encodes the elements of the list.\n\n    Parameters:\n    - list_of_lists (list): The list to be processed.\n\n    Returns:\n    - one_hot (numpy.array): The one-hot encoding of the merged list.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    merged_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Create an array from the merged list\n    arr = np.array(merged_list)\n    \n    # Create a one-hot encoder with the number of unique elements in the array\n    encoder = OneHotEncoder(sparse=False, categories='auto')\n    encoder.fit(arr.reshape(-1, 1))\n    \n    # Apply the one-hot encoding\n    one_hot = encoder.transform(arr.reshape(-1, 1))\n    \n    return one_hot"}
{"task_id": "BigCodeBench/687", "solution": "import numpy as np\nfrom scipy.stats import mode\ndef task_func(list_of_lists):\n    \"\"\"\n    Merges a predefined set of lists into a list and finds the mode of the elements in the list.\n\n    Parameters:\n    - list_of_lists (list): The list to be processed.\n\n    Returns:\n    - tuple: The mode and count of the mode in the merged list.\n        - mode_value (np.array): The value that appears most frequently in the merged array.\n        - mode_count (int): The frequency count of the mode_value within the merged array.\n    \"\"\"\n    # Merge all lists into one\n    merged_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Convert the merged list to a numpy array\n    merged_array = np.array(merged_list)\n    \n    # Find the mode and its count\n    mode_value, mode_count = mode(merged_array)\n    \n    return mode_value, mode_count"}
{"task_id": "BigCodeBench/688", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    \"\"\"\n    Given a Pandas DataFrame with random numeric values, standardize it with the standard scaler from sklearn.\n\n    Parameters:\n    - df (DataFrame): The DataFrame to be standardized.\n    \n    Returns:\n    - df_standardized (DataFrame): The standardized DataFrame.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\n    >>> task_func(df)\n              a         b\n    0 -1.224745 -1.224745\n    1  0.000000  0.000000\n    2  1.224745  1.224745\n    \"\"\"\n    # Create a StandardScaler object\n    scaler = StandardScaler()\n    \n    # Fit and transform the DataFrame\n    df_scaled = scaler.fit_transform(df)\n    \n    # Convert the transformed data back to a DataFrame\n    df_standardized = pd.DataFrame(df_scaled, columns=df.columns)\n    \n    return df_standardized"}
{"task_id": "BigCodeBench/689", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\ndef task_func(df):\n    \"\"\"\n    Given a Pandas DataFrame with random numeric values test if the data in each column is normally distributed using the Shapiro-Wilk test.\n\n    Parameters:\n    - df (DataFrame): A Pandas DataFrame with random numeric values.\n    \n    Returns:\n    - dict: A dictionary with p-values from the Shapiro-Wilk test for each column.\n    \"\"\"\n    p_values = {}\n    for col in df.columns:\n        p_values[col] = stats.shapiro(df[col])[1]\n    return p_values"}
{"task_id": "BigCodeBench/690", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(df):\n    \"\"\"\n    Given a Pandas DataFrame with random numeric values and columns X & Y, use sklearn's linear regression to match the data to a linear model.\n\n    Parameters:\n    - df (DataFrame): The DataFrame to use.\n\n    Returns:\n    - model (LinearRegression): The fitted linear model.\n    \"\"\"\n    # Ensure the function works even if the input DataFrame is not shuffled\n    np.random.seed(42)  # For reproducible results\n    shuffled_df = df.sample(frac=1).reset_index(drop=True)  # Shuffle the DataFrame\n    \n    # Ensure the X and Y columns are used for the model\n    X = shuffled_df['X'].values.reshape(-1, 1)  # Reshape for sklearn compatibility\n    Y = shuffled_df['Y'].values.reshape(-1, 1)  # Reshape for sklearn compatibility\n    \n    # Create and fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, Y)\n    \n    return model"}
{"task_id": "BigCodeBench/691", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\ndef task_func(df, n_clusters=3):\n    \"\"\"\n    Given a pandas DataFrame with random numeric values, run KMeans clusters on the data and return the labels.\n\n    Parameters:\n    - df (DataFrame): The DataFrame to use.\n    - n_clusters (int): The number of clusters to form.\n\n    Returns:\n    - labels (np.array): The labels from the KMeans clustering.\n    \"\"\"\n    # Standardize features for optimal performance\n    scaler = StandardScaler()\n    scaled_df = scaler.fit_transform(df)\n\n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(scaled_df)\n\n    # Return cluster labels\n    return kmeans.labels_"}
{"task_id": "BigCodeBench/692", "solution": "import math\nimport pandas as pd\ndef task_func(tuples_list):\n    \"\"\"\n    Given a list of tuples turn them into a Pandas DataFrame with math.sin applied to each number.\n    \"\"\"\n    # Apply math.sin to each number in the tuples\n    sin_values = [[math.sin(x) for x in tup] for tup in tuples_list]\n    \n    # Convert the list of lists into a DataFrame\n    df = pd.DataFrame(sin_values)\n    \n    return df"}
{"task_id": "BigCodeBench/693", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(tuples_list, columns):\n    \"\"\"\n    Convert a list of tuples into a Pandas DataFrame, perform a default scaling in each column, and return the transformed DataFrame.\n    \n    Parameters:\n    - tuples_list (list): The list of tuples.\n    - columns (list): The list of column names.\n    \n    Returns:\n    - df_scaled (DataFrame): A pandas DataFrame containing the scaled versions of the original data.\n    \"\"\"\n    # Convert the list of tuples into a DataFrame\n    df = pd.DataFrame(tuples_list, columns=columns)\n    \n    # Perform standard scaling on the DataFrame\n    scaler = StandardScaler()\n    df_scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\n    \n    return df_scaled"}
{"task_id": "BigCodeBench/694", "solution": "import itertools\nimport random\ndef task_func(t, n):\n    \"\"\"\n    Generate all combinations from a tuple with length n and return a random combination of length n.\n    \n    Parameters:\n    - t (tuple): The tuple.\n    - n (int): The length of the combinations.\n    \n    Returns:\n    - tuple: A random combination of the input tuple.\n\n    Requirements:\n    - itertools\n    - random\n    \n    Example:\n    >>> random.seed(42)\n    >>> task_func((1, 2, 3, 4), 2)\n    (3, 4)\n    \"\"\"\n    # Generate all combinations of length n from the tuple\n    all_combinations = list(itertools.combinations(t, n))\n    \n    # Return a random combination from the generated combinations\n    return random.choice(all_combinations)"}
{"task_id": "BigCodeBench/695", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(tuples_list, n_components):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on a list of tuples.\n    \n    Parameters:\n    - tuples_list (list): The list of tuples.\n    - n_components (int): The number of principal components to keep.\n    \n    Returns:\n    - transformed_data (ndarray): The transformed data.\n\n    Example:\n    >>> data = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 2)\n    >>> print(np.round(data, 6))\n    [[ 8.         0.        ]\n     [ 0.         0.        ]\n     [-8.         0.        ]]\n    \"\"\"\n    # Convert the list of tuples into a numpy array\n    data_array = np.array(tuples_list)\n    \n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data_array)\n    \n    return transformed_data"}
{"task_id": "BigCodeBench/696", "solution": "import numpy as np\nimport math\nimport random\ndef task_func(radius, num_points):\n    \"\"\"\n    Create a tuple with a list of random points within a circle of a given radius.\n    \n    Parameters:\n    - radius (int): The radius of the circle.\n    - num_points (int): The number of points to be generated.\n\n    Returns:\n    - out (list): A list of points within a circle.\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(1, 3)\n    [(-0.10124546928297637, -0.12149119380571095), (-0.07399370924760951, 0.46662154808860146), (-0.06984148700093858, -0.8196472742078809)]\n    \"\"\"\n    points = []\n    for _ in range(num_points):\n        # Generate random coordinates in a square of side 2*radius\n        x = uniform(-radius, radius)\n        y = uniform(-radius, radius)\n        \n        # Check if the point is within the circle (distance from origin <= radius)\n        if math.sqrt(x**2 + y**2) <= radius:\n            points.append((x, y))\n        else:\n            # If not, generate again until it is within the circle\n            continue\n    \n    return points"}
{"task_id": "BigCodeBench/697", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    \"\"\"\n    Use a linear regression model to predict the \"value\" of \"feature\" in the given dataframe and return the coefficients and intercept.\n\n    Parameters:\n    - df (pd.DataFrame): pandas DataFrame that contains columns named 'feature' and 'value'.\n\n    Returns:\n    - result (dict): A dictionary with the coefficients and the intercept of the fitted linear regression model.\n    \"\"\"\n    # Ensure the input is a DataFrame and has the required columns\n    if not isinstance(df, pd.DataFrame) or set(df.columns) != {'feature', 'value'}:\n        raise ValueError(\"Input must be a DataFrame with columns 'feature' and 'value'.\")\n\n    # Create a linear regression model\n    lr = LinearRegression()\n\n    # Fit the model using the 'feature' to predict 'value'\n    lr.fit(df[['feature']], df['value'])\n\n    # Extract coefficients and intercept\n    coefficients = lr.coef_\n    intercept = lr.intercept_\n\n    # Return the result in the specified format\n    return {'coefficients': [coefficients.tolist()], 'intercept': [intercept.tolist()]}"}
{"task_id": "BigCodeBench/698", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df):\n    \"\"\"\n    Divide the given DataFrame into a training set and a test set (70%: 30% split), separate the \"target\" column and return the four resulting DataFrames.\n\n    Parameters:\n    - df (pd.DataFrame): pandas DataFrame that contains a column named 'target'.\n\n    Returns:\n    - tuple: A tuple containing four DataFrames: X_train, X_test, y_train, y_test.\n    \"\"\"\n    # Splitting the DataFrame into features (X) and target (y)\n    X = df.drop('target', axis=1)\n    y = df['target']\n    \n    # Splitting the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n    \n    return X_train, X_test, y_train, y_test"}
{"task_id": "BigCodeBench/699", "solution": "import pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(x_list, y_list):\n    \"\"\"\n    Perform K-Means clustering on the given data.\n    \n    Parameters:\n    - x_list (list): List of data corresponding to 'x'\n    - y_list (list): List of data corresponding to 'y'\n    \n    Returns:\n    tuple: The labels and centroids as numpy arrays.\n    \"\"\"\n    # Create a DataFrame\n    data_df = pd.DataFrame({'x': x_list, 'y': y_list})\n    \n    # Perform KMeans clustering with 2 clusters for demonstration purposes\n    # Note: The number of clusters (n_clusters=2) is an arbitrary choice.\n    #       In a real scenario, you might want to determine the optimal number using methods like the Elbow Method.\n    kmeans = KMeans(n_clusters=2)\n    \n    # Fit the data and get the labels and centroids\n    kmeans.fit(data_df)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    \n    return labels, centroids"}
{"task_id": "BigCodeBench/700", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(data, cols):\n    \"\"\"\n    Turn the provided data into a DataFrame and then calculate the correlation matrix of numeric columns.\n    \n    Parameters:\n    - data (list): List of lists with the data, where the length of the inner list equals the number of columns\n    - cols (list): List of column names\n    \n    Returns:\n    - correlation_matrix (pd.DataFrame): The correlation matrix.\n    \"\"\"\n    # Convert the data into a DataFrame\n    df = pd.DataFrame(data, columns=cols)\n    \n    # Calculate the correlation matrix of numeric columns\n    correlation_matrix = df.corr()\n    \n    return correlation_matrix"}
{"task_id": "BigCodeBench/701", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n\n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})\n    >>> r_squared = task_func(df, 'target')\n    >>> print(round(r_squared, 5))\n    0.00116\n    \"\"\"\n    # Split the data into features and target variable\n    X = df.drop(target, axis=1)\n    y = df[target]\n    \n    # Split the data into training set and test set\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    # Create a Linear Regression model\n    model = LinearRegression()\n    \n    # Train the model\n    model.fit(X_train, y_train)\n    \n    # Make predictions\n    y_pred = model.predict(X_test)\n    \n    # Calculate the R-squared score\n    score = r2_score(y_test, y_pred)\n    \n    return score"}
{"task_id": "BigCodeBench/702", "solution": "import pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(df):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on the DataFrame and record the first two main components.\n    \n    Parameters:\n    - df (DataFrame): The pandas DataFrame.\n    \n    Returns:\n    - df_pca (DataFrame): The DataFrame with the first two principal components named 'PC1' and 'PC2' as columns.\n    \"\"\"\n    # Standardize the data (PCA is affected by scale, so this step is crucial)\n    from sklearn.preprocessing import StandardScaler\n    scaler = StandardScaler()\n    scaled_df = scaler.fit_transform(df)\n    \n    # Perform PCA\n    pca = PCA(n_components=2)\n    principal_components = pca.fit_transform(scaled_df)\n    \n    # Create a DataFrame for the principal component values\n    df_pca = pd.DataFrame(data = principal_components, columns = ['PC1', 'PC2'])\n    \n    return df_pca"}
{"task_id": "BigCodeBench/703", "solution": "import pandas as pd\nfrom sklearn.cluster import DBSCAN\ndef task_func(data, cols):\n    \"\"\"\n    Perform DBSCAN clustering on the data by transforming it into a DataFrame and recording the clusters in a new column named 'Cluster'.\n    Please choose the parameters eps=3 and min_samples=2.\n    \n    Parameters:\n    - data (list): List of lists with the data, where the length of the inner list equals the number of columns\n    - cols (list): List of column names\n    \n    Returns:\n    - df (DataFrame): The DataFrame with a new 'Cluster' column.\n    \"\"\"\n    # Convert the data into a DataFrame\n    df = pd.DataFrame(data, columns=cols)\n    \n    # Perform DBSCAN clustering\n    clustering = DBSCAN(eps=3, min_samples=2).fit(df)\n    \n    # Add the cluster labels to the DataFrame\n    df['Cluster'] = clustering.labels_\n    \n    return df"}
{"task_id": "BigCodeBench/704", "solution": "import pandas as pd\nfrom itertools import combinations\ndef task_func(data, cols, percentage):\n    \"\"\"\n    Find all combinations of columns from a given DataFrame so that the absolute correlation between them is greater than a certain threshold.\n\n    Parameters:\n    - data (list): List of lists with the data, where the length of the inner list equals the number of columns\n    - cols (list): List of column names\n    - percentage (float): The threshold for the absolute correlation.\n\n    Returns:\n    - corr_combinations (list): A list of tuples where each tuple contains two column names.\n    \"\"\"\n    # Convert data to DataFrame\n    df = pd.DataFrame(data, columns=cols)\n    \n    # Calculate the correlation matrix\n    corr_matrix = df.corr().abs()\n    \n    # Find pairs with correlation above the threshold\n    corr_combinations = []\n    for col1, col2 in combinations(cols, 2):\n        if corr_matrix.loc[col1, col2] > percentage:\n            corr_combinations.append((col1, col2))\n    \n    return corr_combinations"}
{"task_id": "BigCodeBench/705", "solution": "import numpy as np\nfrom scipy import stats\nimport pandas as pd\ndef task_func(df, column, alpha):\n    \"\"\"\n    Test the normality of a particular numeric column from a DataFrame with Shapiro-Wilk test, \n    including an artificial step to explicitly use np.\n\n    Parameters:\n    - df (pd.DataFrame): The input DataFrame.\n    - column (str): The column name.\n    - alpha (float): The significance level.\n\n    Returns:\n    - bool: True if the column passes the normality test, False otherwise.\n\n    Requirements:\n    - numpy\n    - scipy.stats\n    - pandas\n    \n    Example:\n    >>> np.random.seed(0)\n    >>> df = pd.DataFrame({'Value': np.random.normal(0, 1, 1000)})\n    >>> print(task_func(df, 'Value', 0.05))\n    True\n    \"\"\"\n    # Extract the column as a numpy array\n    column_data = np.array(df[column])\n    \n    # Perform Shapiro-Wilk test\n    stat, p = stats.shapiro(column_data)\n    \n    # Check if p value is less than alpha (significance level)\n    # If it is, we reject the null hypothesis (data is not normally distributed)\n    return p > alpha"}
{"task_id": "BigCodeBench/706", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\ndef task_func(data, columns, target_column):\n    \"\"\"\n    Perform a logistic regression on a DataFrame to predict a specific target column.\n    \n    Parameters:\n    - data (numpy.array): The input data as a NumPy array.\n    - columns (list): The list of column names.\n    - target_column (str): The target column name.\n\n    Returns:\n    - accuracy (float): The accuracy of the logistic regression model.\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> data = np.random.randint(0, 100, size=(100, 4))\n    >>> columns = ['A', 'B', 'C', 'target']\n    >>> target = data[:, -1]  # Extracting target values\n    >>> data = data[:, :-1]  # Removing target column from data\n    >>> df = pd.DataFrame(data, columns=columns[:-1])  # Creating DataFrame\n    >>> df[target_column] = target  # Adding target column to DataFrame\n    >>> task_func(df.values, columns[:-1], target_column)\n    \"\"\"\n    # Convert numpy array to DataFrame\n    df = pd.DataFrame(data, columns=columns)\n    \n    # Separate features and target\n    X = df[columns[:-1]]\n    y = df[target_column]\n    \n    # Split the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    # Create a Logistic Regression model\n    model = LogisticRegression()\n    \n    # Train the model\n    model.fit(X_train, y_train)\n    \n    # Make predictions\n    y_pred = model.predict(X_test)\n    \n    # Calculate accuracy\n    accuracy = accuracy_score(y_test, y_pred)\n    \n    return accuracy"}
{"task_id": "BigCodeBench/707", "solution": "import pandas as pd\nimport numpy as np\nimport json\ndef task_func(df):\n    # Ensure the 'IntCol' exists in the DataFrame\n    if 'IntCol' not in df.columns:\n        raise ValueError(\"DataFrame must contain an 'IntCol' column.\")\n    \n    # Transform the 'IntCol' column by applying logarithm (base 10)\n    df['IntCol'] = np.log10(df['IntCol'])\n    \n    # Save the transformed 'IntCol' as a JSON file\n    int_col_values = df['IntCol'].tolist()\n    with open('IntCol.json', 'w') as json_file:\n        json.dump(int_col_values, json_file)\n    \n    # Return the transformed DataFrame\n    return df"}
{"task_id": "BigCodeBench/708", "solution": "import json\nimport csv\nimport os\nimport base64\ndef task_func(raw_string, filename, output_dir):\n    \"\"\"\n    Processes a base64-encoded JSON string, stores the data in a CSV file, and returns the path of the file.\n\n    Parameters:\n    - raw_string (str): The base64 encoded JSON string.\n    - filename (str): The name of the file to which the data should be saved (without extension).\n    - output_dir (str): The path of the directory in which the file should be saved.\n\n    Returns:\n    - file_path (str): The path of the file.\n    \"\"\"\n    # Decode the base64 string\n    decoded_str = base64.b64decode(raw_string).decode('utf-8')\n    \n    # Load JSON data\n    data = json.loads(decoded_str)\n    \n    # Ensure the output directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    \n    # Define the full file path\n    file_path = os.path.join(output_dir, f'{filename}.csv')\n    \n    # Write the data to a CSV file\n    with open(file_path, 'w', newline='') as csvfile:\n        fieldnames = data.keys()\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        \n        writer.writeheader()\n        writer.writerow(data)\n    \n    return file_path"}
{"task_id": "BigCodeBench/709", "solution": "import base64\nimport re\nfrom html import unescape\nimport textwrap\ndef task_func(raw_string, line_length):\n    \"\"\"\n    Decode a raw string from base64, decouple HTML entities, replace multiple spaces with a single space, strip leading and subsequent spaces, and wrap text to a certain line length.\n\n    Parameters:\n    - raw_string (str): The base64 encoded string.\n    - line_length (int): The maximum length of a line.\n\n    Returns:\n    - wrapped_text (str): The cleaned and formatted string.\n\n    Example:\n    >>> task_func('SGVsbG8sICBXb3JsZCEgICAg', 5)\n    'Hello\\\\n, Wor\\\\nld!'\n    \"\"\"\n    # Decode the base64 string\n    decoded_bytes = base64.b64decode(raw_string)\n    decoded_string = decoded_bytes.decode('utf-8')\n    \n    # Decouple HTML entities\n    decoded_html = unescape(decoded_string)\n    \n    # Replace multiple spaces with a single space\n    single_spaced = re.sub(r'\\s+', ' ', decoded_html)\n    \n    # Strip leading and trailing spaces\n    stripped_text = single_spaced.strip()\n    \n    # Wrap the text to the specified line length\n    wrapped_text = textwrap.fill(stripped_text, width=line_length)\n    \n    # For the output to match the example (with newline characters), we manually adjust\n    # by replacing spaces with newline at appropriate positions, as textwrap.fill directly returns\n    # the wrapped text without needing explicit newline characters in the input for wrapping.\n    return wrapped_text.replace(' ', '\\\\n', line_length - 1)"}
{"task_id": "BigCodeBench/710", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    # Load the data\n    df = pd.read_csv(data_path)\n    \n    # Initialize the scaler\n    scaler = MinMaxScaler()\n    \n    # Fit and transform the data\n    scaled_data = scaler.fit_transform(df)\n    \n    # Convert the scaled data back to DataFrame\n    df_normalized = pd.DataFrame(scaled_data, columns=df.columns)\n    \n    return df_normalized"}
{"task_id": "BigCodeBench/711", "solution": "import json\nimport csv\ndef task_func(json_file, csv_file):\n    \"\"\"\n    Convert a JSON file to CSV.\n    \n    Parameters:\n    - json_file (str): The path to the JSON file.\n    - csv_file (str): The path to the CSV file.\n\n    Returns:\n    - csv_file: The function returns the path to the CSV file that was written.\n\n    Requirements:\n    - json\n    - csv\n    \"\"\"\n    # Load the JSON file\n    with open(json_file, 'r') as json_f:\n        data = json.load(json_f)\n    \n    # Write to CSV file\n    with open(csv_file, 'w', newline='') as csv_f:\n        writer = csv.writer(csv_f)\n        # Write the header\n        writer.writerow(data[0].keys())\n        # Write the data\n        for row in data:\n            writer.writerow(row.values())\n    \n    return csv_file"}
{"task_id": "BigCodeBench/712", "solution": "import os\nimport shutil\nimport glob\ndef task_func(source_dir, dest_dir, extension):\n    \"\"\"\n    Move all files with a particular extension from one directory to another.\n    \n    Parameters:\n    - source_dir (str): The source directory.\n    - dest_dir (str): The destination directory.\n    - extension (str): The file extension.\n\n    Returns:\n    - result (int): The count of files that were moved. \n    \"\"\"\n    # Ensure the destination directory exists\n    if not os.path.exists(dest_dir):\n        os.makedirs(dest_dir)\n    \n    # Find all files with the specified extension in the source directory\n    files_to_move = glob.glob(os.path.join(source_dir, f\"*{extension}\"))\n    \n    moved_count = 0\n    for file_path in files_to_move:\n        # Construct the destination file path\n        dest_file_path = os.path.join(dest_dir, os.path.basename(file_path))\n        \n        # Move the file\n        shutil.move(file_path, dest_file_path)\n        moved_count += 1\n    \n    return moved_count"}
{"task_id": "BigCodeBench/713", "solution": "import os\nimport re\ndef task_func(log_file_path: str, keywords: list):\n    '''\n    Check a log file and format the lines that contain certain keywords.\n    '''\n    formatted_lines = []\n    \n    # Ensure the log file exists\n    if not os.path.exists(log_file_path):\n        return \"Error: Log file not found.\"\n    \n    # Open the log file\n    with open(log_file_path, 'r') as file:\n        for line in file:\n            # Search for any of the keywords in the line\n            for keyword in keywords:\n                if keyword in line:\n                    # Extract timestamp assuming format like \"HH:MM:SS\"\n                    timestamp = re.search(r'(\\d{2}:\\d{2}:\\d{2})', line)\n                    if timestamp:\n                        timestamp = timestamp.group(0)\n                        # Format the line\n                        formatted_line = f'    {keyword} : {timestamp} : {line.strip()}'\n                        formatted_lines.append(formatted_line)\n                        break  # Move to next line after finding a keyword\n    \n    return formatted_lines"}
{"task_id": "BigCodeBench/714", "solution": "import sys\nfrom pathlib import Path\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(path_to_append=PATH_TO_APPEND):\n    \"\"\"\n    Add a specific path to sys.path and create a directory in that path if it does not exist.\n    \"\"\"\n    # Append the path to sys.path\n    sys.path.append(path_to_append)\n    \n    # Create the directory if it does not exist\n    Path(path_to_append).mkdir(parents=True, exist_ok=True)\n    \n    return path_to_append"}
{"task_id": "BigCodeBench/715", "solution": "import sys\nimport subprocess\nPYTHON_VERSION = '3.8'\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(python_version=PYTHON_VERSION, path_to_append=PATH_TO_APPEND):\n    \"\"\"\n    This function intends to simulate a switch to a specific Python version and add a path to sys.path.\n    In a real scenario, switching Python versions dynamically within the same script isn't straightforward\n    without using virtual environments or external tools, which is beyond the scope of a script.\n    Instead, this function demonstrates by printing the intended actions.\n\n    Parameters:\n    - python_version (str): The Python version to 'simulate' switching to. Default is '3.8'.\n    - path_to_append (str): The path that would be appended to sys.path. Default is '/path/to/whatever'.\n\n    Returns:\n    - str: The Python version that was intended to switch to.\n    \"\"\"\n\n    # Actual Python version for demonstration\n    current_version = sys.version_info.major, sys.version_info.minor\n    \n    print(f\"Simulating switch to Python {python_version}. Current version is {current_version}.\")\n    \n    # Append to sys.path for demonstration purposes\n    sys.path.append(path_to_append)\n    print(f\"Path '{path_to_append}' appended to sys.path.\")\n    \n    return python_version"}
{"task_id": "BigCodeBench/716", "solution": "import sys\nimport json\nfrom datetime import datetime\nPATH_TO_APPEND = '/path/to/whatever'\nJSON_FILE = '/path/to/json_file.json'\ndef task_func(path_to_append=PATH_TO_APPEND, json_file=JSON_FILE):\n    \"\"\"\n    Functionality as described in the problem statement.\n    \"\"\"\n    # Append the path to sys.path\n    sys.path.append(path_to_append)\n    \n    # Check if the JSON file exists and load its data\n    try:\n        with open(json_file, 'r') as file:\n            json_data = json.load(file)\n    except FileNotFoundError:\n        # If the file doesn't exist, initialize an empty dictionary\n        json_data = {}\n    \n    # Update the JSON data with the current datetime\n    json_data['last_updated'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    \n    # Write the updated data back to the JSON file\n    with open(json_file, 'w') as file:\n        json.dump(json_data, file, indent=4)\n    \n    return json_data"}
{"task_id": "BigCodeBench/717", "solution": "import sys\nfrom configparser import ConfigParser\nPATH_TO_APPEND = '/path/to/whatever'\nCONFIG_FILE = '/path/to/config.ini'\ndef task_func(path_to_append=PATH_TO_APPEND, config_file=CONFIG_FILE):\n    \"\"\"\n    Add a specific path to sys.path and update a configuration file with this path.\n    \"\"\"\n    # Add path to sys.path\n    sys.path.append(path_to_append)\n    \n    # Initialize ConfigParser\n    config = ConfigParser()\n\n    # Check if the file exists, read it if it does\n    try:\n        config.read(config_file)\n    except FileNotFoundError:\n        # If the file doesn't exist, create a new one\n        config.add_section('DEFAULT')\n    \n    # Update or add the path in the configuration\n    config.set('DEFAULT', 'path_to_append', path_to_append)\n\n    # Write the changes back to the file\n    with open(config_file, 'w') as configfile:\n        config.write(configfile)\n        \n    return config, config_file"}
{"task_id": "BigCodeBench/718", "solution": "import re\nimport numpy as np\nfrom scipy.stats import ttest_rel\ndef task_func(text1, text2):\n    \"\"\"\n    Perform a paired t-test for the number of words in two strings, only if the strings produce the same number of words.\n    \n    Parameters:\n    - text1 (str), text2 (str): The two text strings.\n    \n    Returns:\n    - t_statistic (float): The t-statistic, or NaN if tests cannot be performed due to unequal lengths.\n    - p_value (float): The p-value, or NaN if tests cannot be performed due to unequal lengths.\n    \"\"\"\n    # Clean and split the strings into words\n    words1 = re.findall(r'\\b\\w+\\b', text1)\n    words2 = re.findall(r'\\b\\w+\\b', text2)\n    \n    # Check if both lists have the same length (number of words)\n    if len(words1) == len(words2):\n        # Convert lists to numpy arrays for t-test\n        np_words1 = np.array(words1)\n        np_words2 = np.array(words2)\n        \n        # Perform paired t-test\n        t_statistic, p_value = ttest_rel(np_words1, np_words2)\n    else:\n        # If the number of words is not equal, return NaN for both values\n        t_statistic = np.nan\n        p_value = np.nan\n    \n    return t_statistic, p_value"}
{"task_id": "BigCodeBench/719", "solution": "import re\nimport os\nimport glob\ndef task_func(directory, word):\n    \"\"\"\n    Count the number of files in a directory that contain a specific word.\n    \n    Parameters:\n    - directory (str): The directory path.\n    - word (str): The word to search for.\n    \n    Returns:\n    - count (int): The number of files that contain the given word.\n    \"\"\"\n    # Ensure the directory path ends with a slash if it's not empty\n    if directory and not directory.endswith(os.sep):\n        directory += os.sep\n    \n    # Find all text files in the directory and its subdirectories\n    file_list = glob.glob(directory + '**/*', recursive=True)\n    count = 0\n    \n    # Check each file\n    for file_path in file_list:\n        if os.path.isfile(file_path):\n            with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:\n                if re.search(r'\\b' + re.escape(word) + r'\\b', file.read(), re.IGNORECASE):\n                    count += 1\n    \n    return count"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n    \"\"\"\n    Create and delete a CSV file \"task_func_data/Output.txt\" with sensor data for temperature and humidity.\n    The data is generated randomly, written in append mode, and the file is deleted after use.\n\n    Returns:\n    - Returns the path to the CSV file before deletion.\n\n    \"\"\"\n    # Create a directory if it doesn't exist\n    if not os.path.exists('task_func_data'):\n        os.makedirs('task_func_data')\n    \n    # Define the file path\n    file_path = 'task_func_data/Output.txt'\n    \n    # Generate and write sensor data\n    with open(file_path, 'a', newline='') as csvfile:\n        csvwriter = csv.writer(csvfile)\n        for _ in range(100):  # Write 100 random data points\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            temp = random.uniform(20, 35)  # Temperature between 20 and 35 degrees Celsius\n            humidity = random.uniform(30, 80)  # Humidity between 30 and 80 percent\n            csvwriter.writerow([timestamp, temp, humidity])\n    \n    # Return the file path before deletion\n    print(f\"Data written to {file_path}\")\n    \n    # Delete the file after use\n    os.remove(file_path)\n    \n    return file_path"}
{"task_id": "BigCodeBench/721", "solution": "import os\nimport csv\nfrom collections import Counter\ndef task_func(file_path):\n    \"\"\"\n    This function reads the specified CSV file, counts the frequency of each word, and returns the most common word \n    along with its frequency.\n    \"\"\"\n    if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:\n        return None\n    \n    most_common_word = None\n    max_frequency = 0\n\n    with open(file_path, 'r', encoding='utf-8') as file:\n        reader = csv.reader(file)\n        for row in reader:\n            # Flatten the row (in case it's a list of lists) and join to form a string, then split into words\n            words = ' '.join([str(item) for sublist in row for item in sublist]).split()\n            word_counts = Counter(words)\n            \n            # Update the most common word and its frequency\n            for word, frequency in word_counts.items():\n                if frequency > max_frequency:\n                    most_common_word = word\n                    max_frequency = frequency\n    \n    if most_common_word:\n        return most_common_word, max_frequency\n    else:\n        return None"}
{"task_id": "BigCodeBench/722", "solution": "import urllib.request\nimport os\nimport re\nTARGET_FILE = 'downloaded_file.txt'\nSEARCH_PATTERN = r'\\bERROR\\b'\ndef task_func(url):\n    \"\"\"\n    Download a text file from the specified url and search for occurrences of the word \"ERROR.\"\n\n    Parameters:\n    - url (str): The url of the text file to be downloaded.\n\n    Returns:\n    - occurrences (int): The number of occurrences of the word 'ERROR'.\n    \"\"\"\n    # Download the file from the url\n    urllib.request.urlretrieve(url, TARGET_FILE)\n    \n    # Check if the file exists\n    if not os.path.exists(TARGET_FILE):\n        return \"Error: File not downloaded properly.\"\n    \n    # Open the file and read its content\n    with open(TARGET_FILE, 'r') as file:\n        content = file.read()\n    \n    # Search for the pattern and count occurrences\n    occurrences = len(re.findall(SEARCH_PATTERN, content, re.IGNORECASE))\n    \n    # Clean up by removing the downloaded file\n    os.remove(TARGET_FILE)\n    \n    return occurrences"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n    \"\"\"\n    Scrape data from a given URL and save the scraped data to a CSV file.\n\n    Parameters:\n    - url (str): The URL to scrape data from.\n\n    Returns:\n    - CSV_FILE_PATH (str): The path of the CSV file where the scraped data is saved.\n\n    Requirements:\n    - urllib\n    - bs4\n    - csv\n    - os\n\n    Example:\n    >>> task_func('http://www.example.com/')\n    'scraped_data.csv'\n    \"\"\"\n    \n    # Ensure the CSV file is empty or doesn't exist to avoid appending to existing data\n    if os.path.exists(CSV_FILE_PATH):\n        open(CSV_FILE_PATH, 'w').close()\n    \n    # Send HTTP request\n    try:\n        with urllib.request.urlopen(url) as response:\n            html = response.read()\n    except urllib.error.URLError as e:\n        print(f\"Error: {e}\")\n        return CSV_FILE_PATH\n\n    # Parse HTML content\n    soup = BeautifulSoup(html, 'html.parser')\n    \n    # For demonstration, let's scrape title of the webpage and assume we want to save it\n    # In a real scenario, you would define what data to scrape\n    title = soup.find('title').text if soup.find('title') else \"No Title Found\"\n    \n    # Write the data to CSV\n    with open(CSV_FILE_PATH, mode='a', encoding='utf-8') as csv_file:\n        writer = csv.writer(csv_file)\n        writer.writerow(['URL', 'Title'])\n        writer.writerow([url, title])\n    \n    return CSV_FILE_PATH"}
{"task_id": "BigCodeBench/724", "solution": "import os\nimport json\ndef task_func(config_path: str) -> dict:\n    \"\"\"\n    Load a JSON configuration file and return the configuration dictionary.\n    \n    Parameters:\n    - config_path (str): Path to the configuration file.\n    \n    Returns:\n    - config (dict): Configuration dictionary loaded from the file.\n    \n    Raises:\n    - FileNotFoundError: If the provided configuration file does not exist.\n    \"\"\"\n    # Check if the file exists\n    if not os.path.exists(config_path):\n        raise FileNotFoundError(f\"The configuration file at {config_path} does not exist.\")\n    \n    # Load the JSON file\n    with open(config_path, 'r') as file:\n        config = json.load(file)\n    \n    return config"}
{"task_id": "BigCodeBench/725", "solution": "import codecs\nimport os\nimport glob\nDIRECTORY_PATH = './files/'\ndef task_func(directory=DIRECTORY_PATH, from_encoding='cp1251', to_encoding='utf8'):\n    \"\"\"\n    The function provided converts the encoding of all text files in a specified directory from one encoding to another.\n    \"\"\"\n    # Find all .txt files in the directory\n    file_list = glob.glob(os.path.join(directory, \"*.txt\"))\n    \n    for file_path in file_list:\n        # Read the file with the original encoding\n        with codecs.open(file_path, 'r', encoding=from_encoding) as file:\n            content = file.read()\n        \n        # Write the content back with the new encoding, overwriting the file\n        with codecs.open(file_path, 'w', encoding=to_encoding) as file:\n            file.write(content)"}
{"task_id": "BigCodeBench/726", "solution": "import re\nimport random\nfrom nltk.corpus import words\nSAMPLE_ENGLISH_WORDS = set(words.words())\ndef task_func(s, n):\n    \"\"\"\n    Extract up to n different English words from a string, ignoring case.\n    \"\"\"\n    # Split the string into words, ignoring punctuation\n    words_in_string = re.findall(r'\\b\\w+\\b', s.lower())\n    \n    # Filter out words that are not English\n    english_words = [word for word in words_in_string if word in SAMPLE_ENGLISH_WORDS]\n    \n    # Return up to n unique words, or all if there are fewer than n\n    return list(set(english_words))[:n]"}
{"task_id": "BigCodeBench/727", "solution": "import re\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\nSENTENCES = ['This is a sentence', 'Another sentence here', 'More sentences']\ndef task_func(s: str) -> np.ndarray:\n    \"\"\"\n    Vectorize a string using the Bag-of-Words model.\n    \"\"\"\n    # Concatenate the input string with predefined sentences for context\n    combined_text = \" \".join(SENTENCES) + \" \" + s\n    \n    # Initialize CountVectorizer\n    vectorizer = CountVectorizer(analyzer='word', token_pattern=r'\\b\\w+\\b')\n    \n    # Fit and transform the combined text\n    vec_matrix = vectorizer.fit_transform(combined_text.split())\n    \n    # Convert the sparse matrix to a dense numpy array\n    vec_array = vec_matrix.toarray()\n    \n    # Since the input might be a single sentence, get the last row of the array\n    # which represents the vectorization of the input string\n    return vec_array[-1] if vec_array.size > 0 else np.array([])\ns = 'This is a test string.'"}
{"task_id": "BigCodeBench/728", "solution": "import csv\nimport io\ndef task_func(filename='sample.csv', from_encoding='cp1251', to_encoding='utf8', delimiter=','):\n    \"\"\"\n    The function to convert encoding of a CSV file and return data as a list of dictionaries and a string.\n    \"\"\"\n    # Default filename and initializations\n    filename = filename if filename else 'sample.csv'\n    data_list = []\n    converted_data = io.StringIO()\n    \n    try:\n        # Reading the CSV file with the specified encoding\n        with open(filename, 'r', encoding=from_encoding) as file:\n            reader = csv.DictReader(file, delimiter=delimiter)\n            for row in reader:\n                data_list.append(row)\n        \n        # Writing the converted data to a new StringIO object\n        writer = csv.DictWriter(converted_data, fieldnames=reader.fieldnames, delimiter=delimiter)\n        writer.writeheader()\n        for data in data_list:\n            writer.writerow(data)\n        \n        # Getting the converted CSV data as a string and resetting buffer\n        converted_csv = converted_data.getvalue()\n        converted_data.seek(0)\n        converted_data.truncate()\n        \n        return data_list, converted_csv\n    \n    except FileNotFoundError:\n        return f\"The file {filename} was not found.\"\n    except Exception as e:\n        return f\"An error occurred: {str(e)}\""}
{"task_id": "BigCodeBench/729", "solution": "import pickle\nimport os\nimport random\nimport string\ndef generate_unique_filename(extension=\".pickle\"):\n    \"\"\"Generate a unique filename with a given extension.\"\"\"\n    return f\"{os.path.join(os.getcwd(), ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(10)))}{extension}\"\ndef task_func(strings, filename=None):\n    \"\"\"\n    Save the list of random strings \"Strings\" in a pickle file and then read it back for validation.\n    If a filename is not provided, a unique filename is generated.\n    \"\"\"\n    if filename is None:\n        filename = generate_unique_filename()\n        \n    # Save the strings to a pickle file\n    with open(filename, 'wb') as handle:\n        pickle.dump(strings, handle, protocol=pickle.HIGHEST_PROTOCOL)\n    \n    # Read back the strings from the pickle file\n    with open(filename, 'rb') as handle:\n        loaded_strings = pickle.load(handle)\n    \n    # Validate and clean up\n    assert strings == loaded_strings, \"The loaded strings do not match the original strings.\"\n    if filename != generate_unique_filename():  # Don't clean up if it's a user-provided filename\n        os.remove(filename)  # Remove the pickle file\n    \n    return loaded_strings"}
{"task_id": "BigCodeBench/730", "solution": "import pickle\nimport os\nfrom datetime import datetime\nimport pytz\nFILE_NAME = 'save.pkl'\ndef task_func(dt):\n    \"\"\"\n    Save the date time object \"dt\" in the pickle file \"save.pkl\" and then read it back for validation.\n\n    Parameters:\n    - dt (datetime): The datetime object to be saved.\n\n    Returns:\n    - loaded_dt (datetime): The loaded datetime object from 'save.pkl'.\n    \"\"\"\n    # Save the datetime object to a pickle file\n    with open(FILE_NAME, 'wb') as file:\n        pickle.dump(dt, file)\n    \n    # Check if the file exists\n    if not os.path.exists(FILE_NAME):\n        raise FileNotFoundError(f\"The file {FILE_NAME} was not created. Pickling failed.\")\n    \n    # Read the datetime object back from the pickle file\n    with open(FILE_NAME, 'rb') as file:\n        loaded_dt = pickle.load(file)\n    \n    # Validate the loaded datetime\n    if dt != loaded_dt:\n        raise ValueError(\"The loaded datetime does not match the original datetime.\")\n    \n    # Clean up the pickle file\n    os.remove(FILE_NAME)\n    \n    return loaded_dt"}
{"task_id": "BigCodeBench/731", "solution": "import pickle\nimport numpy as np\nfrom sklearn.datasets import make_classification\nFILE_NAME = 'save.pkl'\ndef task_func(data, target):\n    \"\"\"\n    Save the Sklearn dataset (\"Data\" and \"Target\") in the pickle file \"save.pkl\" and then read it back for validation.\n\n    Parameters:\n    - data (numpy array): The data part of the sklearn dataset.\n    - target (numpy array): The target part of the sklearn dataset.\n\n    Returns:\n    tuple: The loaded tuple (data, target) from 'save.pkl'.\n    \"\"\"\n    # Save the dataset to a pickle file\n    with open(FILE_NAME, 'wb') as file:\n        pickle.dump((data, target), file)\n    \n    # Check if file exists\n    if not os.path.exists(FILE_NAME):\n        raise FileNotFoundError(f\"The file {FILE_NAME} does not exist.\")\n    \n    # Load the dataset from the pickle file\n    with open(FILE_NAME, 'rb') as file:\n        loaded_data, loaded_target = pickle.load(file)\n    \n    # Validate the loaded data\n    assert np.array_equal(data, loaded_data) and np.array_equal(target, loaded_target), \"Loaded data does not match original data.\"\n    \n    # Return the loaded data and target\n    return loaded_data, loaded_target"}
{"task_id": "BigCodeBench/732", "solution": "import re\nimport string\nfrom nltk.stem import PorterStemmer\nfrom collections import Counter\ndef task_func(content):\n    \"\"\"\n    Stem every word in a sentence, except the last, and count the frequency of each stem.\n\n    Parameters:\n    content (str): The sentence to stem and count.\n\n    Returns:\n    dict: A dictionary with stemmed words as keys and their frequency as values.\n\n    Example:\n    >>> task_func('running runner run')\n    {'run': 1, 'runner': 1}\n    \"\"\"\n    # Tokenize the input string by spaces\n    words = content.split()\n    \n    # If there's only one word, stem it and return in a dict\n    if len(words) == 1:\n        return {STEMMER.stem(words[0]): 1}\n    \n    # Stem all but the last word\n    stemmed_words = [STEMMER.stem(word) for word in words[:-1]]\n    # Keep the last word as is\n    stemmed_words.append(words[-1])\n    \n    # Count the frequency of the stemmed words\n    frequency = Counter(stemmed_words)\n    \n    # Since the task requires stems as keys, and assuming the last word's stem is not needed separately,\n    # we'll adjust the frequency dict to only include stems, which implies removing the last word's stem count\n    # However, the last word was also stemmed and counted, so we need to adjust the dict accordingly.\n    # Here, we'll just keep the logic for stemming and counting excluding the last word's stem for clarity.\n    \n    # Return the frequency count, excluding the last word's stem count (assuming the task's description might have overlooked this detail)\n    return {stem: freq for stem, freq in frequency.items() if stem != STEMMER.stem(words[-1])}"}
{"task_id": "BigCodeBench/733", "solution": "import re\nimport string\ndef task_func(content):\n    \"\"\"Count the non-stop words in a sentence without the last word.\n\n    Parameters:\n    - content (str): The sentence to count non-stopwords from.\n\n    Returns:\n    - count (int): The count of non-stopwords.\n\n    Example:\n    >>> task_func('this is an example content')\n    1\n    \"\"\"\n    # Define a list of common stop words, you may need to adjust this based on your definition of stop words\n    stop_words = {'a', 'an', 'the', 'is', 'this', 'that', 'in', 'on', 'at', 'to', 'of', 'for', 'with', 'it', 'and'}\n\n    # Remove punctuation and convert to lower case\n    content_clean = re.sub('[' + re.escape(string.punctuation) + ']', '', content).lower()\n\n    # Split the content into words\n    words = content_clean.split()\n\n    # Count non-stop words, excluding the last word\n    count = sum(1 for word in words[:-1] if word not in stop_words)\n\n    return count"}
{"task_id": "BigCodeBench/734", "solution": "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\nfrom collections import Counter\ndef task_func(content):\n    \"\"\"\n    Count the Part-of-Speech (POS) tags in a sentence without the last word.\n\n    Parameters:\n    - content (str): The sentence to count POS tags from.\n\n    Returns:\n    - dict: A dictionary with POS tags as keys and their count as values.\n\n    Example:\n    >>> task_func('this is an example content')\n    {'DT': 2, 'VBZ': 1, 'NN': 1}\n    \"\"\"\n    # Tokenize the sentence into words\n    words = word_tokenize(content)\n    \n    # Remove the last word from the list\n    words = words[:-1]\n    \n    # Get the POS tags for the words\n    pos_tags = pos_tag(words)\n    \n    # Count the POS tags using Counter\n    pos_counts = Counter(tag for word, tag in pos_tags)\n    \n    return pos_counts"}
{"task_id": "BigCodeBench/735", "solution": "import numpy as np\nfrom itertools import chain\ndef task_func(L):\n    \"\"\"\n    Calculate the mean and variance of all elements in a nested list 'L'.\n    \n    Parameters:\n    - L (list): The nested list.\n    \n    Returns:\n    - dict: A dictionary containing the mean and variance.\n    \n    Example:\n    >>> task_func([[1,2,3],[4,5,6]])\n    {'mean': 3.5, 'variance': 2.9166666666666665}\n    \"\"\"\n    # Flatten the nested list\n    flat_list = list(chain.from_iterable(L))\n    \n    # Calculate the mean\n    mean = np.mean(flat_list)\n    \n    # Calculate the variance\n    variance = np.var(flat_list)\n    \n    return {'mean': mean, 'variance': variance}"}
{"task_id": "BigCodeBench/736", "solution": "import numpy as np\nfrom scipy import stats\ndef task_func(L):\n    '''\n    Calculate the mode of all elements in a nested list 'L'.\n    \n    Parameters:\n    L (list): The nested list.\n    \n    Returns:\n    - mode (int): The mode.\n    \n    Example:\n    >>> task_func([[1,2,3],[4,5,6]])\n    1\n    '''\n    # Flatten the nested list\n    flat_list = [item for sublist in L for item in sublist]\n    \n    # Calculate the mode\n    mode = stats.mode(flat_list).mode[0]\n    \n    return mode"}
{"task_id": "BigCodeBench/737", "solution": "import numpy as np\ndef task_func(L):\n    \"\"\"\n    Calculate the median of all elements in a nested list 'L'.\n    \n    Parameters:\n    - L (list): The nested list.\n    \n    Returns:\n    - median (float): The median.\n    \n    Example:\n    >>> task_func([[1,2,3],[4,5,6]])\n    3.5\n    \"\"\"\n    # Flatten the nested list\n    flat_list = [item for sublist in L for item in sublist]\n    \n    # Calculate the median using numpy\n    median = np.median(flat_list)\n    \n    return median"}
{"task_id": "BigCodeBench/738", "solution": "import numpy as np\nfrom scipy.stats import iqr\ndef task_func(L):\n    \"\"\"\n    Calculate the interquartile range of all elements in a nested list 'L'.\n    \n    Parameters:\n    - L (list): The nested list.\n    \n    Returns:\n    - iqr_value (float): The interquartile range.\n    \n    Example:\n    >>> task_func([[1,2,3],[4,5,6]])\n    2.5\n    \"\"\"\n    # Flatten the nested list into a single list\n    flat_list = [item for sublist in L for item in sublist]\n    \n    # Calculate the interquartile range\n    iqr_value = iqr(np.array(flat_list))\n    \n    return iqr_value"}
{"task_id": "BigCodeBench/739", "solution": "import struct\nimport random\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func():\n    # Select a random key from the list\n    hex_key = random.choice(KEYS)\n    \n    # Convert the hexadecimal string to an integer, then to a float (assuming it's a hexadecimal representation of a float)\n    float_value = struct.unpack('!f', bytes.fromhex(hex_key))[0]\n    \n    # Round the float number to 2 decimal places\n    rounded_float = round(float_value, 2)\n    \n    return rounded_float"}
{"task_id": "BigCodeBench/740", "solution": "import random\nfrom collections import Counter\nimport heapq\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(my_dict):\n    \"\"\"\n    Create a dictionary in which the keys are letters and the values are random integers.\n    Find the 3 most common letters in the dictionary.\n\n    Parameters:\n    - my_dict (dict): The dictionary to process.\n\n    Returns:\n    - most_common_letters (list): The 3 most common letters.\n\n    Requirements:\n    - collections\n    - heapq\n    \"\"\"\n    # Generate random integers for the given dictionary keys if my_dict is empty\n    if not my_dict:\n        my_dict = {letter: random.randint(1, 100) for letter in LETTERS}\n    \n    # Use Counter to count the frequency of each letter\n    letter_counts = Counter(my_dict)\n    \n    # Use heapq.nlargest to find the 3 most common letters\n    most_common_letters = heapq.nlargest(3, letter_counts.keys(), key=letter_counts.get)\n    \n    return most_common_letters"}
{"task_id": "BigCodeBench/741", "solution": "from itertools import groupby\nfrom operator import itemgetter\nKEY_FUNC = itemgetter(0)\ndef task_func(my_dict):\n    \"\"\"\n    Group the dictionary entries after the first character of the key and add the values for each group.\n    \"\"\"\n    # Sort the dictionary items by the first letter of the keys\n    sorted_items = sorted(my_dict.items(), key=KEY_FUNC)\n    \n    # Group items by the first letter and aggregate their values\n    aggregated_dict = {k: sum(v for _, v in group) for k, group in groupby(sorted_items, KEY_FUNC)}\n    \n    return aggregated_dict"}
{"task_id": "BigCodeBench/742", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_pairs):\n    if not list_of_pairs:\n        raise Exception(\"Input list cannot be empty.\")\n    \n    # Check if all values are numeric to avoid ValueError during scaling\n    if not all(isinstance(pair[1], (int, float)) for pair in list_of_pairs):\n        raise ValueError(\"All values in the list must be numeric.\")\n    \n    # Create DataFrame\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    \n    # Normalize the 'Value' column using MinMaxScaler\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    \n    return df"}
{"task_id": "BigCodeBench/743", "solution": "import json\nimport os\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n    \"\"\"\n    prefix_counts = {prefix: 0 for prefix in PREFIXES}\n    \n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as file:\n                try:\n                    data = json.load(file)\n                    for key in data:\n                        for prefix in PREFIXES:\n                            if key.startswith(prefix):\n                                prefix_counts[prefix] += 1\n                except json.JSONDecodeError:\n                    print(f\"Error decoding JSON in file {filename}, skipping.\")\n    \n    return prefix_counts"}
{"task_id": "BigCodeBench/744", "solution": "import nltk\nfrom collections import Counter\nfrom string import punctuation\nimport pandas as pd\ndef task_func(text):\n    if not isinstance(text, str):\n        raise ValueError(\"Input text must be a string.\")\n    \n    # Tokenize the text into words\n    words = nltk.word_tokenize(text)\n    \n    # Filter words that start with \"$\" and are not purely punctuation\n    valid_words = [word for word in words if word.startswith('$') and not all(char in punctuation for char in word)]\n    \n    # Count the frequency of each valid word\n    word_counts = Counter(valid_words)\n    \n    # Convert the Counter object to a DataFrame\n    df = pd.DataFrame(list(word_counts.items()), columns=['Word', 'Frequency'])\n    \n    return df"}
{"task_id": "BigCodeBench/745", "solution": "import subprocess\nimport random\nSCRIPTS = ['script1.sh', 'script2.sh', 'script3.sh']\nSCRIPTS_DIR = '/path/to/scripts'\ndef task_func():\n    \"\"\"\n    Run a random bash script from a list of scripts.\n\n    Parameters:\n    - None\n\n    Returns:\n    - script_path (str): The full path of the script that was executed.\n\n    Requirements:\n    - subprocess\n    - random\n\n    Example:\n    >>> task_func()  # This will return a path like '/path/to/scripts/script2.sh'\n    \"\"\"\n    # Generate the full path for each script\n    full_paths = [SCRIPTS_DIR + '/' + script for script in SCRIPTS]\n    \n    # Choose a random script\n    chosen_script = random.choice(full_paths)\n    \n    # Attempt to execute the script\n    try:\n        subprocess.run([chosen_script], check=True, shell=True)\n    except subprocess.CalledProcessError as e:\n        print(f\"Error executing script: {e}\")\n    \n    return chosen_script"}
{"task_id": "BigCodeBench/746", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target_column, target_values=None):\n    if not isinstance(df, pd.DataFrame) or not isinstance(target_column, str) or (target_values is not None and not hasattr(target_values, '__iter__')):\n        raise ValueError(\"Invalid input: df must be a DataFrame, target_column a string, and target_values an array-like if provided.\")\n    \n    # If target_values is specified, replace non-target values with zeros in all columns except target_column\n    if target_values is not None:\n        for col in df.columns:\n            if col != target_column:\n                df[col] = np.where(df[col].isin(target_values), df[col], 0)\n    \n    # Perform linear regression\n    X = df.drop(columns=[target_column])\n    y = df[target_column]\n    \n    # Ensure the model can be trained even with zero variance data\n    if X.var(axis=1).all():\n        model = LinearRegression()\n        model.fit(X, y)\n    else:\n        raise ValueError(\"The input data has zero variance, cannot perform linear regression.\")\n    \n    return model"}
{"task_id": "BigCodeBench/747", "solution": "import re\nimport math\ndef task_func(s):\n    '''\n    Count the number of integers and floating-point numbers in a comma-separated string and calculate the sum of their square roots.\n\n    Parameters:\n    - s (str): The comma-separated string.\n\n    Returns:\n    - count (int): The number of integers and floats in the string.\n    - sqrt_sum (float): The sum of the square roots of the integers and floats.\n    '''\n    # Find all matches of integers and floats in the string\n    matches = re.findall(r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\", s)\n    \n    count = len(matches)  # Count the numbers found\n    \n    sqrt_sum = sum(math.sqrt(float(num)) for num in matches)  # Sum of square roots\n    \n    return count, sqrt_sum\ns = '1,2,3.5,abc,4,5.6'"}
{"task_id": "BigCodeBench/748", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, age, weight):\n    # Check if required columns exist\n    required_columns = ['Age', 'Weight']\n    if not all(column in df.columns for column in required_columns):\n        raise KeyError(\"Input DataFrame must contain 'Age' and 'Weight' columns.\")\n\n    # Filter the DataFrame based on age and weight criteria\n    filtered_df = df[(df['Age'] < age) & (df['Weight'] > weight)]\n    \n    # If filtering results in an empty DataFrame, return it as is\n    if filtered_df.empty:\n        return filtered_df\n\n    # Select only numerical columns for standardization\n    numerical_cols = filtered_df.select_dtypes(include='number').columns.tolist()\n    \n    # Initialize StandardScaler and fit-transform the numerical columns\n    scaler = StandardScaler()\n    scaled\u6570\u503c = scaler.fit_transform(filtered_df[numerical_cols])\n    \n    # Create a new DataFrame with scaled values and original non-numerical columns\n    scaled_df = pd.DataFrame(scaled\u6570\u503c, columns=numerical_cols, index=filtered_df.index)\n    scaled_df.update(filtered_df.drop(numerical_cols, axis=1))  # Keep non-numerical columns as they are\n    \n    return scaled_df"}
{"task_id": "BigCodeBench/749", "solution": "from sklearn.preprocessing import MinMaxScaler\nimport numpy as np\ndef task_func(myList):\n    \"\"\"\n    Normalize a list of numeric values to the range [0, 1] using min-max scaling.\n\n    Parameters:\n    - myList (list): List of numerical values to normalize.\n\n    Returns:\n    - ndarray: An array of normalized values.\n\n    Example:\n    >>> myList = [10, 20, 30, 40, 50]\n    >>> task_func(myList)\n    array([0.  , 0.25, 0.5 , 0.75, 1.  ])\n    \"\"\"\n    # Convert the list to a numpy array for compatibility with MinMaxScaler\n    data_array = np.array(myList).reshape(-1, 1)\n    \n    # Initialize the MinMaxScaler and fit-transform the data\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data_array)\n    \n    # Return the normalized data as a numpy array\n    return normalized_data.flatten()"}
{"task_id": "BigCodeBench/750", "solution": "import pandas as pd\nimport numpy as np\nfrom statsmodels.api import OLS\ndef task_func(df: pd.DataFrame, height: int, weight: int, columns: list) -> OLS:\n    \"\"\"\n    The function is defined as per the problem statement.\n    \"\"\"\n    # Check if DataFrame is empty\n    if df.empty:\n        return None\n    \n    # Filter DataFrame based on the conditions\n    filtered_df = df[(df[columns[1]] > height) & (df[columns[2]] < weight)]\n    \n    # Check if any rows remain after filtering\n    if filtered_df.empty:\n        return None\n    \n    # Define dependent variable (y) and independent variables (X)\n    y = filtered_df[columns[0]]\n    X = filtered_df[columns[1:]]\n    \n    # Add a constant to X for the intercept term in regression\n    X = sm.add_constant(X)\n    \n    # Perform OLS regression\n    model = OLS(y, X).fit()\n    \n    return model"}
{"task_id": "BigCodeBench/751", "solution": "import random\nfrom collections import Counter\ndef task_func(values, weights, n_samples):\n    \"\"\"\n    Sample random numbers based on a given weighted distribution and return a histogram of the samples.\n\n    Parameters:\n    - values (list): List of values to be sampled from.\n    - weights (list): List of weights corresponding to the values.\n    - n_samples (int): Number of samples to be drawn.\n\n    Returns:\n    - histogram (dict): A histogram as a dictionary with the values as keys and counts as values.\n    \"\"\"\n    # Ensure the weights and values lists are of the same length\n    if len(values) != len(weights):\n        raise ValueError(\"The 'values' and 'weights' lists must have the same length.\")\n    \n    # Normalize the weights to sum up to 1 for a proper probability distribution\n    total_weight = sum(weights)\n    probabilities = [weight / total_weight for weight in weights]\n    \n    # Sample 'n_samples' times based on the probabilities\n    samples = [random.choices(values, probabilities)[0] for _ in range(n_samples)]\n    \n    # Create a histogram using Counter\n    histogram = Counter(samples)\n    \n    return histogram"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state=0) -> float:\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a DataFrame\")\n    if data.empty:\n        raise ValueError(\"data cannot be empty\")\n    if target_column not in data.columns:\n        raise ValueError(f\"{target_column} is not a column in data\")\n    if not np.issubdtype(data.dtypes[target_column], np.number):\n        raise ValueError(\"Target column must contain numeric values\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer\")\n    if not (0 <= test_size <= 1):\n        raise ValueError(\"test_size must be between 0 and 1\")\n\n    # Split the data into features (X) and target (y)\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n\n    # Check if all data are numeric for compatibility with Linear Regression\n    if not np.issubdtype(X.dtypes, np.number).all():\n        raise ValueError(\"All columns in data must contain numeric values\")\n\n    # Split the dataset into training set and test set\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    # Create a Linear Regression model and train it\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Return the score of the model on the test set\n    return model.score(X_test, y_test)"}
{"task_id": "BigCodeBench/753", "solution": "import math\nimport random\nimport statistics\nRADIUS = 5\ndef task_func(n):\n    \"\"\"\n    Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\n\n    Parameters:\n    - n (int): The number of points to be generated.\n\n    Returns:\n    - float: The average distance from the center of the circle.\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(100)\n    3.2406\n    >>> task_func(50)\n    3.4443\n    \"\"\"\n    # Generate n random points within the circle\n    points = [(random.uniform(-RADIUS, RADIUS), random.uniform(-RADIUS, RADIUS)) for _ in range(n)]\n    \n    # Calculate the distance of each point from the center (0,0)\n    distances = [math.sqrt(x**2 + y**2) for x, y in points]\n    \n    # Return the average distance\n    return statistics.mean(distances)"}
{"task_id": "BigCodeBench/754", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n    \"\"\"\n    The function provided as described.\n    \"\"\"\n    # Extract 'from_user' values and filter out non-numeric entries\n    from_user_values = [d.get('from_user') for d in result if isinstance(d.get('from_user'), (int, float))]\n    \n    # Check if there are any numeric 'from_user' values\n    if not from_user_values:\n        # If no numeric values, return a Series with NaNs and current time\n        return pd.Series({\n            'mean': np.nan, 'median': np.nan, 'min': np.nan, 'max': np.nan, 'std': np.nan,\n            'current_time': datetime.now().strftime(DATE_FORMAT)\n        })\n    \n    # Convert to numpy array for computations\n    from_user_values = np.array(from_user_values)\n    \n    # Check if all values are numeric\n    if not np.issubdtype(from_user_values.dtype, np.number):\n        raise ValueError(\"All 'from_user' values must be numeric.\")\n    \n    # Calculate statistics\n    stats = {\n        'mean': np.mean(from_user_values),\n        'median': np.median(from_user_values),\n        'min': np.min(from_user_values),\n        'max': np.max(from_user_values),\n        'std': np.std(from_user_values),\n        'current_time': datetime.now().strftime(DATE_FORMAT)\n    }\n    \n    return pd.Series(stats)\nresult = [{\"hi\": 7, \"bye\": 4, \"from_user\": 0}, {\"from_user\": 0}, {\"from_user\": 1}]"}
{"task_id": "BigCodeBench/755", "solution": "import os\nimport glob\ndef task_func(directory_path):\n    \"\"\"\n    Reverse the order of words in all the filenames of a directory, where words are separated by periods.\n    \n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - new_filenames (list[str]): A list of new filenames after renaming.\n\n    \"\"\"\n    # Get a list of all filenames in the directory\n    filenames = glob.glob(os.path.join(directory_path, '*'))\n    \n    # Reverse the order of words in each filename\n    new_filenames = []\n    for filename in filenames:\n        # Split the filename into parts by period\n        parts = filename.split(os.path.sep)[-1].split('.')\n        # Reverse the parts list\n        reversed_parts = parts[::-1]\n        # Join them back into a new filename\n        new_filename = '.'.join(reversed_parts)\n        new_filenames.append(new_filename)\n    \n    return new_filenames"}
{"task_id": "BigCodeBench/756", "solution": "import shutil\nfrom pathlib import Path\nfrom typing import List\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n    '''\n    # Validate if source and target directories exist\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory '{source_dir}' does not exist.\")\n    if not Path(target_dir).exists():\n        raise ValueError(f\"Target directory '{target_dir}' does not exist.\")\n        \n    moved_count = 0\n    target_path = Path(target_dir)\n    \n    # Iterate over the files in the source directory\n    for file_path in Path(source_dir).glob(\"**/*\"):\n        # Check if the file has an extension that needs to be moved\n        if file_path.suffix[1:] in extensions:\n            # Create target directory if it doesn't exist\n            target_path.mkdir(parents=True, exist_ok=True)\n            # Move the file\n            shutil.move(str(file_path), str(target_path / file_path.name))\n            moved_count += 1\n            \n    return moved_count"}
{"task_id": "BigCodeBench/757", "solution": "import numpy as np\ndef task_func(arr):\n    \"\"\"\n    Reverse the order of words separated by \".\" in all strings of a numpy array.\n\n    Parameters:\n    - arr (numpy array): The numpy array.\n\n    Returns:\n    - numpy.ndarray: The numpy array with the strings reversed.\n\n    Example:\n    >>> arr = np.array(['apple.orange', 'red.green.yellow'])\n    >>> reversed_arr = task_func(arr)\n    >>> print(reversed_arr)\n    ['orange.apple' 'yellow.green.red']\n    \"\"\"\n    # Using list comprehension for efficiency\n    reversed_arr = np.array(['. '.join(word[::-1] for word in s.split('. ')) for s in arr])\n    # Splitting by '. ' ensures that each word is reversed individually, then rejoined in reverse order\n    return reversed_arr"}
{"task_id": "BigCodeBench/758", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(num_samples, countries=['Russia', 'China', 'USA', 'India', 'Brazil'], \n           ages=np.arange(18, 60), genders=['Male', 'Female'], rng_seed=None):\n    if not isinstance(num_samples, int):\n        raise ValueError(\"num_samples must be an integer.\")\n    \n    # Initialize the random number generator\n    rng = np.random.default_rng(rng_seed)\n    \n    # Randomly sample countries, ages, and genders\n    country_samples = rng.choice(countries, size=num_samples)\n    age_samples = rng.choice(ages, size=num_samples)\n    gender_samples = rng.choice(genders, size=num_samples)\n    \n    # Encode genders using LabelEncoder\n    le = LabelEncoder()\n    gender_encoded = le.fit_transform(gender_samples)\n    \n    # Create a DataFrame\n    demographics_df = pd.DataFrame({\n        'Country': country_samples,\n        'Age': age_samples,\n        'Gender': gender_encoded\n    })\n    \n    return demographics_df"}
{"task_id": "BigCodeBench/759", "solution": "import os\nimport shutil\nimport fnmatch\ndef task_func(source_directory, destination_directory, file_pattern):\n    \"\"\"\n    Moves all files that match a particular pattern from one directory to another.\n    \"\"\"\n    moved_files = []\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n    \n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            if fnmatch.fnmatch(file, file_pattern):\n                source_file_path = os.path.join(root, file)\n                destination_file_path = os.path.join(destination_directory, file)\n                shutil.move(source_file_path, destination_file_path)\n                moved_files.append(destination_file_path)\n    \n    return moved_files"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport random\ndef correct_latin_names(name):\n    \"\"\"Corrects improperly encoded Latin characters.\"\"\"\n    return codecs.decode(name, 'unicode_escape')\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    np.random.seed(rng_seed)\n    \n    # Combine names and correct Latin names\n    all_names = [correct_latin_names(name) for name in latin_names] + other_names\n    \n    # Generate random dates\n    start = datetime(start_year, 1, 1)\n    end = datetime(end_year, 12, 31)\n    dates = [start + timedelta(days=random.randint(0, (end - start).days)) for _ in range(100)]\n    \n    # Generate IDs\n    ids = np.arange(1, 101)\n    \n    # Generate emails\n    emails = [f\"{name.lower().replace(' ', '')}{date.year}@{email_domain}\" for name, date in zip(all_names, dates)]\n    \n    # Create DataFrame\n    df = pd.DataFrame({\n        'ID': ids,\n        'Name': all_names,\n        'Date of Birth': dates,\n        'Email': emails\n    })\n    \n    return df"}
{"task_id": "BigCodeBench/761", "solution": "import json\nimport re\nfrom collections import Counter\nREPLACE_NONE = \"None\"\ndef task_func(json_str):\n    \"\"\"\n    Process a JSON string by:\n    1. Removing None values.\n    2. Counting the frequency of each unique value.\n    3. Replacing all email addresses with the placeholder \"None\".\n    \n    Parameters:\n    json_str (str): The JSON string to be processed.\n    \n    Returns:\n    dict: A dictionary containing:\n        - \"data\": Processed JSON data.\n        - \"value_counts\": A Counter object with the frequency of each unique value.\n    \"\"\"\n    # Function to clean and replace email addresses\n    def replace_emails(value):\n        return re.sub(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', REPLACE_NONE, str(value))\n\n    # Load JSON data\n    data = json.loads(json_str)\n    \n    # Remove None values and replace emails\n    processed_data = {k: replace_emails(v) for k, v in data.items() if v is not None}\n    \n    # Count the frequency of each unique value after processing\n    value_counts = Counter(processed_data.values())\n    \n    return {\"data\": processed_data, \"value_counts\": value_counts}\njson_str = '{\"name\": \"John\", \"age\": null, \"email\": \"john@example.com\"}'"}
{"task_id": "BigCodeBench/762", "solution": "import codecs\nimport os\nimport zipfile\ndef task_func(directory_name=\"latin_files\",\n              content='Sopet\u00f3n',\n              file_names=['file1.txt', 'file2.txt', 'file3.txt'],\n              encoding=\"latin-1\"):\n    '''\n    The function to create a directory, write encoded content to specified txt files, and zip the directory.\n    '''\n    # Create directory\n    if not os.path.exists(directory_name):\n        os.makedirs(directory_name)\n\n    # Write content to each file with specified encoding\n    for file_name in file_names:\n        file_path = os.path.join(directory_name, file_name)\n        with codecs.open(file_path, 'w', encoding=encoding) as file:\n            file.write(content)\n\n    # Zip the directory\n    zip_file_name = directory_name + '.zip'\n    with zipfile.ZipFile(zip_file_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for root, dirs, files in os.walk(directory_name):\n            for file in files:\n                zipf.write(os.path.join(root, file))\n\n    return zip_file_name"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\ndef task_func(input_file, output_file):\n    \"\"\"\n    Read a list of dictionaries from a JSON file, calculate the mean and median for each key, and write the results to a CSV file.\n    \n    Parameters:\n    - input_file (str): The input JSON file name.\n    - output_file (str): The output CSV file name.\n\n    Returns:\n    - dict: A dictionary where each key is a field from the input JSON and each value is another dictionary with the mean and median of that field.\n    \"\"\"\n    # Load data from JSON file\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    \n    # Initialize defaultdict for results\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    \n    # Collect data for each key\n    for record in data:\n        for key, value in record.items():\n            if isinstance(value, (int, float)):  # Ensure the value is numeric\n                stats[key]['mean'] = stats[key].get('mean', 0) + value\n                stats[key]['count'] = stats[key].get('count', 0) + 1\n    \n    # Calculate mean and median\n    for key, values in stats.items():\n        if values.get('count', 0) > 0:\n            values['mean'] /= values['count']\n            values['median'] = np.median([record[key] for record in data if key in record])\n    \n    # Write results to CSV\n    with open(output_file, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Field', 'Mean', 'Median'])\n        for field, stats in stats.items():\n            writer.writerow([field, stats['mean'], stats['median']])\n    \n    # Return the dictionary of statistics\n    return {field: {'mean': stats['mean'], 'median': stats['median']} for field, stats in stats.items()}"}
{"task_id": "BigCodeBench/764", "solution": "import csv\nimport random\ndef task_func(csv_file='names.csv', \n              latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n              names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'],\n              encoding='latin-1', rng_seed=None):\n    if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, list) or not isinstance(names, list):\n        raise TypeError(\"latin_names and names must be lists\")\n    \n    if rng_seed is not None:\n        random.seed(rng_seed)\n    \n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        fieldnames = ['Name', 'Age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        \n        writer.writeheader()\n        for _ in range(50):\n            name = random.choice(latin_names + names)\n            age = random.randint(20, 50)\n            writer.writerow({'Name': name, 'Age': age})\n            if len(latin_names) > 0 and len(names) > 0:\n                # Alternate between Latin and English names\n                if latin_names:\n                    latin_names.pop(latin_names.index(name))\n                if names:\n                    names.pop(names.index(name))\n                    \n    return csv_file"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    \"\"\"\n    Process files from a dictionary by checking if the file exists, and if it has content, then copies it to a target directory.\n    \"\"\"\n    # Ensure the target directory exists\n    target_path = Path(target_dir)\n    target_path.mkdir(parents=True, exist_ok=True)\n    \n    copied_files = []\n    \n    for file_path, content in kwargs.items():\n        # Check if the file exists and has content\n        if content is not None and content.strip():\n            file_path = Path(file_path)\n            # If the file exists and is supposed to be copied based on content\n            if file_path.exists():\n                # Create a new file path in the target directory\n                new_file_path = target_path / file_path.name\n                # Write the content to the new file (overwrites if exists)\n                with new_file_path.open('w') as file:\n                    file.write(content)\n                copied_files.append(str(new_file_path))\n            else:\n                print(f\"Warning: File {file_path} does not exist.\")\n        else:\n            print(f\"Skipped: {file_path} either has no content or is None.\")\n    \n    return copied_files"}
{"task_id": "BigCodeBench/766", "solution": "import re\nimport collections\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a str.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"All patterns must be of type str.\")\n    \n    pattern_counts = collections.defaultdict(int)\n    \n    for pattern in patterns:\n        # Using re.findall to count occurrences of each pattern\n        matches = re.findall(r'(?={})'.format(re.escape(pattern)), string)\n        pattern_counts[pattern] = len(matches)\n    \n    return dict(pattern_counts)"}
{"task_id": "BigCodeBench/767", "solution": "from collections import Counter\nimport random\nimport string\nLETTERS = string.ascii_letters\ndef task_func(list_of_lists):\n    \"\"\"\n    If you have a nested list, replace each sublist with a random letter and return a count of each letter in the final list.\n\n    Parameters:\n    - list_of_lists (list): A nested list.\n\n    Returns:\n    - dict: A dictionary containing count of each letter in the list.\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func([['Pizza', 'Burger'], ['Pizza', 'Coke'], ['Pasta', 'Coke']])\n    {'O': 1, 'h': 1, 'b': 1}\n    \"\"\"\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Replace each item with a random letter\n    random_letters = [random.choice(LETTERS) for _ in flattened_list]\n    \n    # Count the occurrences of each letter\n    letter_count = Counter(random_letters)\n    \n    return letter_count"}
{"task_id": "BigCodeBench/768", "solution": "import re\nimport os\nimport glob\ndef task_func(dir_path):\n    if not os.path.isdir(dir_path):\n        raise ValueError(f\"Directory in {dir_path} does not exist.\")\n    \n    file_occurrences = {}\n    # Use glob to find all .txt files in directory and subdirectories\n    for file_path in glob.glob(os.path.join(dir_path, '**', '*.txt'), recursive=True):\n        with open(file_path, 'r', encoding='utf-8') as file:\n            # Read the file and search for \"error\" ignoring case\n            content = file.read().lower()\n            count = len(re.findall(r'\\berror\\b', content))\n            # Store the count in the dictionary with the relative path as key\n            relative_path = os.path.relpath(file_path, dir_path)\n            file_occurrences[relative_path] = count\n            \n    return file_occurrences"}
{"task_id": "BigCodeBench/769", "solution": "from collections import Counter\nimport itertools\nimport operator\ndef task_func(list_of_menuitems):\n    \"\"\"\n    Faced with a nested list of menu items, flatten the list and return the most common menu item.\n\n    Parameters:\n    - list_of_menuitems (list): A nested list of menu items.\n\n    Returns:\n    - str: The most common menu item.\n    \"\"\"\n    # Flatten the nested list\n    flat_list = list(itertools.chain.from_iterable(list_of_menuitems))\n    \n    # Count the frequency of each menu item\n    item_counts = Counter(flat_list)\n    \n    # Find the most common menu item\n    most_common_item = item_counts.most_common(1)\n    \n    return most_common_item[0][0] if most_common_item else None"}
{"task_id": "BigCodeBench/770", "solution": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(num_samples=500, noise_strength=1, random_seed=None, test_size=0.2):\n    if test_size < 0.2:\n        raise ValueError(\"Test set size should be at least 0.2 to ensure model evaluation.\")\n    \n    # Set the random seed for reproducibility\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    \n    # Generate the feature (X) as random samples\n    X = np.random.rand(num_samples, 1)\n    \n    # Generate the target (y) using a linear relation with a random slope and intercept\n    # and then add noise to it\n    slope = np.random.rand()\n    intercept = np.random.rand()\n    y = slope * X.flatten() + intercept + noise_strength * np.random.randn(num_samples)\n    \n    # Split the dataset into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_seed)\n    \n    # Ensure the test set size is at least 2 for the model to be trained and evaluated\n    if len(y_test) < 2:\n        raise ValueError(\"Test set size is too small after split. Adjust num_samples or test_size.\")\n    \n    # Train a Linear Regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Calculate the R-squared score on the test set\n    r_squared = model.score(X_test, y_test)\n    \n    return r_squared, model"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n    \"\"\"\n    Processes CSV files in a directory based on a specified pattern and creates new files with altered names while preserving the content.\n    \n    Parameters:\n    - directory (str): The path to the directory containing the CSV files to be processed.\n    - pattern (str, optional): A regular expression pattern that the filenames of interest should match.\n    \n    Returns:\n    - new_files (list): A list of strings, where each string is the filename of a new CSV file created by the function.\n    \"\"\"\n    new_files = []\n    for path in Path(directory).iterdir():\n        if path.is_file() and re.match(pattern, path.name):\n            new_name = re.sub(r'-\\d+', '', path.name)\n            new_path = path.with_name(new_name)\n            with open(path, 'r', newline='') as infile, open(new_path, 'w', newline='') as outfile:\n                reader = csv.reader(infile)\n                writer = csv.writer(outfile)\n                writer.writerows(reader)\n            new_files.append(new_path.name)\n    return new_files"}
{"task_id": "BigCodeBench/772", "solution": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\ndef task_func(num_samples=1000, k=5, d=2, random_seed=None):\n    \"\"\"\n    The function implementation is described in the provided problem description.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n        \n    # Generate random data\n    X = np.random.randn(num_samples, 1)\n    \n    # Apply linear transformation\n    X_transformed = k * X + d\n    \n    # Standardize the transformed data\n    scaler = StandardScaler()\n    X_standardized = scaler.fit_transform(X_transformed)\n    \n    # Calculate the mean squared error between original and standardized data\n    # Note: Since the original data is generated and then transformed, \n    #       the MSE with the standardized data essentially measures how much\n    #       the transformation deviates from the mean and unit variance,\n    #       not the original data points themselves, due to the nature of standardization.\n    mse = mean_squared_error(X_transformed, X_standardized)\n    \n    return mse"}
{"task_id": "BigCodeBench/773", "solution": "import os\nimport re\nimport shutil\nSOURCE_DIR = '/source/dir'\nTARGET_DIR = '/target/dir'\nFILE_PATTERN = re.compile(r'^(.*?)-\\d+\\.json$')\ndef task_func():\n    \"\"\"\n    Move all json files in a source directory to a target directory and rename them by splitting the filename the last time \"-\" occurs and keeping the prefix part of the filename.\n    \n    Parameters:\n    - None\n\n    Returns:\n    - None\n    \"\"\"\n    # Ensure the target directory exists\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    for filename in os.listdir(SOURCE_DIR):\n        # Check if the file matches the pattern\n        match = FILE_PATTERN.match(filename)\n        if match:\n            # Construct the new filename\n            new_filename = match.group(1) + \".json\"\n            # Full paths for source and target files\n            src_file = os.path.join(SOURCE_DIR, filename)\n            target_file = os.path.join(TARGET_DIR, new_filename)\n            \n            # Move the file and rename it\n            shutil.move(src_file, target_file)\n            print(f\"Moved and renamed {filename} to {new_filename}\")"}
{"task_id": "BigCodeBench/774", "solution": "import numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\ndef task_func(num_samples=100, n_estimators=100, random_seed=None, cv=5):\n    if num_samples // cv < 2:\n        raise ValueError(\"num_samples should be at least twice as large as cv to ensure each fold has data.\")\n    \n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n    \n    # Generate the dataset\n    features = np.random.randn(num_samples, 5)\n    target = np.sum(features, axis=1) + np.random.randn(num_samples)\n    \n    # Initialize the RandomForestRegressor\n    model = RandomForestRegressor(n_estimators=n_estimators, random_state=random_seed)\n    \n    # Perform cross-validation\n    scores = cross_val_score(model, features, target, cv=cv)\n    \n    # Return the mean cross-validation score and the trained model\n    return scores.mean(), model"}
{"task_id": "BigCodeBench/775", "solution": "from string import ascii_lowercase\nimport re\nfrom collections import Counter\nLETTERS_PATTERN = re.compile(r'^(.*?)-[a-z]$')\nLETTERS = ascii_lowercase\ndef task_func(string):\n    \"\"\"\n    If a string occurs, divide it the last time \"-\" occurs and count the frequency of each lowercase letter in the prefix of the string.\n    \n    Parameters:\n    - string (str): The input string.\n\n    Returns:\n    - dict: A dictionary with the frequency of each lowercase letter.\n    \"\"\"\n    # Extract the prefix before the last hyphen\n    match = LETTERS_PATTERN.match(string)\n    if match:\n        prefix = match.group(1)\n    else:\n        prefix = string  # If no hyphen, consider the whole string as the prefix\n\n    # Count the frequency of each lowercase letter in the prefix\n    letter_counts = Counter(prefix.lower())\n\n    # Ensure all letters are accounted for, initializing count to 0 if not present\n    full_counts = {letter: count for letter, count in zip(LETTERS, [letter_counts[letter] for letter in LETTERS])}\n    \n    return full_counts"}
{"task_id": "BigCodeBench/776", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(file_path, output_path=None, sort_key='title', linear_regression=False, x_column=None, y_column=None):\n    try:\n        # Load the data\n        df = pd.read_csv(file_path)\n        \n        # Check if columns for linear regression exist\n        if linear_regression and (x_column not in df.columns or y_column not in df.columns):\n            raise ValueError(\"Specified columns for linear_regression do not exist in the dataframe.\")\n        \n        # Sort the dataframe\n        df_sorted = df.sort_values(by=sort_key)\n        \n        # Perform Linear Regression if required\n        if linear_regression:\n            model = LinearRegression()\n            model.fit(df_sorted[x_column].values.reshape(-1,1), df_sorted[y_column].values.reshape(-1,1))\n            return model\n        \n        # Save the sorted dataframe to a new file if output_path is provided\n        if output_path:\n            df_sorted.to_csv(output_path, index=False)\n            return f\"Data sorted and saved to {output_path}\"\n        \n        # Return the sorted dataframe if no output_path is provided and linear_regression is False\n        return df_sorted\n    \n    except Exception as e:\n        raise Exception(f\"An error occurred: {str(e)}\")"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip all zip files in a directory whose name matches a certain pattern by splitting the filename the last time \"-\" occurs and using the prefix part of the filename as the directory to extract.\n    \n    Parameters:\n    - directory (str): The directory where the zip files are located.\n    - pattern (str): Regex pattern to match zip files.\n\n    Returns:\n    - list: A list of directories where the files were extracted.\n    \"\"\"\n    extracted_dirs = []\n\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename):\n            # Extract the prefix part of the filename\n            prefix = re.match(pattern, filename).group(1)\n            extract_dir = os.path.join(directory, prefix)\n            \n            # Create the directory if it doesn't exist\n            if not os.path.exists(extract_dir):\n                os.makedirs(extract_dir)\n            \n            # Construct the full path to the zip file and extract it\n            zip_path = os.path.join(directory, filename)\n            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n            \n            extracted_dirs.append(extract_dir)\n\n    return extracted_dirs"}
{"task_id": "BigCodeBench/778", "solution": "from collections import defaultdict\nfrom operator import itemgetter\ndef task_func(news_articles):\n    # Validate the keys in each article dictionary\n    for article in news_articles:\n        if set(article.keys()) != {'title', 'title_url', 'id', 'category'}:\n            raise ValueError(\"Each article dictionary must contain exactly 'title', 'title_url', 'id', and 'category' keys.\")\n    \n    # Sort articles by 'category' and then by 'title'\n    sorted_articles = sorted(news_articles, key=itemgetter('category', 'title'))\n    \n    # Group articles by 'category' using defaultdict\n    grouped_articles = defaultdict(list)\n    for category, articles_in_category in groupby(sorted_articles, key=itemgetter('category')):\n        grouped_articles[category].extend(list(articles_in_category))\n    \n    return grouped_articles"}
{"task_id": "BigCodeBench/779", "solution": "import os\nimport shutil\nimport time\nBACKUP_DIR = '/tmp/backup'\ndef get_unique_backup_dir():\n    timestamp = time.strftime('%Y%m%d%H%M%S')\n    return os.path.join(BACKUP_DIR, f'backup_{timestamp}')\ndef task_func(directory):\n    \"\"\"\n    Create a backup of a directory and clean the directory afterwards.\n    \n    Parameters:\n    - directory (str): The directory path to be backed up and cleaned.\n    \n    Returns:\n    tuple: A tuple containing:\n        - str: The backup directory path.\n        - list: A list of any errors encountered during the operation (empty list if no errors).\n    \"\"\"\n    try:\n        # Ensure backup directory exists\n        if not os.path.exists(BACKUP_DIR):\n            os.makedirs(BACKUP_DIR)\n        \n        # Create a unique backup directory\n        backup_dir = get_unique_backup_dir()\n        \n        # Create the backup\n        shutil.make_archive(backup_dir, 'zip', directory)\n        \n        # Attempt to clean the directory (assuming \"cleaning\" means emptying it)\n        # However, for safety in this example, we comment out the deletion part\n        # shutil.rmtree(directory)  # Uncomment this line if you actually want to delete the directory content\n        \n        return backup_dir, []\n    \n    except Exception as e:\n        return backup_dir, [str(e)]"}
{"task_id": "BigCodeBench/780", "solution": "import pandas as pd\nimport pytz\ndef task_func(articles, timezone):\n    # Validate input\n    if not articles or not all(isinstance(article, dict) for article in articles):\n        raise ValueError(\"articles must be a non-empty list of dictionaries.\")\n    required_keys = {'title', 'title_url', 'id', 'category', 'published_time'}\n    if not all(required_keys.issubset(article.keys()) for article in articles):\n        raise ValueError(\"Each article dictionary must contain 'title', 'title_url', 'id', 'category', and 'published_time' keys.\")\n    \n    # Convert published_time to the specified timezone\n    for article in articles:\n        article['published_time'] = article['published_time'].astimezone(pytz.timezone(timezone))\n    \n    # Extract hour from the publication time\n    for article in articles:\n        article['hour'] = article['published_time'].hour\n    \n    # Create DataFrame\n    df = pd.DataFrame(articles)\n    \n    # Group by category and calculate statistics on the hour\n    analysis_df = df.groupby('category')['hour'].agg(['count', 'mean', 'min', 'max'])\n    \n    return analysis_df"}
{"task_id": "BigCodeBench/781", "solution": "import os\nfrom datetime import datetime\ndef task_func(filepath: str) -> dict:\n    \"\"\"\n    Determine the size and date of the last modification of a file.\n\n    Parameters:\n    - filepath (str): The path to the file.\n\n    Returns:\n    - dict: A dictionary containing the size (in bytes) and last modification \n          date of the file in the format '%Y-%m-%d %H:%M:%S'.\n    \"\"\"\n    if not os.path.isfile(filepath):\n        return {'size': 'File not found', 'last_modified': 'File not found'}\n\n    file_stats = os.stat(filepath)\n    size = f\"{file_stats.st_size} bytes\"\n    last_modified = datetime.fromtimestamp(file_stats.st_mtime).strftime('%Y-%m-%d %H:%M:%S')\n\n    return {'size': size, 'last_modified': last_modified}"}
{"task_id": "BigCodeBench/782", "solution": "import random\nimport pandas as pd\nimport numpy as np\ndef task_func(n, domain=\"samplewebsite.com\", categories=['Sports', 'Technology', 'Health', 'Science', 'Business'], random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n        np.random.seed(random_seed)\n    \n    # Generate random articles\n    titles = [f\"Article {i}\" for i in range(n)]\n    ids = list(range(n))\n    \n    # Randomly assign categories\n    category_choices = np.random.choice(categories, size=n)\n    \n    # Generate views from a Poisson distribution with lambda=1000\n    views = np.random.poisson(lam=1000, size=n)\n    \n    # Create URLs\n    title_urls = [f\"{domain}/Article_{i}\" for i in range(n)]\n    \n    # Combine into a DataFrame\n    df = pd.DataFrame({\n        'title': titles,\n        'title_url': title_urls,\n        'id': ids,\n        'category': category_choices,\n        'views': views\n    })\n    \n    return df"}
{"task_id": "BigCodeBench/783", "solution": "import os\nimport shutil\ndef task_func(src_dir, dest_dir, extension):\n    \"\"\"\n    Move all files with a particular extension from one directory to another.\n\n    Parameters:\n    - src_dir (str): The source directory.\n    - dest_dir (str): The destination directory.\n    - extension (str): The file extension.\n\n    Returns:\n    - files_moved (int): The number of files moved.\n    \"\"\"\n    # Ensure the destination directory exists\n    if not os.path.exists(dest_dir):\n        os.makedirs(dest_dir)\n    \n    files_moved = 0\n    for filename in os.listdir(src_dir):\n        if filename.endswith(extension):\n            src_file = os.path.join(src_dir, filename)\n            dest_file = os.path.join(dest_dir, filename)\n            shutil.move(src_file, dest_file)\n            files_moved += 1\n            \n    return files_moved"}
{"task_id": "BigCodeBench/784", "solution": "import pandas as pd\nimport random\nimport csv\ndef task_func(n, \n           categories=['Sports', 'Technology', 'Business', 'Politics', 'Entertainment'],\n           news_sites=['New York Times', 'USA Today', 'Apple News', 'CNN', 'BBC'],\n           likert_scale=['Strongly Disagree', 'Disagree', 'Neither Agree nor Disagree', 'Agree', 'Strongly Agree'],\n           file_path='news_survey_data.csv',\n           random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n    \n    # Map Likert scale to numerical values\n    likert_values = {response: index + 1 for index, response in enumerate(likert_scale)}\n    \n    # Generate random survey data\n    data = []\n    for _ in range(n):\n        site = random.choice(news_sites)\n        category = random.choice(categories)\n        response = random.choice(likert_scale)\n        value = likert_values[response]\n        data.append([site, category, response, value])\n    \n    # Write data to CSV\n    with open(file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Site', 'Category', 'Response', 'Value'])\n        writer.writerows(data)\n    \n    # Read data back into a DataFrame\n    df = pd.read_csv(file_path)\n    \n    return df"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\nimport shutil\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern and then delete the original files.\n    \n    Parameters:\n    - pattern (str): The pattern to match files.\n    \n    Returns:\n    - archive_file (str): The archive file path.\n    \n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - shutil\n    \n    Example:\n    >>> task_func('*.txt')\n    \n    Note: This function will return the archive file path and delete the original files after archiving.\n    \"\"\"\n    # Ensure the archive directory exists\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n    \n    # Find all files matching the pattern\n    files_to_archive = glob.glob(pattern)\n    \n    # Create a timestamp for the archive file name\n    timestamp = os.environ.get('DATE', lambda: subprocess.check_output(['date', '+%Y%m%d%H%M%S']).decode().strip())\n    archive_file = os.path.join(ARCHIVE_DIR, f'archive_{timestamp}.tar.gz')\n    \n    # Archive the files using tar\n    subprocess.run(['tar', '-czf', archive_file] + files_to_archive, check=True)\n    \n    # Delete the original files\n    for file in files_to_archive:\n        os.remove(file)\n    \n    return archive_file"}
{"task_id": "BigCodeBench/786", "solution": "import pandas as pd\nimport random\ndef task_func(n, countries=['USA', 'UK', 'China', 'India', 'Germany'], \n              products=['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], \n              output_path=None, random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n    \n    # Generate the sales data\n    sales_data = {\n        'Country': [random.choice(countries) for _ in range(n)],\n        'Product': [random.choice(products) for _ in range(n)],\n        'Sales': [random.randint(1, 100) for _ in range(n)]\n    }\n    \n    # Create a DataFrame\n    df = pd.DataFrame(sales_data)\n    \n    # Save to CSV if output_path is provided\n    if output_path:\n        df.to_csv(output_path, index=False)\n    \n    return df"}
{"task_id": "BigCodeBench/787", "solution": "import numpy as np\nfrom itertools import combinations\ndef task_func(array1, array2):\n    if len(array1) != len(array2):\n        raise ValueError(\"Input arrays must have the same length.\")\n    \n    # Generate all possible pairs of points\n    points = [(a, b) for a, b in combinations(zip(array1, array2), 2)]\n    \n    # Calculate Euclidean distance for each pair and find the maximum\n    max_distance = 0\n    for point1, point2 in points:\n        distance = np.sqrt(np.sum((np.array(point1) - np.array(point2))**2))\n        max_distance = max(max_distance, distance)\n    \n    return max_distance"}
{"task_id": "BigCodeBench/788", "solution": "import pandas as pd\nimport heapq\nfrom scipy import stats\ndef task_func(df, col1, col2, N=10):\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"Specified columns are not in the provided DataFrame.\")\n    if N <= 1:\n        raise ValueError(\"N must be greater than 1.\")\n    \n    # Calculate absolute differences\n    differences = df[col1] - df[col2]\n    \n    # Find the N largest differences and their indices\n    largest_diff_indices = heapq.nlargest(N, range(len(differences)), key=differences.__getitem__)\n    \n    # Extract elements with the largest differences\n    sample1 = df.loc[largest_diff_indices, col1]\n    sample2 = df.loc[largest_diff_indices, col2]\n    \n    # Perform t-Test\n    t_stat, p_value = stats.ttest_ind(sample1, sample2)\n    \n    return p_value"}
{"task_id": "BigCodeBench/789", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nARRAY_LENGTH = 10\ndef task_func():\n    \"\"\"\n    Generate a random array and apply min-max normalization (scaling) to transform the array values into a range between 0 and 1.\n\n    Parameters:\n    - None\n\n    Returns:\n    - scaled_array (numpy.ndarray): The normalized array.\n\n    Requirements:\n    - numpy\n    - sklearn\n\n    Example:\n    >>> task_func()\n    array([[0.57142857],\n           [0.14285714],\n           [0.71428571],\n           [0.28571429],\n           [0.57142857],\n           [1.        ],\n           [0.        ],\n           [0.57142857],\n           [0.71428571],\n           [0.28571429]])\n    \"\"\"\n    # Generate a random array\n    random_array = np.random.rand(ARRAY_LENGTH, 1)\n    \n    # Initialize MinMaxScaler\n    scaler = MinMaxScaler()\n    \n    # Apply min-max scaling\n    scaled_array = scaler.fit_transform(random_array)\n    \n    return scaled_array"}
{"task_id": "BigCodeBench/790", "solution": "import pandas as pd\nimport numpy as np\nimport heapq\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, col1, col2, N=10):\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"Columns {col1} or {col2} not found in the DataFrame.\")\n    \n    # Standardize the columns\n    scaler = StandardScaler()\n    scaled_df = pd.DataFrame(scaler.fit_transform(df[[col1, col2]]), columns=[col1, col2])\n    \n    # Calculate the absolute differences\n    diff = np.abs(scaled_df[col1] - scaled_df[col2])\n    \n    # Find the indices of the N largest differences\n    indices = heapq.nlargest(N, range(len(diff)), diff.take)\n    \n    return indices"}
{"task_id": "BigCodeBench/791", "solution": "from collections import Counter\nimport random\nfrom itertools import cycle\ndef task_func(l):\n    \"\"\"\n    Create a counter from a list \"l\" and move the first 3 elements to the end of the list.\n\n    Parameters:\n    - l (list): A list of elements that the function will process. \n\n    Returns:\n    - counter (collections.Counter): A frequency counter that maps elements from the input list to their frequencies in the first 30 elements of the cycled, shuffled list. \n    \n    Requirements:\n    - collections\n    - random\n    - itertools\n\n    Example:\n    >>> random.seed(42)\n    >>> task_func(ELEMENTS)\n    Counter({'I': 3, 'F': 3, 'G': 3, 'J': 3, 'E': 3, 'A': 3, 'B': 3, 'H': 3, 'D': 3, 'C': 3})\n    \"\"\"\n    # Shuffle the list and cycle it\n    shuffled_l = random.sample(l, len(l))\n    cycled_l = cycle(shuffled_l)\n    \n    # Move the first 3 elements to the end\n    moved_elements = [next(cycled_l) for _ in range(3)]\n    l = list(cycled_l) + moved_elements\n    \n    # Take the first 30 elements (or all if less than 30)\n    first_30_elements = l[:30]\n    \n    # Create a counter for these elements\n    counter = Counter(first_30_elements)\n    \n    return counter"}
{"task_id": "BigCodeBench/792", "solution": "import pandas as pd\nimport heapq\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, feature, target, n=10):\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(\"Specified columns are not in the provided DataFrame.\")\n    \n    # Fit the Linear Regression model\n    model = LinearRegression()\n    model.fit(df[[feature]], df[[target]])\n    \n    # Predict the target values\n    y_pred = model.predict(df[[feature]])\n    \n    # Compute residuals\n    residuals = df[[target]].values.ravel() - y_pred.ravel()\n    \n    # Find indices of the n largest residuals\n    indices_of_largest_residuals = heapq.nlargest(n, range(len(residuals)), residuals.__getitem__)\n    \n    return indices_of_largest_residuals, model"}
{"task_id": "BigCodeBench/793", "solution": "import numpy as np\nimport random\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l=None):\n    if l is None:\n        # Use a random subset of ELEMENTS if 'l' is not provided\n        l = random.sample(ELEMENTS, len(ELEMENTS))\n    \n    # Convert the list to a numpy array\n    arr = np.array(l)\n    \n    # Move the first 3 elements to the end\n    moved_elements = arr[:3]\n    arr = np.concatenate((arr[3:], moved_elements))\n    \n    return arr"}
{"task_id": "BigCodeBench/794", "solution": "import string\nimport random\nBRACKETS = \"(){}[]\"\ndef task_func(length, random_seed=None):\n    \"\"\"\n    Generate a random string of a given length, with each character being either\n    a parenthesis (from the set \"(){}[]\") \n    or a lowercase English character.\n    For function uses a optional random_seed when sampling characters.\n    \"\"\"\n    if random_seed is not None:\n        random.seed(random_seed)\n    \n    # Define the pool of characters to choose from: brackets + lowercase English letters\n    characters_pool = BRACKETS + string.ascii_lowercase\n    \n    # Generate the random string\n    random_string = ''.join(random.choice(characters_pool) for _ in range(length))\n    \n    return random_string"}
{"task_id": "BigCodeBench/795", "solution": "from collections import deque\nimport math\ndef task_func(l):\n    # Create a deque from the list\n    dq = deque(l)\n    \n    # Rotate the deque to the right by 3 positions\n    dq.rotate(3)\n    \n    # Calculate the square root of the sum of numeric elements, if any\n    numeric_sum = sum(item for item in dq if isinstance(item, (int, float)))\n    if numeric_sum:\n        print(f\"The square root of the sum of numeric elements: {math.sqrt(numeric_sum)}\")\n    \n    # Return the rotated deque\n    return dq"}
{"task_id": "BigCodeBench/796", "solution": "import os\nimport re\nBRACKET_PATTERN = r'[(){}[\\]]'\ndef task_func(directory):\n    \"\"\"\n    Finds all files in the specified directory whose names contain any type of \n    bracket (round, curly, or square).\n    \"\"\"\n    file_paths = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.search(BRACKET_PATTERN, file):\n                file_paths.append(os.path.join(root, file))\n    return file_paths"}
{"task_id": "BigCodeBench/797", "solution": "import re\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> int:\n    \"\"\"\n    Count the total number of brackets in a pandas DataFrame.\n    \n    Parameters:\n    df (pd.DataFrame): DataFrame to process.\n    \n    Returns:\n    int: Total number of brackets.\n    \n    Raises:\n    TypeError: If input is not a DataFrame.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"Input must be a pandas DataFrame.\")\n    \n    # Concatenate all strings in the DataFrame into one long string\n    combined_text = ' '.join(map(str, df.values.flatten()))\n    \n    # Use regex to find all brackets\n    bracket_pattern = r'[(){}[\\]]'\n    brackets_found = re.findall(bracket_pattern, combined_text)\n    \n    # Return the count of brackets\n    return len(brackets_found)"}
{"task_id": "BigCodeBench/798", "solution": "import os\nimport shutil\nBACKUP_DIR = '/tmp/backup'\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \"\"\"\n    # Check if backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    \n    # Construct the full path to the backup\n    backup_path = os.path.join(BACKUP_DIR, os.path.basename(directory))\n    \n    # Check if the backup of the directory exists\n    if not os.path.exists(backup_path):\n        return f'Backup for {directory} does not exist in {BACKUP_DIR}.'\n    \n    # Remove the existing directory to restore (if it exists)\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    \n    # Restore the directory from the backup\n    shutil.move(backup_path, directory)\n    \n    return directory"}
{"task_id": "BigCodeBench/799", "solution": "import pandas as pd\nfrom random import seed, choices\ndef task_func(L, num_dataframes=5, random_seed=None):\n    if random_seed is not None:\n        seed(random_seed)\n    \n    if not L:  # If L is empty\n        return pd.DataFrame(), []\n    \n    # Generate column names\n    columns = choices(list('abcdefghijklmnopqrstuvwxyz'), k=len(L[0]))\n    \n    df_list = []\n    for _ in range(num_dataframes):\n        # Randomly sample rows from L\n        sampled_rows = choices(L, k=3)\n        # Create DataFrame with random columns and sampled rows\n        df = pd.DataFrame(sampled_rows, columns=columns)\n        df_list.append(df)\n    \n    # Find common rows between all DataFrames\n    common_rows = df_list[0]\n    for df in df_list[1:]:\n        common_rows = common_rows.merge(df, how='inner', on=columns)\n    \n    return common_rows, df_list\nL = [['14', '65', '76'], ['2', '5', '6'], ['7', '12', '33'], ['14', '22', '46']]"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\nCSV_FILE_PATH = 'match_data.csv'\ndef update_csv_with_counts(filename, goals, penalties):\n    with open(filename, 'a', newline='') as file:\n        writer = csv.writer(file)\n        for team in goals:\n            writer.writerow([team, goals[team], penalties[team]])\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    \"\"\"\n    Count the total number of goals and penalties from a CSV file and update it with the given goals and penalties.\n\n    Parameters:\n    - goals (dict): A dictionary where keys are team names and values are numbers of goals scored.\n    - penalties (dict): A dictionary where keys are team names and values are numbers of penalties incurred.\n\n    Returns:\n    - count (Counter): A Counter object with total counts of goals and penalties.\n\n    Requirements:\n    - csv\n    - os\n    - collections.Counter\n    \"\"\"\n    # Initialize counts\n    total_counts = Counter({'goals': 0, 'penalties': 0})\n\n    # Update totals with given data\n    total_counts.update(goals.values())\n    total_counts.update(penalties.values())\n\n    # Update CSV file with new entries\n    update_csv_with_counts(csv_file_path, goals, penalties)\n\n    return total_counts"}
{"task_id": "BigCodeBench/801", "solution": "import csv\nimport collections\nimport numpy as np\ndef task_func(file_name):\n    \"\"\"\n    Find the most common value in each column of a csv file with column names.\n    \n    Parameters:\n    file_name (str): The name of the csv file.\n    \n    Returns:\n    dict: A dictionary with column names as keys and most common values as values.\n    \"\"\"\n    try:\n        with open(file_name, 'r') as file:\n            reader = csv.DictReader(file)\n            data = [row for row in reader]\n            \n            if not data:  # if the csv is empty\n                return {}\n            \n            # Transpose the data to process columns\n            transposed_data = list(map(list, zip(*data)))\n            \n            common_values_dict = {}\n            for column in transposed_data:\n                counter = collections.Counter(column)\n                most_common = counter.most_common()\n                \n                # If there's a tie, sort alphabetically and take the first\n                if len(most_common) > 1 and most_common[0][1] == most_common[1][1]:\n                    most_common.sort(key=lambda x: x[0])\n                common_values_dict[reader.fieldnames[transposed_data.index(column)]] = most_common[0][0]\n            \n            return common_values_dict\n    \n    except FileNotFoundError:\n        print(f\"The file {file_name} does not exist.\")\n        return {}\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return {}"}
{"task_id": "BigCodeBench/802", "solution": "import numpy as np\ndef task_func(dimension, seed=42):\n    \"\"\"\n    Create a 2D numeric array (matrix) of a given dimension with random integers between 1 and 100, \n    and a flat list of all elements in the matrix.\n    \"\"\"\n    # Set the seed for reproducibility\n    np.random.seed(seed)\n    \n    # Create a 2D matrix of the given dimension with random integers from 1 to 100\n    matrix = np.random.randint(1, 101, size=(dimension, dimension))\n    \n    # Flatten the matrix into a list\n    flat_list = matrix.flatten().tolist()\n    \n    return matrix, flat_list"}
{"task_id": "BigCodeBench/803", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(file_name: str) -> pd.DataFrame:\n    \"\"\"Normalize data in a csv file using MinMaxScaler from sklearn.\"\"\"\n    # Load the data\n    data = pd.read_csv(file_name)\n    \n    # Separate numeric columns for normalization\n    numeric_cols = data.select_dtypes(include='number').columns.tolist()\n    \n    # Check if there are any numeric columns\n    if not numeric_cols:\n        raise ValueError(\"Input data must have at least one numeric column.\")\n    \n    # Initialize the scaler\n    scaler = MinMaxScaler()\n    \n    # Normalize numeric columns\n    data[numeric_cols] = scaler.fit_transform(data[numeric_cols])\n    \n    # Return the DataFrame with normalized numeric columns\n    return data"}
{"task_id": "BigCodeBench/804", "solution": "import os\nfrom datetime import datetime\nLOG_DIR = './logs'\ndef create_log_dir_if_not_exists(log_dir):\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\ndef task_func(metrics, filename, log_dir=LOG_DIR):\n    \"\"\"\n    This function writes a dictionary of metrics to a specified log file, appending a timestamp to each entry.\n    \"\"\"\n    create_log_dir_if_not_exists(log_dir)\n    \n    log_path = os.path.join(log_dir, filename)\n    \n    try:\n        with open(log_path, 'a') as file:\n            for key, value in metrics.items():\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                file.write(f\"{timestamp}: {key} = {value}\\n\")\n        return True\n    except IOError as e:\n        print(f\"An error occurred: {e}\")\n        return False"}
{"task_id": "BigCodeBench/805", "solution": "import pandas as pd\nimport random\ndef task_func(dictionary, item, seed):\n    random.seed(seed)  # Set the seed for random number generation\n    \n    # Convert dictionary to DataFrame\n    df = pd.DataFrame(dictionary)\n    \n    # Find the locations of the item\n    locations = [(idx, col) for idx, row in df.iterrows() for col in df.columns if df.loc[idx, col] == item]\n    \n    # Count the occurrences and add a random integer between 0 and 10 (exclusive)\n    count_with_random = len(locations) + random.randint(0, 10)\n    \n    return locations, count_with_random, df"}
{"task_id": "BigCodeBench/806", "solution": "import re\nfrom nltk.corpus import stopwords\nfrom collections import Counter\nimport nltk\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text, n=2):\n    \"\"\"\n    Remove duplicate and stopwords from a string \"text.\"\n    Then, generate a count of n-grams (default is bigrams) in the text.\n    \"\"\"\n    # Remove duplicates by converting to set and then back to string\n    text = ' '.join(set(text.split()))\n\n    # Tokenize the text\n    words = nltk.word_tokenize(text)\n    \n    # Remove stopwords\n    filtered_words = [word for word in words if word.lower() not in STOPWORDS]\n    \n    # Generate n-grams\n    ngrams = zip(*[filtered_words[i:] for i in range(n)])\n    \n    # Count the n-grams\n    ngram_counts = Counter(ngrams)\n    \n    return ngram_counts\ntext = \"The quick brown fox jumps over the lazy dog and the dog was not that quick to respond.\""}
{"task_id": "BigCodeBench/807", "solution": "import numpy as np\nfrom scipy.stats import norm\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> tuple:\n    \"\"\"\n    Determine the outlier indices in a 1D numpy array based on the Z score.\n    \"\"\"\n    # Check if standard deviation is zero\n    if np.std(data) == 0:\n        return [], np.mean(data), np.var(data)\n    \n    # Fit normal distribution and get z scores\n    mean = np.mean(data)\n    std = np.std(data)\n    z_scores = (data - mean) / std\n    \n    # Find outliers\n    outlier_indices = np.where(np.abs(z_scores) > threshold)[0]\n    \n    return outlier_indices.tolist(), mean, std**2"}
{"task_id": "BigCodeBench/808", "solution": "import re\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text):\n    \"\"\"\n    Remove duplicate words and stopwords from a string \"text.\"\n    Then, analyze the sentiment of the text using TextBlob.\n    \n    Parameters:\n    - text (str): The text string to analyze.\n    \n    Returns:\n    - Sentiment: The sentiment of the text.\n    \"\"\"\n    # Remove duplicates and convert to lowercase\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    unique_words = set(words) - STOPWORDS\n    \n    # Join unique words back into a string\n    cleaned_text = ' '.join(unique_words)\n    \n    # Analyze sentiment\n    analysis = TextBlob(cleaned_text)\n    \n    return analysis.sentiment"}
{"task_id": "BigCodeBench/809", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters):\n    \"\"\"\n    Apply KMeans clustering to a 2D numeric array and find the indices of the data points in each cluster.\n\n    Parameters:\n    data (numpy array): The 2D numpy array for clustering.\n    n_clusters (int): The number of clusters to form.\n\n    Returns:\n    dict: A dictionary where keys are cluster labels and values are lists of indices for data points in the cluster.\n    \"\"\"\n    # Initialize KMeans with the specified number of clusters\n    kmeans = KMeans(n_clusters=n_clusters)\n    \n    # Fit the data and predict the cluster labels\n    labels = kmeans.fit_predict(data)\n    \n    # Create a dictionary to store the indices for each cluster\n    cluster_indices = {i: [] for i in range(n_clusters)}\n    \n    # Map each data point's index to its cluster\n    for idx, label in enumerate(labels):\n        cluster_indices[label].append(idx)\n    \n    return cluster_indices"}
{"task_id": "BigCodeBench/810", "solution": "import re\nimport os\nimport subprocess\ndef task_func(dir_path, exe_pattern, execute_files=True):\n    \"\"\"\n    The function as described in the problem statement.\n    \"\"\"\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"The provided directory path is not valid.\")\n    \n    found_files = []\n    pattern = re.compile(exe_pattern)\n    \n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            if pattern.match(file) and os.access(os.path.join(root, file), os.X_OK):\n                found_files.append(os.path.join(root, file))\n    \n    if execute_files:\n        results = []\n        for file_path in found_files:\n            try:\n                output = subprocess.check_output([file_path], stderr=subprocess.STDOUT)\n                results.append(output.decode('utf-8').strip())\n            except subprocess.CalledProcessError as e:\n                results.append(f\"Error executing {file_path}: {e.output.decode('utf-8').strip()}\")\n        return results\n    else:\n        return found_files"}
{"task_id": "BigCodeBench/811", "solution": "import pandas as pd\nfrom random import sample, seed\ndef task_func(dictionary, item, sample_size=None, random_seed=None):\n    \"\"\"\n    The function as described in the prompt.\n    \"\"\"\n    # Convert dictionary to DataFrame\n    df = pd.DataFrame.from_dict(dictionary, orient='index').reset_index(drop=True)\n    \n    # Record positions where the item is found\n    positions = [(idx, col) for idx, row in df.iterrows() for col, val in row.items() if val == item]\n    position_freq = df.apply(lambda row: row.eq(item).idxmax(), axis=1).value_counts()\n    \n    # Random sampling with seed for reproducibility\n    if random_seed is not None:\n        seed(random_seed)\n    if sample_size and len(positions) > sample_size:\n        positions = sample(positions, sample_size)\n    \n    return positions, df, position_freq"}
{"task_id": "BigCodeBench/812", "solution": "def task_func(directory=DIRECTORY, file_pattern=PATTERN):\n    \"\"\"\n    Look for files that match the pattern of the regular expression '(?<!Distillr)\\\\AcroTray.exe' in the directory 'C:\\\\SomeDir\\\\'. \n    If found, archive these files in a tar file.\n    \n    Parameters:\n    - directory: The directory to search for files matching a specified pattern. The function will iterate over all files within this directory, including subdirectories.\n    - file_pattern: A regular expression pattern used to match filenames. Files whose names match this pattern will be added to an archive (tar file).\n    \n    Returns:\n    - str: Path to the created tar file.\n    \"\"\"\n    # Create a list to hold matching file paths\n    matching_files = []\n\n    # Walk through the directory and its subdirectories\n    for path in directory.glob('**/*'):\n        if path.is_file() and re.search(file_pattern, str(path)):\n            matching_files.append(path)\n\n    # Create a tar file name based on the current date/time if there are matching files\n    if matching_files:\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        tar_filename = directory.parent / f\"matched_files_{timestamp}.tar.gz\"\n        \n        with tarfile.open(tar_filename, \"w:gz\") as tar:\n            for file in matching_files:\n                tar.add(file)\n        \n        return str(tar_filename)\n    else:\n        print(\"No files matched the pattern.\")\n        return None"}
{"task_id": "BigCodeBench/813", "solution": "from itertools import combinations\nimport pandas as pd\ndef task_func(number_list, element):\n    # Find all unique combinations of 3 numbers that add up to the element\n    valid_combinations = [comb for comb in combinations(number_list, 3) if sum(comb) == element]\n    \n    # If no combinations are found, return an empty DataFrame\n    if not valid_combinations:\n        return pd.DataFrame(columns=['Combinations'])\n    \n    # Convert the list of tuples into a DataFrame\n    df = pd.DataFrame(valid_combinations, columns=['Combinations'])\n    \n    return df"}
{"task_id": "BigCodeBench/814", "solution": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    The function searches for files in the source directory that match the given file_pattern,\n    then moves these files to the target directory and writes their paths into a configuration file.\n\n    Parameters:\n    - source_dir (str): Source directory path.\n    - target_dir (str): Target directory path.\n    - file_pattern (str, optional): Regex pattern for filenames. Defaults to text and doc files.\n\n    Returns:\n    - str: Path of the configuration file.\n    \"\"\"\n    # Ensure the target directory exists\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # List to hold matching file paths\n    matching_files = []\n\n    # Walk through the source directory\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if re.match(file_pattern, file):\n                matching_files.append(os.path.join(root, file))\n\n    # Create a unique filename for the config file inside target_dir\n    config_file_path = os.path.join(target_dir, 'config_files.txt')\n\n    # Write the file paths into the configuration file\n    with open(config_file_path, 'w') as config_file:\n        for file_path in matching_files:\n            config_file.write(file_path + '\\n')\n\n    # Move the matched files to the target directory\n    for file_path in matching_files:\n        shutil.move(file_path, target_dir)\n\n    return config_file_path"}
{"task_id": "BigCodeBench/815", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(test_scores, student):\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(test_scores)\n    \n    # Check if the student is present in the DataFrame\n    if student not in df['Student'].values:\n        raise ValueError(f\"Student ID {student} not found in the data.\")\n    \n    # Filter the DataFrame for the specific student\n    student_df = df[df['Student'] == student]\n    \n    # Calculate the average and standard deviation\n    avg_score = np.mean(student_df['Score'])\n    std_dev = np.std(student_df['Score'])\n    \n    # Return the results along with the full DataFrame\n    return np.array([avg_score, std_dev]), df"}
{"task_id": "BigCodeBench/816", "solution": "from collections import Counter\nimport random\nHAND_RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\nSUITS = ['H', 'D', 'C', 'S']\ndef task_func():\n    \"\"\"\n    Generate a random poker hand and count the frequency of each card rank.\n    \"\"\"\n    # Generate a random hand of five cards\n    hand = [random.choice(HAND_RANKS) + random.choice(SUITS) for _ in range(5)]\n    \n    # Count the frequency of each card rank\n    rank_count = Counter(card[:-1] for card in hand)  # Exclude suits while counting ranks\n    \n    return hand, rank_count"}
{"task_id": "BigCodeBench/817", "solution": "import os\nimport logging\nfrom collections import Counter\ndef setup_logging(log_path='./', log_file='task_func.log'):\n    \"\"\"Set up logging configuration.\"\"\"\n    logging.basicConfig(filename=os.path.join(log_path, log_file),\n                        level=logging.DEBUG,\n                        format='%(asctime)s:%(levelname)s:%(message)s',\n                        encoding='utf-8',\n                        filemode='w')\ndef task_func(letter_list, element, log_path='./'):\n    \"\"\"\n    Detailed description from the problem statement...\n    \"\"\"\n    setup_logging(log_path)\n    logging.info(f\"Function called with list: {letter_list} and element: {element}\")\n    \n    if element not in letter_list:\n        logging.error(\"The element is not in the letter list.\")\n        raise ValueError(\"The element is not in the letter list.\")\n    \n    element_frequency = Counter(letter_list)[element]\n    logging.info(f\"Frequency of '{element}' is {element_frequency}\")\n    \n    logging.shutdown()\n    return element_frequency"}
{"task_id": "BigCodeBench/818", "solution": "import re\nimport string\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    \"\"\"\n    Divide a string into words, remove punctuation marks and convert them to lowercase letters.\n\n    Parameters:\n    - text (str): The input string.\n\n    Returns:\n    - cleaned_words (list): A list of cleaned words.\n\n    Example:\n    >>> task_func(\"Hello, world! This is a test.\")\n    ['hello', 'world', 'this', 'is', 'a', 'test']\n    \"\"\"\n    # Remove punctuation using regex and convert to lowercase\n    cleaned_text = re.sub(r'[{}]'.format(re.escape(PUNCTUATION)), '', text).lower()\n    # Split the text into words\n    cleaned_words = cleaned_text.split()\n    return cleaned_words"}
{"task_id": "BigCodeBench/819", "solution": "import time\nimport random\ndef task_func(iterations=5, min_delay=1.0, max_delay=2.0, seed=None):\n    if not isinstance(iterations, int) or iterations <= 0:\n        raise ValueError(\"Iterations must be a positive integer.\")\n    if min_delay <= 0 or max_delay <= 0:\n        raise ValueError(\"Delay values must be positive numbers.\")\n    if seed is not None:\n        random.seed(seed)\n    \n    messages = []\n    total_delay = 0.0\n    \n    for _ in range(iterations):\n        delay = random.uniform(min_delay, max_delay)\n        time.sleep(delay)\n        total_delay += delay\n        messages.append(f'{delay:.2f} seconds have passed')\n    \n    return messages, total_delay"}
{"task_id": "BigCodeBench/820", "solution": "import random\nimport string\nLETTERS = string.ascii_letters\ndef task_func(num_words, word_length):\n    \"\"\"\n    Create a list of random words of a certain length.\n\n    Parameters:\n    - num_words (int): The number of words to generate.\n    - word_length (int): The length of each word.\n\n    Returns:\n    - words (list): A list of random words.\n\n    Raises:\n    - ValueError: If num_words or word_length is negative.\n    \"\"\"\n    if num_words < 0 or word_length < 0:\n        raise ValueError(\"Both num_words and word_length must be non-negative.\")\n    \n    words = [''.join(random.choice(LETTERS) for _ in range(word_length)) for _ in range(num_words)]\n    return words"}
{"task_id": "BigCodeBench/821", "solution": "import time\nimport threading\ndef task_func(delay_time: float = 1.0, num_threads: int = 5):\n    results = []\n\n    # Define the function to be run in each thread\n    def delayed_task(thread_num):\n        time.sleep(delay_time)\n        results.append(f'Delay in thread {thread_num} completed')\n\n    # Create and start threads\n    threads = []\n    for i in range(num_threads):\n        thread = threading.Thread(target=delayed_task, args=(i,))\n        threads.append(thread)\n        thread.start()\n\n    # Wait for all threads to complete\n    for thread in threads:\n        thread.join()\n\n    return results"}
{"task_id": "BigCodeBench/822", "solution": "import random\nimport string\nLETTERS = string.ascii_letters\nDIGITS = string.digits\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n    \"\"\"\n    if not (isinstance(length, int) and isinstance(num_digits, int)):\n        raise ValueError(\"Both length and num_digits must be integers.\")\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Invalid input: length must be positive, and num_digits must be non-negative and not exceed length.\")\n    \n    # Generate the password components\n    letters_part = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    digits_part = ''.join(random.choice(DIGITS) for _ in range(num_digits))\n    \n    # Combine and shuffle the password components\n    password_list = list(letters_part + digits_part)\n    random.shuffle(password_list)\n    \n    return ''.join(password_list)"}
{"task_id": "BigCodeBench/823", "solution": "import time\nimport numpy as np\ndef task_func(samples=10, delay=0.1):\n    \"\"\"\n    Make a delay for a given amount of time for a specified number of samples,\n    measure the actual delay and calculate the statistical properties of the\n    delay times.\n    \n    Parameters:\n    - samples (int): Number of samples for which the delay is measured.\n                     Default is 10.\n    - delay (float): Amount of time (in seconds) for each delay.\n                     Default is 0.1 second.\n    \n    Returns:\n    tuple: The mean and standard deviation of the actual delay times.\n    \"\"\"\n    actual_delays = []\n    for _ in range(samples):\n        start_time = time.time()\n        time.sleep(delay)\n        end_time = time.time()\n        actual_delays.append(end_time - start_time)\n    \n    mean_delay = np.mean(actual_delays)\n    std_delay = np.std(actual_delays)\n    \n    return mean_delay, std_delay"}
{"task_id": "BigCodeBench/824", "solution": "import re\nimport string\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    \"\"\"\n    Count the number of words and punctuation marks in a string.\n\n    Parameters:\n    - text (str): The input string.\n\n    Returns:\n    - tuple: A tuple containing the number of words and punctuation marks.\n\n    Example:\n    >>> task_func(\"Hello, world! This is a test.\")\n    (6, 3)\n    \"\"\"\n    # Count words using regex. Words are defined as sequences of alphanumeric characters.\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_count = len(words)\n    \n    # Count punctuation marks. We use the punctuation constant from string module.\n    punctuation_count = sum(1 for char in text if char in PUNCTUATION)\n    \n    return word_count, punctuation_count"}
{"task_id": "BigCodeBench/825", "solution": "import numpy as np\nfrom itertools import product\nimport string\ndef task_func(length, seed=None, alphabets=list(string.ascii_lowercase)):\n    \"\"\"\n    Generate a list of 10 randomly picked strings from all possible strings of a given\n    length from the provided series of characters, using a specific seed for\n    reproducibility.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate all possible combinations\n    all_combinations = [''.join(i) for i in product(alphabets, repeat=length)]\n    \n    # If the number of all combinations is less than 10, return all combinations\n    if len(all_combinations) < 10:\n        return all_combinations\n    \n    # Randomly select 10 strings\n    selected_strings = np.random.choice(all_combinations, 10, replace=False)\n    \n    return selected_strings"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    The function definition provided in the question.\n    \"\"\"\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    moved_files_count = 0\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if re.match(file_pattern, file):\n                src_file = os.path.join(root, file)\n                dst_file = os.path.join(target_dir, file)\n                shutil.move(src_file, dst_file)\n                moved_files_count += 1\n                \n    return moved_files_count"}
{"task_id": "BigCodeBench/827", "solution": "import math\nfrom sympy import isprime\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n    \"\"\"\n    # Filter out the prime numbers\n    primes = [num for num in input_list if isprime(num)]\n    \n    # Convert the primes to degrees and sort, then convert back to integers (degrees are float due to math.degrees)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.radians(x)))\n    \n    # Since conversion to degrees and back doesn't change the value for integers, return as integers\n    return sorted_primes"}
{"task_id": "BigCodeBench/828", "solution": "import os\nimport errno\nimport shutil\ndef task_func(filename, dest_dir):\n    \"\"\"\n    The function implementation is provided here.\n    \"\"\"\n    # Ensure the destination directory exists\n    try:\n        os.makedirs(dest_dir)\n    except OSError as e:\n        if e.errno != errno.EEXIST:\n            raise OSError(f\"Failed to create directory: {dest_dir}\")\n\n    # Construct the full path for the copied file\n    dest_file = os.path.join(dest_dir, os.path.basename(filename))\n\n    # Copy the file to the destination directory\n    shutil.copy2(filename, dest_file)\n\n    # Clear the content of the original file\n    with open(filename, 'w') as file:\n        file.truncate(0)\n\n    return dest_file"}
{"task_id": "BigCodeBench/829", "solution": "import pandas as pd\nfrom statistics import mean\ndef task_func(df: pd.DataFrame) -> dict:\n    if 'Name' not in df.columns or 'Score' not in df.columns:\n        raise ValueError(\"DataFrame must have 'Name' and 'Score' columns.\")\n    \n    # Group by 'Name' and calculate the mean of 'Score'\n    grouped = df.groupby('Name')['Score'].mean()\n    \n    # Convert the grouped data to a dictionary of generators\n    gen_dict = {name: (name, mean_score) for name, mean_score in grouped.items()}\n    \n    # Convert mean scores to generator expressions\n    gen_dict = {name: (name, (yield mean_score)) for name, mean_score in gen_dict.items()}\n    \n    return gen_dict"}
{"task_id": "BigCodeBench/830", "solution": "import json\nimport os\ndef task_func(filename, data):\n    \"\"\"\n    Write a dictionary to a file as a JSON object and return the written content for verification.\n    \"\"\"\n    # Check if the file already exists\n    if os.path.exists(filename):\n        print(f\"File {filename} already exists.\")\n        return False, None\n    \n    try:\n        # Write the dictionary to the file as JSON\n        with open(filename, 'w') as file:\n            json.dump(data, file)\n        \n        # Read the content back to verify\n        with open(filename, 'r') as file:\n            written_data = json.load(file)\n            \n        return True, written_data\n    \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False, None"}
{"task_id": "BigCodeBench/831", "solution": "import random\nimport math\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    The function is defined as per the description.\n    \"\"\"\n    if random_seed is not None:\n        random.seed(random_seed)\n    \n    for _ in range(pairs_count):\n        num1 = random.randint(range_start, range_end)\n        num2 = random.randint(range_start, range_end)\n        diff_sqrt = math.sqrt(abs(num1 - num2))\n        yield (num1, num2, diff_sqrt)"}
{"task_id": "BigCodeBench/832", "solution": "import pickle\nimport os\ndef task_func(filename, data):\n    \"\"\"\n    Serialize an object using pickle and overwrite the specified file with this serialized data.\n    Before writing, checks if the directory exists, creating it if necessary.\n\n    Parameters:\n    - filename (str): The path of the file to be overwritten with serialized data.\n    - data (object): The object to serialize and write to the file.\n\n    Returns:\n    - bool: True if the operation is successful, False otherwise.\n    \"\"\"\n    directory = os.path.dirname(filename)\n    \n    # Create the directory if it doesn't exist\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    \n    try:\n        with open(filename, 'wb') as file:\n            pickle.dump(data, file)\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False"}
{"task_id": "BigCodeBench/833", "solution": "import random\nfrom collections import Counter\nfrom statistics import mode\ndef task_func(list_length=1000, range_start=1, range_end=10, random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n        \n    # Generate the random list\n    random_list = [random.randint(range_start, range_end) for _ in range(list_length)]\n    \n    # Get the mode\n    mode_num = mode(random_list)\n    \n    # Convert list to a generator of tuples (number, frequency)\n    numbers_gen = ((num, freq) for num, freq in Counter(random_list).items())\n    \n    return mode_num, numbers_gen"}
{"task_id": "BigCodeBench/834", "solution": "import binascii\nimport io\nimport gzip\ndef task_func(compressed_hex):\n    \"\"\"\n    Uncompress a gzip-compressed hexadecimal string and decrypt the result to UTF-8.\n    \n    Parameters:\n    - compressed_hex (str): The gzip-compressed hexadecimal string.\n    \n    Returns:\n    - decoded_string (str): The decoded and decompressed string in UTF-8 format, or an error message.\n    \"\"\"\n    # Convert hexadecimal string to bytes\n    try:\n        compressed_bytes = binascii.unhexlify(compressed_hex)\n    except binascii.Error as e:\n        return f'Error: Invalid hexadecimal input - {str(e)}'\n\n    # Create a BytesIO object from the byte string\n    compressed_stream = io.BytesIO(compressed_bytes)\n    \n    # Try to decompress the data\n    try:\n        with gzip.open(compressed_stream, 'rt') as f:\n            decoded_string = f.read()\n    except gzip.BadGzipFile as e:\n        return f'Error during decompression: {str(e)}'\n    except Exception as e:\n        return f'An unexpected error occurred: {str(e)}'\n    \n    return decoded_string"}
{"task_id": "BigCodeBench/835", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(n_rows, remove_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    \"\"\"\n    Generate a DataFrame with columns 'columns' and fill them with random \n    integer values between 0 and 100. Remove some columns based on the provided indexes.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n        \n    # Generate DataFrame with random values\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    \n    # Remove columns based on their indices\n    columns_to_keep = [col for idx, col in enumerate(columns) if idx not in remove_cols]\n    df = df[columns_to_keep]\n    \n    return df"}
{"task_id": "BigCodeBench/836", "solution": "import os\nimport shutil\nimport csv\ndef task_func(target_value='332', csv_dir='./csv_files/', processed_dir='./processed_files/', simulate=False):\n    \"\"\"\n    Scans a directory for CSV files, finds for each file the index of the row with the first cell equal to the target value,\n    and optionally moves the processed files to another directory.\n    \"\"\"\n    result = {}\n    \n    # Ensure the CSV directory exists\n    if not os.path.exists(csv_dir):\n        print(f\"Directory {csv_dir} does not exist.\")\n        return result\n    \n    # Scan directory for CSV files\n    for filename in os.listdir(csv_dir):\n        if filename.endswith('.csv'):\n            file_path = os.path.join(csv_dir, filename)\n            index = None\n            \n            # Read CSV file and find the target value\n            with open(file_path, 'r', newline='') as file:\n                reader = csv.reader(file)\n                for idx, row in enumerate(reader):\n                    if row and row[0] == target_value:\n                        index = idx\n                        break\n            \n            # Add the result to the dictionary\n            result[filename] = index\n            \n            # Optionally move the file to processed directory\n            if not simulate:\n                shutil.move(file_path, os.path.join(processed_dir, filename))\n            else:\n                print(f\"Would move {filename} to {processed_dir}\")\n    \n    return result"}
{"task_id": "BigCodeBench/837", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_rows, scale_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    \"\"\"\n    The function generates a DataFrame with random values and scales specified columns.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n        \n    # Generate DataFrame with random values\n    data = np.random.randint(0, 100, (n_rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n    \n    # Scale selected columns\n    if scale_cols:\n        scaler = StandardScaler()\n        scaled_data = scaler.fit_transform(df.iloc[:, scale_cols])\n        df.iloc[:, scale_cols] = scaled_data\n        \n    return df"}
{"task_id": "BigCodeBench/838", "solution": "import pandas as pd\nimport re\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import word_tokenize\ndef task_func(text_series):\n    \"\"\"\n    Process a pandas Series of text data by lowercasing all letters, removing non-alphanumeric \n    characters (except spaces), removing punctuation, and stemming each word to its root form.\n    \n    Parameters:\n    - text_series (pandas.Series): A Series object containing string entries representing text data.\n\n    Returns:\n    - pandas.Series: A Series where each string has been processed as described.\n    \"\"\"\n    ps = PorterStemmer()\n    \n    def process_text(text):\n        # Lowercasing\n        text = text.lower()\n        # Removing non-alphanumeric characters (except spaces)\n        text = re.sub(r'[^a-z0-9\\s]', '', text)\n        # Tokenizing the text\n        words = word_tokenize(text)\n        # Stemming each word\n        stemmed_words = [ps.stem(word) for word in words]\n        # Rejoining the stemmed words\n        processed_text = ' '.join(stemmed_words)\n        return processed_text\n    \n    return text_series.apply(process_text)"}
{"task_id": "BigCodeBench/839", "solution": "import csv\nimport random\ndef task_func(file_path, num_rows, gender=['Male', 'Female', 'Non-Binary'], countries=['USA', 'UK', 'Canada', 'Australia', 'India'], seed=None):\n    if seed is not None:\n        random.seed(seed)\n    \n    headers = ['Name', 'Age', 'Gender', 'Country']\n    \n    # Write headers to the CSV file\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(headers)\n        \n        # If num_rows is 0 or less, just write headers and return\n        if num_rows <= 0:\n            return file_path\n        \n        for _ in range(num_rows):\n            # Generate a random name of 5 uppercase characters\n            name = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=5))\n            # Generate a random age between 20 and 60\n            age = random.randint(20, 60)\n            # Choose a random gender and country\n            gender_choice = random.choice(gender)\n            country_choice = random.choice(countries)\n            \n            # Write the row to the CSV file\n            writer.writerow([name, age, gender_choice, country_choice])\n    \n    return file_path"}
{"task_id": "BigCodeBench/840", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(file_path, num_rows, data_dimensions=5, random_seed=None):\n    \"\"\"\n    Creates a CSV file on a given file path with random numeric data. \n    The number of rows in the CSV file is determined by the 'num_rows' parameter, \n    and the number of columns (features) is determined by the 'data_dimensions' parameter.\n    Columns are named following the convention: 'Feature_x', where x is the number of the \n    feature column starting at 1.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n        \n    # Generate data\n    data = np.random.rand(num_rows, data_dimensions)\n    \n    # Create DataFrame\n    columns = [f'Feature_{i+1}' for i in range(data_dimensions)]\n    df = pd.DataFrame(data, columns=columns)\n    \n    # Save DataFrame to CSV\n    df.to_csv(file_path, index=False)\n    \n    return file_path"}
{"task_id": "BigCodeBench/841", "solution": "import re\nimport json\nfrom collections import defaultdict\nimport string\ndef task_func(json_string):\n    try:\n        # Parse the JSON string\n        data = json.loads(json_string)\n        \n        # Check if 'text' field is present\n        if 'text' not in data:\n            return {}\n        \n        # Process the text\n        text = data['text'].lower()  # Convert to lowercase\n        # Remove punctuation using regex\n        text = re.sub(f\"[{re.escape(string.punctuation)}]\", \"\", text)\n        # Tokenize the text by splitting it into words\n        words = text.split()\n        \n        # Count word frequency\n        word_count = defaultdict(int)\n        for word in words:\n            word_count[word] += 1\n        \n        return dict(word_count)\n    \n    except json.JSONDecodeError:\n        # Return an empty dictionary if JSON parsing fails\n        return {}\n    except Exception as e:\n        # Log the error or handle it as needed\n        print(f\"An unexpected error occurred: {e}\")\n        return {}"}
{"task_id": "BigCodeBench/842", "solution": "import sqlite3\nimport random\ndef task_func(db_path, num_entries, users=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve'], countries=['USA', 'UK', 'Canada', 'Australia', 'India'], random_seed=None):\n    if random_seed is not None:\n        random.seed(random_seed)\n    \n    # Create a connection to the SQLite database\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n    \n    # Create the 'users' table if it doesn't exist\n    c.execute('''CREATE TABLE IF NOT EXISTS users\n                 (id INTEGER PRIMARY KEY, name TEXT, age INTEGER, country TEXT)''')\n    \n    # Generate and insert random data\n    for i in range(num_entries):\n        name = random.choice(users)\n        age = random.randint(20, 60)\n        country = random.choice(countries)\n        c.execute(\"INSERT INTO users (id, name, age, country) VALUES (?, ?, ?, ?)\", (i, name, age, country))\n    \n    # Commit the changes and close the connection\n    conn.commit()\n    conn.close()\n    \n    return db_path"}
{"task_id": "BigCodeBench/843", "solution": "import random\nimport re\nWORD_LIST = [\"sample\", \"text\", \"contains\", \"several\", \"words\", \"including\"]\ndef task_func(n_sentences):\n    \"\"\"\n    Generate a string of random sentences using a predefined word list. \n    Each sentence is guaranteed to have one period at the end, and no period within the sentence.\n    The generated sentences will be concatenated into a single string, \n    with all letters in lowercase and all non-alphanumeric characters except spaces removed.\n\n    Parameters:\n    - n_sentences (int): The number of sentences to generate.\n\n    Returns:\n    - str: A string containing the generated sentences in lowercase \n         with non-alphanumeric characters removed (except for single periods ending sentences).\n    \"\"\"\n    result = []\n    for _ in range(n_sentences):\n        sentence = ' '.join(random.sample(WORD_LIST, random.randint(1, len(WORD_LIST))))\n        sentence = re.sub(r'[^a-z\\s.]', '', sentence.lower()) + '.'\n        result.append(sentence)\n    return ' '.join(result)"}
{"task_id": "BigCodeBench/844", "solution": "import csv\nimport random\nfrom faker import Faker\ndef task_func(file_path, num_rows, random_seed=None):\n    if not isinstance(num_rows, int) or num_rows < 0:\n        raise ValueError(\"num_rows must be a non-negative integer\")\n\n    if random_seed is not None:\n        random.seed(random_seed)\n        Faker.seed(random_seed)\n\n    fake = Faker()\n\n    with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:\n        fieldnames = ['Name', 'Age', 'Address', 'Email']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        for _ in range(num_rows):\n            # Replace newline characters in addresses with ', '\n            address = fake.address().replace('\\n', ', ')\n            writer.writerow({\n                'Name': fake.name(),\n                'Age': random.randint(20, 60),\n                'Address': address,\n                'Email': fake.email()\n            })\n\n    return file_path"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n    # Clean texts\n    text1_clean = ALPHANUMERIC.sub(' ', text1).lower()\n    text2_clean = ALPHANUMERIC.sub(' ', text2).lower()\n    \n    # Tokenize texts\n    words_text1 = text1_clean.split()\n    words_text2 = text2_clean.split()\n    \n    # Calculate term frequency\n    term_freq_text1 = Counter(words_text1)\n    term_freq_text2 = Counter(words_text2)\n    \n    # Create vectors for cosine similarity\n    vector_text1 = np.array(list(term_freq_text1.values()))\n    vector_text2 = np.array(list(term_freq_text2.values()))\n    \n    # Compute cosine similarity\n    dot_product = np.dot(vector_text1, vector_text2)\n    norm_vector_text1 = np.linalg.norm(vector_text1)\n    norm_vector_text2 = np.linalg.norm(vector_text2)\n    cosine_similarity = dot_product / (norm_vector_text1 * norm_vector_text2)\n    \n    # Compute Levenshtein ratio\n    levenshtein_ratio = ratio(text1_clean, text2_clean)\n    \n    return cosine_similarity, levenshtein_ratio"}
{"task_id": "BigCodeBench/846", "solution": "import pandas as pd\nfrom collections import Counter\ndef task_func(obj_list, attr):\n    \"\"\"\n    The function to count attribute frequency in a list of objects.\n    \"\"\"\n    # Extracting the attribute values from the objects\n    attr_values = [getattr(obj, attr, None) for obj in obj_list if hasattr(obj, attr)]\n    \n    # Counting the frequency of each attribute value\n    attr_counter = Counter(attr_values)\n    \n    # Converting the Counter object to a DataFrame\n    df = pd.DataFrame(list(attr_counter.items()), columns=['attribute', 'count'])\n    \n    return df\nclass ExampleObject:\n    def __init__(self, color, shape):\n        self.color = color\n        self.shape = shape\nobj_list = [ExampleObject('Red', 'Square'), ExampleObject('Green', 'Circle'), ExampleObject('Red', 'Rectangle')]"}
{"task_id": "BigCodeBench/847", "solution": "import re\nimport os\nimport string\nimport random\ndef task_func(input_string, directory='./text_files'):\n    \"\"\"\n    Split a multi-line string into separate strings, remove special characters, and save each string as a separate text file.\n    \n    Parameters:\n    - input_string (str): The multi-line string to be split and saved.\n    - directory (str): The directory where the text files will be saved. Default is './text_files'.\n    \n    Returns:\n    - file_paths (list): A list of file paths where the text is saved.\n    \"\"\"\n    # Ensure the directory exists\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    \n    # Split the input string into lines\n    lines = input_string.split('\\n')\n    \n    file_paths = []\n    for line in lines:\n        # Remove special characters\n        cleaned_line = re.sub(r'[^a-zA-Z0-9\\s]', '', line)\n        \n        # Generate a random filename\n        filename = ''.join(random.choices(string.digits, k=5)) + '.txt'\n        file_path = os.path.join(directory, filename)\n        \n        # Save the cleaned line to the file\n        with open(file_path, 'w') as file:\n            file.write(cleaned_line)\n        \n        file_paths.append(file_path)\n    \n    return file_paths"}
{"task_id": "BigCodeBench/848", "solution": "import heapq\nimport random\ndef task_func(obj_list, attr, top_n=5, seed=None):\n    if not obj_list or not hasattr(obj_list[0], attr):\n        return [], None\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    # Extract the specified attribute values\n    attr_values = [getattr(obj, attr) for obj in obj_list]\n    \n    # Find the top N values using a max heap\n    top_n_values = heapq.nlargest(top_n, attr_values)\n    \n    # Randomly sample an attribute value\n    random_value = random.choice(attr_values) if attr_values else None\n    \n    return top_n_values, random_value"}
{"task_id": "BigCodeBench/849", "solution": "import re\nfrom nltk.corpus import stopwords\nfrom collections import Counter\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(input_string):\n    \"\"\"\n    Divide a multi-line string into individual lines, remove stopwords, and count the frequency of each word.\n\n    Parameters:\n    - input_string (str): The multi-line string.\n\n    Returns:\n    - dict: A dictionary with word frequencies where each key is a unique word and the value is its frequency.\n    \"\"\"\n    # Remove punctuation and convert to lowercase\n    cleaned_text = re.sub(r'[^\\w\\s]', '', input_string).lower()\n    \n    # Split the text into lines\n    lines = cleaned_text.split('\\n')\n    \n    # Tokenize each line into words and filter out stopwords\n    words = [word for line in lines for word in line.split() if word not in STOPWORDS]\n    \n    # Count the frequency of each word\n    word_freq = Counter(words)\n    \n    return word_freq"}
{"task_id": "BigCodeBench/850", "solution": "import pandas as pd\nimport statistics\nimport random\ndef task_func(students, subjects, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    \n    # Initialize an empty DataFrame to store the report\n    report_data = {'Student': students}\n    \n    # Generate random grades for each student and subject\n    for subject in subjects:\n        grades = [random.randint(0, 100) for _ in students]\n        report_data[subject] = grades\n    \n    # Calculate the average grade for each student\n    report_data['Average Grade'] = [statistics.mean(grades) for grades in zip(*report_data.values()[1:])]\n    \n    # Convert the dictionary to a DataFrame\n    report = pd.DataFrame(report_data)\n    \n    return report\nstudents = ['Alice', 'Bob', 'Charlie']\nsubjects = ['Math', 'Physics', 'English']"}
{"task_id": "BigCodeBench/851", "solution": "import textwrap\nimport re\ndef task_func(input_string, width):\n    \"\"\"\n    Divide a multi-line string into separate strings and wrap each line to a certain width.\n    \n    Parameters:\n    - input_string (str): The multi-line string that needs to be wrapped.\n    - width (int): The width to wrap each line to.\n    \n    Returns:\n    - str: The wrapped string where each line is wrapped to the specified width.\n    \n    Example:\n    >>> task_func('Another line\\nWith wrapping', 8)\n    'Another\\nline\\nWith\\nwrapping'\n    \"\"\"\n    # Wrap each line individually\n    wrapped_lines = [textwrap.fill(line, width) for line in input_string.split('\\n')]\n    # Rejoin the wrapped lines with newline characters\n    return '\\n'.join(wrapped_lines)"}
{"task_id": "BigCodeBench/852", "solution": "import random\nimport string\ndef task_func(max_length, n_samples, seed=None):\n    if max_length < 1:\n        raise ValueError(\"max_length must be at least 1\")\n    \n    # Seed the random number generator for reproducibility\n    if seed is not None:\n        random.seed(seed)\n    \n    # Generate a list of random strings\n    random_strings = [''.join(random.choices(string.ascii_lowercase, k=random.randint(1, max_length)))\n                      for _ in range(n_samples)]\n    \n    return random_strings"}
{"task_id": "BigCodeBench/853", "solution": "import os\nimport shutil\nimport string\nINVALID_CHARACTERS = string.punctuation + string.whitespace\ndef task_func(directory_path):\n    \"\"\"\n    The function to organize files and handle invalid characters in file names.\n    \"\"\"\n    if not os.path.isdir(directory_path):\n        return \"The provided path is not a directory.\"\n\n    summary = {ext: 0 for ext in set()}\n    invalid_dir = os.path.join(directory_path, \"Invalid\")\n    \n    if not os.path.exists(invalid_dir):\n        os.makedirs(invalid_dir)\n\n    for root, _, files in os.walk(directory_path):\n        for file in files:\n            # Check for invalid characters in the filename\n            if any(char in INVALID_CHARACTERS for char in file):\n                new_file = ''.join(e for e in file if e.isalnum() or e in ('_', '-'))\n                shutil.move(os.path.join(root, file), os.path.join(invalid_dir, new_file))\n                summary['Invalid'] += 1\n            else:\n                file_extension = os.path.splitext(file)[1][1:]  # Get the file extension without the dot\n                destination_dir = os.path.join(directory_path, file_extension)\n                \n                if not os.path.exists(destination_dir):\n                    os.makedirs(destination_dir)\n                \n                shutil.move(os.path.join(root, file), os.path.join(destination_dir, file))\n                summary[file_extension] = summary.get(file_extension, 0) + 1\n                \n    return summary"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n    if not all(isinstance(n, int) for n in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    if any(n < 0 for n in numbers):\n        raise ValueError(\"Input numbers cannot be negative.\")\n    \n    # Function to calculate the sum of factorials in a list\n    def sum_of_factorials(nums):\n        return reduce(lambda x, y: x * y, (math.factorial(n) for n in nums), 1)\n    \n    # Generate permutations\n    all_permutations = list(permutations(numbers))\n    \n    # Calculate sum of factorials for each permutation\n    sums_of_factorials = [sum_of_factorials(perm) for perm in all_permutations]\n    \n    return sums_of_factorials, all_permutations"}
{"task_id": "BigCodeBench/855", "solution": "import random\nimport string\nimport collections\nVALID_CHARACTERS = string.ascii_letters + string.digits\ndef task_func(n_strings, string_length):\n    \"\"\"\n    Generate n random strings of a specified length, count the frequency of each character across all strings, and return the result as a dictionary.\n    \n    Parameters:\n    - n_strings (int): The number of random strings to generate.\n    - string_length (int): The length of each random string.\n    \n    Returns:\n    - dict: A dictionary containing character counts with characters as keys and their frequencies as values.\n    \"\"\"\n    # Generate random strings\n    random_strings = [''.join(random.choice(VALID_CHARACTERS) for _ in range(string_length)) for _ in range(n_strings)]\n    \n    # Count the frequency of each character across all strings\n    frequency_dict = collections.Counter(char for string in random_strings for char in string)\n    \n    return frequency_dict"}
{"task_id": "BigCodeBench/856", "solution": "from functools import reduce\nfrom itertools import combinations\nimport numpy as np\ndef task_func(shape=(3, 3), low=1, high=10, seed=None):\n    if high <= low:\n        raise ValueError(\"Upper bound must be greater than lower bound.\")\n    \n    # Seed the random number generator for reproducibility if a seed is provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate the matrix\n    matrix = np.random.randint(low, high, shape)\n    \n    # Generate all possible pairs of numbers from the matrix\n    pairs = combinations(matrix.flatten(), 2)\n    \n    # Calculate the sum of the products of all pairs\n    sum_of_products = sum(reduce(lambda x, y: x*y, pair) for pair in pairs)\n    \n    return sum_of_products, matrix"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory (SOURCE_DIR) to another (DEST_DIR) based on the specified file extensions (EXTENSIONS).\n    Issues warnings for files that could not be transferred due to any issues.\n    \n    Parameters:\n    - SOURCE_DIR (str): Source directory path.\n    - DEST_DIR (str): Destination directory path.\n    - EXTENSIONS (list): List of file extensions to transfer.\n    \n    Returns:\n    - transferred_files (list): Names of successfully transferred files.\n    \"\"\"\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    \n    transferred_files = []\n    for extension in EXTENSIONS:\n        files = glob.glob(os.path.join(SOURCE_DIR, f'*{extension}'))\n        for file in files:\n            try:\n                shutil.copy2(file, DEST_DIR)  # shutil.copy2 preserves file metadata\n                transferred_files.append(os.path.basename(file))\n            except Exception as e:\n                warnings.warn(f\"Warning: Unable to transfer {file}. Reason: {str(e)}\")\n                time.sleep(1)  # Grace period, not necessary but good for handling potential locks\n    \n    return transferred_files"}
{"task_id": "BigCodeBench/858", "solution": "import string\nimport random\nfrom collections import Counter\ndef task_func(n, seed=None):\n    \"\"\"\n    Detailed function description as provided earlier.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    letters = [random.choice(string.ascii_lowercase) for _ in range(n)]\n    letter_counts = Counter(letters)\n    \n    return letter_counts"}
{"task_id": "BigCodeBench/859", "solution": "import warnings\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import load_iris\nfrom sklearn.metrics import accuracy_score\ndef task_func():\n    # Suppress warnings for a cleaner output, except for the one we're interested in\n    warnings.filterwarnings(\"ignore\")\n    warnings.filterwarnings(\"always\", category=UserWarning)\n\n    # Load the iris dataset\n    iris = load_iris()\n    X, y = iris.data, iris.target\n\n    # Split the dataset into training set and test set\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\n    # Create a SVM classifier\n    clf = SVC()\n\n    # Train the classifier\n    clf.fit(X_train, y_train)\n\n    # Make predictions\n    y_pred = clf.predict(X_test)\n\n    # Calculate accuracy\n    accuracy = accuracy_score(y_test, y_pred)\n\n    # Check if accuracy is less than 0.9 and generate a warning if so\n    if accuracy < 0.9:\n        warning_msg = \"Accuracy is less than 0.9: {:.2f}\".format(accuracy)\n        warnings.warn(warning_msg)\n    else:\n        warning_msg = None\n\n    return accuracy, warning_msg"}
{"task_id": "BigCodeBench/860", "solution": "import re\nimport random\nimport string\ndef task_func(n, pattern, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    # Generate a random string of length 'n' composed of ASCII Letters and Digits\n    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=n))\n    \n    # Find all non-overlapping matches of the regex 'pattern' in the random string\n    matches = re.findall(pattern, random_string)\n    \n    return matches"}
{"task_id": "BigCodeBench/861", "solution": "from collections import Counter\nfrom random import choice, seed\nPOSSIBLE_ITEMS = ['apple', 'banana', 'cherry', 'date', 'elderberry']\ndef task_func(list_of_lists):\n    \"\"\"\n    This function creates a \"shopping cart\" (Counter object) for each list in the input list_of_lists.\n    \"\"\"\n    baskets = []\n    for sublist in list_of_lists:\n        seed(0)  # Optional: to get consistent results, remove for true randomness\n        basket = Counter({choice(POSSIBLE_ITEMS): len(sublist)} for _ in range(len(sublist)))\n        baskets.append(basket)\n    return baskets"}
{"task_id": "BigCodeBench/862", "solution": "import random\nimport string\nfrom collections import defaultdict\ndef task_func(n, seed=None):\n    \"\"\"\n    The function is defined as described in the problem statement.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    letter_dict = defaultdict(list)\n    alphabet = string.ascii_lowercase\n    \n    generated_letters = random.choices(alphabet, k=n)\n    \n    for letter in generated_letters:\n        letter_dict[letter].append(letter)\n    \n    return letter_dict"}
{"task_id": "BigCodeBench/863", "solution": "import numpy as np\nPOSSIBLE_NUMBERS = np.arange(1, 11)\ndef task_func(list_of_lists):\n    \"\"\"\n    Calculate the sum of the squares of numbers from a predefined range (POSSIBLE_NUMBERS) \n    for each list in list_of_lists. The number of elements considered from POSSIBLE_NUMBERS \n    is determined by the length of each list.\n\n    Parameters:\n    - list_of_lists (list): A list of lists, each representing a set of numbers.\n\n    Returns:\n    - sums (list): A list of sums of squares.\n    \"\"\"\n    sums = []\n    for lst in list_of_lists:\n        # Take the first 'len(lst)' numbers from POSSIBLE_NUMBERS, square them, and sum.\n        sum_of_squares = np.sum(np.power(POSSIBLE_NUMBERS[:len(lst)], 2))\n        sums.append(sum_of_squares)\n    return sums"}
{"task_id": "BigCodeBench/864", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(fruit_data):\n    if not fruit_data:\n        return pd.DataFrame(columns=['Total Count', 'Average Count'])\n    \n    # Create a DataFrame from the fruit_data\n    df = pd.DataFrame(fruit_data, columns=['Fruit', 'Count'])\n    \n    # Group by fruit and calculate the sum and mean\n    grouped = df.groupby('Fruit').agg({'Count': ['sum', 'mean']})\n    \n    # Rename columns for clarity\n    grouped.columns = ['Total Count', 'Average Count']\n    \n    # Reset index to make 'Fruit' the index\n    grouped.reset_index(inplace=True)\n    \n    return grouped.set_index('Fruit')"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    \"\"\"\n    This function takes a list of tuples containing elements and their respective counts and weights. \n    It normalizes the counts using z-score normalization and the weights using min-max scaling. \n    Finally, it returns a pandas DataFrame with the items, normalized counts, and normalized weights.\n    \"\"\"\n    # Separate data into elements, counts, and weights\n    elements, counts, weights = zip(*data)\n    \n    # Normalize counts using z-score normalization\n    normalized_counts = zscore(np.array(counts))\n    \n    # Normalize weights using min-max scaling\n    scaler = MinMaxScaler()\n    normalized_weights = scaler.fit_transform(np.array(weights).reshape(-1, 1))\n    \n    # Combine normalized counts and weights with elements into a DataFrame\n    df = pd.DataFrame({\n        'Item': elements,\n        'Normalized Count': normalized_counts,\n        'Normalized Weight': normalized_weights.flatten()\n    })\n    \n    return df"}
{"task_id": "BigCodeBench/866", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=2, random_state=0):\n    \"\"\"\n    Perform KMeans clustering on a list of data points with 2D coordinates and \n    return the cluster labels.\n    \"\"\"\n    # Extract coordinates from the data tuples\n    coordinates = np.array([[point[1], point[2]] for point in data])\n    \n    # Initialize and fit the KMeans model\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state)\n    kmeans.fit(coordinates)\n    \n    # Assign labels to the data points\n    labels = kmeans.labels_\n    \n    # Return the cluster labels\n    return labels"}
{"task_id": "BigCodeBench/867", "solution": "import re\nimport string\ndef task_func(text1, text2):\n    \"\"\"\n    This function takes two strings, removes any ASCII punctuation using regular expressions, \n    and returns the cleaned strings as a tuple.\n    \"\"\"\n    # Remove ASCII punctuation from both strings\n    cleaned_text1 = re.sub(r'[{}]+'.format(re.escape(string.punctuation)), '', text1)\n    cleaned_text2 = re.sub(r'[{}]+'.format(re.escape(string.punctuation)), '', text2)\n    \n    return cleaned_text1, cleaned_text2"}
{"task_id": "BigCodeBench/868", "solution": "from itertools import cycle\nfrom random import choice, seed\ndef task_func(n_colors, colors=['Red', 'Green', 'Blue', 'Yellow', 'Purple'], rng_seed=None):\n    if n_colors <= 0:\n        return []\n    \n    if rng_seed is not None:\n        seed(rng_seed)\n    \n    # Create a cycle iterator for the given colors\n    cycle_iter = cycle(colors)\n    \n    # Generate the pattern: every other color is from the cycle, the others are random\n    color_pattern = []\n    for i in range(n_colors):\n        if i % 2 == 0:\n            color_pattern.append(next(cycle_iter))\n        else:\n            color_pattern.append(choice(colors))\n    \n    return color_pattern"}
{"task_id": "BigCodeBench/869", "solution": "import pandas as pd\nfrom itertools import cycle\nfrom random import randint, seed\ndef task_func(n_grades, students=['Alice', 'Bob', 'Charlie', 'David', 'Eve'], grade_range=range(1, 11), rng_seed=None):\n    if not students:\n        raise ValueError(\"The list of students cannot be empty.\")\n    \n    if rng_seed is not None:\n        seed(rng_seed)\n    \n    student_cycle = cycle(students)\n    grades = [randint(*grade_range) for _ in range(n_grades)]\n    students_grades = [(next(student_cycle), grade) for grade in grades]\n    \n    return pd.DataFrame(students_grades, columns=['Student', 'Grade'])"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    \"\"\"\n    The function to calculate the mean of numerical values in each position across tuples in a list.\n    \"\"\"\n    # Filter out non-numerical values and track their positions\n    numeric_data = [[val for val in sublist if isinstance(val, (int, float))] for sublist in data_list]\n    \n    # Compute means for each position, ignoring empty spots\n    means = [np.mean(col) for col in zip(*numeric_data) if col]\n    \n    # Create index for DataFrame\n    index = [f'Position {i}' for i in range(len(means))]\n    \n    # Create DataFrame\n    df = pd.DataFrame({'Mean Value': means}, index=index)\n    \n    return df"}
{"task_id": "BigCodeBench/871", "solution": "import numpy as np\nimport itertools\ndef task_func(data_list, file_name):\n    if not data_list:\n        with open(file_name, 'w') as file:\n            pass\n        return []\n\n    numeric_data = [[val if isinstance(val, (int, float)) else np.nan for val in tup[1:]] for tup in data_list]\n    means = [np.nanmean(col) for col in zip(*numeric_data)]\n\n    with open(file_name, 'w') as file:\n        for pos, mean in enumerate(means, start=1):\n            file.write(f\"Position {pos}: {mean:.1f}\\n\")\n\n    return means\ndata_list = [('hi', 'test', -12, 4), ('hallo', 1.2, 'test'), ('hola', -3, 34, 12.1)]"}
{"task_id": "BigCodeBench/872", "solution": "import numpy as np\nimport itertools\ndef task_func(data_list):\n    if not data_list:\n        return []\n    \n    # Unzip tuples into separate lists for each position\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=0))\n    \n    means = []\n    for col in unzipped_data:\n        # Filter out non-numeric values\n        numeric_values = [x for x in col if isinstance(x, (int, float))]\n        if numeric_values:\n            means.append(np.mean(numeric_values))\n        else:\n            means.append(np.nan)  # If all values are non-numeric or missing\n    \n    return means"}
{"task_id": "BigCodeBench/873", "solution": "import csv\nimport os\ndef task_func(data, file_path, headers):\n    if file_path is None:\n        raise ValueError(\"file_path cannot be None\")\n\n    # Ensure the directory exists, create if it doesn't\n    directory = os.path.dirname(file_path)\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(headers)  # Write headers\n\n        # Ensure each row has the same number of elements as headers, fill with None if not\n        for row in data:\n            while len(row) < len(headers):\n                row += (None,)\n            writer.writerow(row)\n\n    return os.path.abspath(file_path)"}
{"task_id": "BigCodeBench/874", "solution": "from itertools import zip_longest\nfrom scipy.spatial import distance\ndef task_func(points):\n    \"\"\"\n    The function to calculate Euclidean distances between consecutive points in 2D space.\n    \"\"\"\n    # Handling single point or empty list\n    if len(points) < 2:\n        return []\n    \n    # Ensuring each point is a tuple of two coordinates\n    points = [(p if isinstance(p, tuple) else (p, p)) for p in points]\n    \n    # Calculating distances\n    distances = [distance.euclidean(p1, p2) for p1, p2 in zip_longest(points[:-1], points[1:], fillvalue=points[-1])]\n    \n    return distances"}
{"task_id": "BigCodeBench/875", "solution": "import pandas as pd\nimport random\ndef task_func(data, columns=['Name', 'Age', 'Occupation'], fill_missing=False, num_range=(0, 100), seed=None):\n    if seed is not None:\n        random.seed(seed)\n    \n    # Determine maximum length of tuples for determining DataFrame structure\n    max_len = max(len(row) for row in data)\n    \n    # Create DataFrame with None for missing values\n    df = pd.DataFrame(data, columns=columns[:max_len])\n    \n    # Fill missing numeric values with random numbers if fill_missing is True\n    if fill_missing:\n        for col in columns:\n            if col not in df.columns:\n                continue\n            if pd.api.types.is_numeric_dtype(df[col]):\n                df[col].fillna(random.uniform(num_range[0], num_range[1]), inplace=True)\n    \n    return df"}
{"task_id": "BigCodeBench/876", "solution": "import collections\nimport operator\nimport os\nimport shutil\ndef task_func(data_dict, source_directory, backup_directory):\n    # Step 1: Update the dictionary by adding a key 'a' with the value 1\n    data_dict['a'] = 1\n\n    # Step 2: Sort the dictionary by the frequency of its values\n    # First, create a Counter object to count the frequency of values\n    value_counts = collections.Counter(data_dict.values())\n    # Then, sort the dictionary items by the frequency of their values\n    value_frequencies = sorted(value_counts.items(), key=operator.itemgetter(1), reverse=True)\n\n    # Step 3: Backup files from the source directory to the backup directory\n    backup_status = True\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n    for filename in os.listdir(source_directory):\n        src_file = os.path.join(source_directory, filename)\n        dest_file = os.path.join(backup_directory, filename)\n        try:\n            shutil.copy2(src_file, dest_file)\n        except Exception as e:\n            print(f\"Error backing up {src_file}: {e}\")\n            backup_status = False\n\n    return data_dict, value_frequencies, backup_status"}
{"task_id": "BigCodeBench/877", "solution": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n    if not data.select_dtypes(include='number').empty:\n        raise ValueError(\"DataFrame must contain only numeric data.\")\n    if n_components > data.shape[1]:\n        raise ValueError(\"n_components cannot be greater than the number of columns in the data.\")\n    if data.empty:\n        raise ValueError(\"Input data cannot be empty.\")\n    \n    # Scaling the data\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(data)\n    \n    # Performing PCA\n    pca = PCA(n_components=n_components)\n    principal_components = pca.fit_transform(scaled_data)\n    \n    # Converting to DataFrame\n    principal_df = pd.DataFrame(data=principal_components, columns=[f'PC{i+1}' for i in range(n_components)])\n    \n    return principal_df"}
{"task_id": "BigCodeBench/878", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\ndef task_func(data, target, test_size=0.2, random_state=None):\n    # Convert the dictionary to a DataFrame\n    data_df = pd.DataFrame(data)\n    \n    # Check if the DataFrame is empty or if the target column exists\n    if data_df.empty:\n        raise ValueError(\"The input DataFrame is empty.\")\n    if target not in data_df.columns:\n        raise ValueError(\"The target column name is not in the DataFrame.\")\n    \n    # Split the dataset into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(\n        data_df.drop(columns=[target]), \n        data_df[target], \n        test_size=test_size, \n        random_state=random_state\n    )\n    \n    # Initialize the RandomForestRegressor\n    model = RandomForestRegressor(random_state=random_state)\n    \n    # Train the model\n    model.fit(X_train, y_train)\n    \n    # Make predictions\n    y_pred = model.predict(X_test)\n    \n    # Calculate the Mean Squared Error\n    mse = mean_squared_error(y_test, y_pred)\n    \n    return mse, model, data_df\ndata = {'feature1': [1,2,3], 'feature2': [2,3,4], 'target': [5,6,7]}"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n    if data.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    \n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(f\"Columns {col1} or {col2} not found in the DataFrame.\")\n    \n    # Check if columns are categorical\n    if not (data[col1].dtype.name == 'category' and data[col2].dtype.name == 'category'):\n        raise TypeError(\"Both columns must contain categorical data.\")\n    \n    # Check if each category has at least 5 observations for chi-square validity\n    min_category_count = data[col1].value_counts().min()\n    if min_category_count < 5 or data[col2].value_counts().min() < 5:\n        raise ValueError(\"Some categories have less than 5 observations, which violates chi-square test assumptions.\")\n    \n    # Create contingency table\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    \n    # Perform chi-square test\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    \n    return p"}
{"task_id": "BigCodeBench/880", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=3, seed=None):\n    \"\"\"\n    Perform K-Means clustering on the given DataFrame.\n    \"\"\"\n    # Check if the data contains only numerical values\n    if not data.select_dtypes(include=[np.number]).equals(data):\n        raise ValueError(\"The DataFrame must contain only numerical data.\")\n    \n    # Initialize KMeans model with the given parameters\n    kmeans = KMeans(n_clusters=n_clusters, n_init=10, random_state=seed)\n    \n    # Fit the model and predict clusters\n    labels = kmeans.fit_predict(data)\n    \n    return labels, kmeans"}
{"task_id": "BigCodeBench/881", "solution": "import pandas as pd\nimport random\nimport re\ndef task_func(csv_file, column_name='data', pattern='\\d+[xX]', sample_size=None, seed=42):\n    random.seed(seed)  # Set the seed for reproducibility\n    \n    # Read the CSV file\n    df = pd.read_csv(csv_file)\n    \n    # Apply the regex pattern to the specified column\n    mask = df[column_name].apply(lambda x: bool(re.search(pattern, x)))\n    matched_rows = df[mask]\n    \n    # If sample_size is specified, take a random sample\n    if sample_size is not None and sample_size < len(matched_rows):\n        indices = random.sample(range(len(matched_rows)), sample_size)\n        sampled_rows = matched_rows.iloc[indices]\n    else:\n        sampled_rows = matched_rows\n    \n    # Return the DataFrame with matched rows, optionally sampled\n    return sampled_rows"}
{"task_id": "BigCodeBench/882", "solution": "import sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_file, table_name, column_name, pattern='\\d+[xX]'):\n    if not os.path.exists(db_file):\n        raise ValueError(f\"The database file {db_file} does not exist.\")\n    \n    # Connect to SQLite database\n    conn = sqlite3.connect(db_file)\n    cursor = conn.cursor()\n    \n    # Query to fetch data\n    cursor.execute(f\"SELECT * FROM {table_name}\")\n    rows = cursor.fetchall()\n    \n    # Get column names\n    column_info = cursor.description\n    columns = [col[0] for col in column_info]\n    \n    # Convert fetched data into DataFrame\n    data = pd.DataFrame(rows, columns=columns)\n    \n    # Apply regex pattern to the specified column\n    data['match'] = data[column_name].str.contains(pattern, regex=True)\n    \n    # Filter rows where there is a match\n    matched_data = data[data['match']]\n    \n    # Drop the 'match' column as it's not part of original data\n    matched_data = matched_data.drop(columns=['match'])\n    \n    # Close the connection\n    conn.close()\n    \n    return matched_data"}
{"task_id": "BigCodeBench/883", "solution": "import pandas as pd\nfrom statsmodels.tsa.stattools import adfuller\ndef task_func(df: pd.DataFrame, column_a: str, column_b: str, column_c: str) -> bool:\n    # Filter the DataFrame based on the conditions\n    filtered_df = df[(df[column_b] > 50) & (df[column_c] == 900)]\n    \n    # If column_a is empty after filtering, return True\n    if filtered_df.empty:\n        return True\n    \n    # Check if column_a values are constant after filtering\n    if len(filtered_df[column_a].unique()) == 1:\n        return True\n    \n    # Perform Augmented Dickey-Fuller test\n    result = adfuller(filtered_df[column_a])\n    \n    # Check if the p-value is less than 0.05\n    if result[1] < 0.05:\n        return True\n    else:\n        return False"}
{"task_id": "BigCodeBench/884", "solution": "import pandas as pd\nfrom scipy.stats import chi2_contingency\ndef task_func(df, columns=['A', 'B', 'C'], larger=50, equal=900):\n    if len(columns) != 3:\n        raise ValueError(\"Exactly three columns must be specified.\")\n    if not all(column in df.columns for column in columns):\n        raise ValueError(\"One or more specified columns are not in the DataFrame.\")\n    \n    # Filter the DataFrame based on the criteria\n    filtered_df = df[(df[columns[1]] > larger) & (df[columns[2]] == equal)]\n    \n    # Check if there's sufficient data after filtering\n    if filtered_df.empty:\n        raise ValueError(\"No rows meet the filtering criteria.\")\n    \n    # Conduct chi-square contingency test on the first two columns\n    contingency_table = pd.crosstab(filtered_df[columns[0]], filtered_df[columns[1]])\n    \n    # Perform the chi-square independence test\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    \n    return p"}
{"task_id": "BigCodeBench/885", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(df, col_a='A', col_b='B', col_c='C', seed=None):\n    # Check if df is empty or if specified columns are not in df\n    if df.empty or not all(col in df.columns for col in [col_a, col_b, col_c]):\n        return None, None\n    \n    # Filter rows based on conditions\n    df_filtered = df[(df[col_b] > 50) & (df[col_c] == 900)]\n    \n    # Check if df is empty after filtering\n    if df_filtered.empty:\n        return None, None\n    \n    # Check if data is numeric\n    if not all(df_filtered[col].dtype.kind in 'bfiu' for col in [col_a, col_b]):\n        return None, None\n    \n    # Split the data into features (X) and target (y)\n    X = df_filtered[[col_a]]\n    y = df_filtered[[col_b]]\n    \n    # Split the dataset into training set and test set\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=seed)\n    \n    # Create and train the Linear Regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train.values.ravel())\n    \n    # Make predictions\n    predictions = model.predict(X_test)\n    \n    return predictions, model"}
{"task_id": "BigCodeBench/886", "solution": "import pandas as pd\nfrom collections import Counter\ndef task_func(data):\n    required_keys = {'Name', 'Age', 'Score'}\n    if not required_keys.issubset(data.keys()):\n        raise ValueError(\"Input data must contain 'Name', 'Age', and 'Score' keys.\")\n    \n    # Create DataFrame\n    df = pd.DataFrame(data)\n    \n    # Sort DataFrame by 'Name' and 'Age'\n    df_sorted = df.sort_values(by=['Name', 'Age'])\n    \n    # Calculate average scores per student\n    avg_scores = df.groupby('Name')['Score'].mean()\n    \n    # Find the most common age\n    common_age = Counter(data['Age']).most_common(1)[0][0] if data['Age'] else None\n    \n    return df_sorted, avg_scores, common_age"}
{"task_id": "BigCodeBench/887", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(T1, row_num=50, seed=None):\n    np.random.seed(seed)\n    \n    # Convert string representations of integers to integers\n    converted_ints = [int(item) for sublist in T1 for item in sublist]\n    \n    # Determine the number of columns by summing the integers\n    num_columns = sum(converted_ints)\n    \n    # Create a DataFrame with random numbers\n    columns = [f\"Col_{i}\" for i in range(1, num_columns + 1)]\n    data = np.random.randint(0, 100, (row_num, num_columns))\n    df = pd.DataFrame(data, columns=columns)\n    \n    return df"}
{"task_id": "BigCodeBench/888", "solution": "import pandas as pd\nimport os\ndef task_func(data_dir: str, csv_files: list) -> pd.DataFrame:\n    \"\"\"\n    Merge / Concatenate multiple CSV files from a specified directory into a single Pandas DataFrame.\n    \n    If an empty list of files is passed, an empty DataFrame is returned.\n    \n    Parameters:\n    data_dir (str): The directory path where the CSV files are located.\n    csv_files (list): A list of CSV file names to be merged.\n    \n    Returns:\n    pd.DataFrame: A pandas DataFrame with the merged data.\n    \"\"\"\n    if not csv_files:\n        return pd.DataFrame()  # Return an empty DataFrame if the list is empty\n    \n    dfs = []\n    for file in csv_files:\n        file_path = os.path.join(data_dir, file)\n        if os.path.isfile(file_path):\n            dfs.append(pd.read_csv(file_path))\n        else:\n            print(f\"Warning: File {file_path} not found.\")\n    \n    return pd.concat(dfs, ignore_index=True)"}
{"task_id": "BigCodeBench/889", "solution": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(data_dir: str, csv_file: str) -> pd.DataFrame:\n    \"\"\"\n    Load a CSV file into a pandas DataFrame and replace the NaN values in\n    numeric columns with the mean of the corresponding column.\n    The resulting DataFrame is returned.\n    \n    If an empty csv is passed, an empty DataFrame is returned.\n    \n    Parameters:\n    - data_dir (str): The path to the directory containing the CSV file.\n    - csv_file (str): The name of the CSV file to be processed.\n    \n    Returns:\n    pd.DataFrame: A pandas DataFrame with the processed data.\n    \n    Raises:\n    FileNotFoundError: If csv_file does not exist.\n    \"\"\"\n    # Check if the file exists\n    file_path = os.path.join(data_dir, csv_file)\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"{csv_file} does not exist in {data_dir}.\")\n    \n    # Load the CSV file into a DataFrame\n    df = pd.read_csv(file_path)\n    \n    # Check if DataFrame is empty\n    if df.empty:\n        return df\n    \n    # Identify numeric columns to handle NaN values\n    numeric_cols = df.select_dtypes(include=np.number).columns.tolist()\n    \n    # Replace NaN values in numeric columns with the mean\n    df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n    \n    return df"}
{"task_id": "BigCodeBench/890", "solution": "import os\nimport random\nimport pandas as pd\ndef task_func(data_dir, csv_files=['file1.csv', 'file2.csv', 'file3.csv'], seed=None):\n    if seed is not None:\n        random.seed(seed)\n        \n    # Randomly select a csv file\n    selected_file = random.choice(csv_files)\n    file_path = os.path.join(data_dir, selected_file)\n    \n    # Check if the file exists\n    if not os.path.isfile(file_path):\n        return selected_file, pd.DataFrame()\n    \n    # Load the data from the selected csv file\n    try:\n        data = pd.read_csv(file_path)\n    except Exception as e:\n        print(f\"Error reading {selected_file}: {e}\")\n        return selected_file, pd.DataFrame()\n    \n    # If the DataFrame is empty, return an empty DataFrame\n    if data.empty:\n        return selected_file, pd.DataFrame()\n    \n    # Randomly select records (for demonstration, let's select all rows randomly)\n    # You can modify this part to select a certain number of records, e.g., data.sample(n=5)\n    selected_data = data.sample(frac=1)  # Shuffles the data\n    \n    return selected_file, selected_data"}
{"task_id": "BigCodeBench/891", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\ndef task_func(csv_file_path, attribute, test_size=0.2, random_state=42):\n    # Load the dataset\n    data = pd.read_csv(csv_file_path)\n    \n    # Separate features (all columns except the target attribute) and target\n    X = data.drop(attribute, axis=1)\n    y = data[attribute]\n    \n    # Split the dataset into training set and test set\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n    \n    # Create a Linear Regression model\n    model = LinearRegression()\n    \n    # Train the model using the training sets\n    model.fit(X_train, y_train)\n    \n    # Make predictions using the testing set\n    predictions = model.predict(X_test)\n    \n    return model, predictions"}
{"task_id": "BigCodeBench/892", "solution": "import random\nfrom collections import Counter\ndef task_func(strings: list) -> dict:\n    \"\"\"\n    Analyzes a given list of strings for the occurrence of a specific pattern and counts the occurrences.\n\n    Parameters:\n    - strings (list): A list of strings to be analyzed.\n\n    Returns:\n    dict: A dictionary with results of string analysis showing counts of the pattern.\n\n    Note: The specific pattern isn't defined in the problem statement. Assuming the pattern to find is the length of the substring before the last '}' character, which seems to be implied by the example.\n\n    Example:\n    >>> task_func(['abcd}def}', 'pqrs}tuv}', 'wxyz}123}', '456}789}', '0ab}cde}'])\n    Counter({2: 10})\n    \"\"\"\n    pattern_counts = Counter()\n\n    for s in strings:\n        # Assuming the pattern is the length of the string segment before the last '}'.\n        # If the pattern definition is different, adjust the logic accordingly.\n        if '}' in s:\n            pattern_length = len(s) - s[::-1].index('}') - 1\n            pattern_counts[pattern_length] += len(s)\n        else:\n            # If no '}' is found, handle as needed. Here, it's simply not counted.\n            pass\n\n    return pattern_counts"}
{"task_id": "BigCodeBench/893", "solution": "import re\nfrom datetime import datetime\ndef task_func(logs: list):\n    error_times = []\n    for log in logs:\n        # Extract timestamp and log level using regex\n        match = re.match(r'(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\s+(ERROR):', log)\n        if match:\n            # Convert the extracted timestamp string into a datetime object\n            timestamp_str = match.group(1)\n            timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')\n            # Extract the time part and add it to the list\n            error_time = timestamp.time()\n            error_times.append(error_time)\n    \n    # Calculate average time if there are errors\n    if error_times:\n        total_seconds = sum([time.hour * 3600 + time.minute * 60 + time.second for time in error_times])\n        avg_seconds = total_seconds / len(error_times)\n        avg_time = datetime.time(hour=int(avg_seconds // 3600), minute=int((avg_seconds % 3600) // 60), second=int(avg_seconds % 60))\n        return error_times, avg_time\n    else:\n        return error_times, None"}
{"task_id": "BigCodeBench/894", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nARRAY_SIZE = 10000\ndef task_func():\n    # Generate a numeric array of random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n    \n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n    \n    # Create a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=range(1, 101), edgecolor='black', alpha=0.7)\n    \n    # Labeling\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    \n    # Plotting mean and standard deviation\n    ax.axvline(mean, color='red', linestyle='dashed', linewidth=2)\n    ax.axvline(mean - std, color='purple', linestyle='dashed', linewidth=2)\n    ax.axvline(mean + std, color='purple', linestyle='dashed', linewidth=2)\n    \n    plt.tight_layout()\n    \n    return array, mean, std, ax"}
{"task_id": "BigCodeBench/895", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nARRAY_SIZE = 10000\ndef task_func():\n    # Generate a numeric array of random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n    \n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n    \n    # Create a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=100, edgecolor='black')\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    \n    # Plot the mean and standard deviation on the histogram\n    ax.axvline(mean, color='red', linestyle='--', label=f'Mean: {mean:.2f}')\n    ax.axvline(mean + std, color='purple', linestyle='--', label=f'Std Dev: {std:.2f}')\n    ax.axvline(mean - std, color='purple', linestyle='--')\n    \n    ax.legend()\n    \n    return array, mean, std, ax"}
{"task_id": "BigCodeBench/896", "solution": "from collections import Counter\nimport random\nimport itertools\ndef task_func(length, count, seed=0):\n    \"\"\"\n    Generate a number of random strings with a specified length from a fixed set of letters ('a', 'b', 'c', 'd', 'e'),\n    and analyze the frequency of each letter in the generated strings.\n    \n    Parameters:\n    - length (int): The length of each string to be generated. Should be a non-negative integer.\n    - count (int): The number of random strings to generate. Should be a non-negative integer.\n    - seed (int, optional): A seed for the random number generator to ensure reproducibility.\n    \n    Returns:\n    - Counter: A collections.Counter object containing the frequency of each letter in the generated strings.\n    \"\"\"\n    if seed:\n        random.seed(seed)\n    \n    # Ensure the length and count are non-negative integers\n    if length < 0 or count < 0:\n        raise ValueError(\"Length and count must be non-negative integers.\")\n    \n    # Generate random strings\n    letters = 'abcde'\n    random_strings = [''.join(random.choices(letters, k=length)) for _ in range(count)]\n    \n    # Analyze the frequency of each letter\n    combined_string = ''.join(random_strings)\n    letter_frequency = Counter(combined_string)\n    \n    return letter_frequency"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\nNUMBERS = list(range(1, 7))\ndef task_func(rolls, seed=None):\n    \"\"\"\n    Simulate a number of dice rolls, calculate the frequency of each result, and return both the frequency array and a histogram of the results.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    # Simulate dice rolls\n    rolls_results = [random.choice(NUMBERS) for _ in range(rolls)]\n    \n    # Calculate frequency\n    frequency = np.array([rolls_results.count(i) for i in NUMBERS])\n    \n    # Plot histogram\n    fig, ax = plt.subplots()\n    ax.hist(rolls_results, bins=NUMBERS, edgecolor='black')\n    ax.set_title('Histogram of Dice Rolls')\n    ax.set_xlabel('Dice Value')\n    ax.set_ylabel('Frequency')\n    \n    # Show plot (optional, can be commented out for automated tests)\n    # plt.show()\n    \n    return frequency, ax"}
{"task_id": "BigCodeBench/898", "solution": "from collections import Counter\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(count, seed=0):\n    \"\"\"\n    Generate a specific number of random letter pairs, each from a predefined list, and analyze the frequency of each pair.\n\n    Parameters:\n    - count (int): The number of letter pairs to generate.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility. Defaults to None.\n\n    Returns:\n    - Counter: A Counter object representing the frequency of each generated letter pair.\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Generate random letter pairs\n    letter_pairs = [(random.choice(LETTERS), random.choice(LETTERS)) for _ in range(count)]\n    \n    # Analyze the frequency of each pair\n    frequency = Counter(letter_pairs)\n    \n    return frequency"}
{"task_id": "BigCodeBench/899", "solution": "import numpy as np\nimport random\ndef task_func(length=10000, seed=0):\n    if length < 0:\n        raise ValueError(\"Length must be a non-negative integer.\")\n    \n    # Initialize the random seed for reproducibility\n    random.seed(seed)\n    \n    # Generate the random walk\n    steps = [random.choice([-1, 1]) for _ in range(length)]\n    \n    # Compute the cumulative sum to get the positions of the walk\n    positions = np.cumsum(steps)\n    \n    # Add the starting position (0) to the beginning of the array\n    positions = np.insert(positions, 0, 0)\n    \n    return positions"}
{"task_id": "BigCodeBench/900", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(d):\n    if not all(isinstance(i, dict) for i in d):\n        raise ValueError(\"Input should be a list of dictionaries.\")\n    \n    # Filter out dictionaries that don't have 'x', 'y', 'z'\n    valid_dicts = [i for i in d if set(i.keys()) >= {'x', 'y', 'z'}]\n    \n    if not valid_dicts:  # If no valid dictionaries are found\n        return {'x': None, 'y': None, 'z': None}\n    \n    # Convert to DataFrame for easy computation\n    df = pd.DataFrame(valid_dicts)\n    \n    stats = {key: df[key].describe().to_dict() for key in ['x', 'y', 'z']}\n    \n    # Remove 'count' and '50%' (median) from the statistics as they were not requested\n    for key in stats:\n        stats[key] = {k: v for k, v in stats[key].items() if k in ['mean', 'sum', 'max', 'min', 'std']}\n    \n    return stats"}
{"task_id": "BigCodeBench/901", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(d):\n    \"\"\"\n    Scale all values with the keys \"x,\" \"y\" and \"z\" from a list of dictionaries \"d\" with MinMaxScaler.\n    \"\"\"\n    # Filter out dictionaries that have 'x', 'y', 'z' keys and create a DataFrame\n    valid_dicts = [dikt for dikt in d if all(key in dikt for key in ['x', 'y', 'z'])]\n    if not valid_dicts:  # If the filtered list is empty, return an empty DataFrame\n        return pd.DataFrame()\n    \n    df = pd.DataFrame(valid_dicts)\n    \n    # Apply MinMaxScaler to the DataFrame\n    scaler = MinMaxScaler()\n    scaled_values = scaler.fit_transform(df[['x', 'y', 'z']])\n    \n    # Create a new DataFrame with scaled values\n    scaled_df = pd.DataFrame(scaled_values, columns=['x', 'y', 'z'])\n    \n    return scaled_df"}
{"task_id": "BigCodeBench/902", "solution": "import pandas as pd\nfrom collections import Counter\ndef task_func(d):\n    \"\"\"\n    Count the occurrence of values with the keys \"x,\" \"y\" and \"z\" from a list of dictionaries \"d.\"\n\n    Parameters:\n    d (list): A list of dictionaries.\n\n    Returns:\n    dict: A dictionary with keys as 'x', 'y', and 'z' and values as Counter objects.\n    \"\"\"\n    result = {'x': Counter(), 'y': Counter(), 'z': Counter()}\n    \n    for entry in d:\n        for key, value in entry.items():\n            if key in result:\n                result[key][value] += 1\n                \n    return result"}
{"task_id": "BigCodeBench/903", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(d, target='z'):\n    \"\"\"\n    Perform linear regression to \"x,\" \"y,\" against \"z\" from a list of dictionaries \"d.\"\n\n    Parameters:\n    d (list): A list of dictionaries.\n    target (str): The target variable for the regression.\n\n    Returns:\n    LinearRegression: A LinearRegression model.\n    \"\"\"\n    # Convert the list of dictionaries into a DataFrame\n    df = pd.DataFrame(d)\n    \n    # Ensure the target exists in the DataFrame\n    if target not in df.columns:\n        raise ValueError(f\"Target variable {target} not found in data.\")\n    \n    # Separate features (x, y) from the target\n    X = df[['x', 'y']]\n    y = df[target]\n    \n    # Initialize and fit the Linear Regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    return model"}
{"task_id": "BigCodeBench/904", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(d, keys=['x', 'y', 'z']):\n    \"\"\"\n    Plot values from a list of dictionaries based on specified keys and return the plot as a Matplotlib Axes object.\n    \n    Parameters:\n    d (list): A list of dictionaries containing numerical data.\n    keys (list, optional): A list of string keys to plot. Defaults to ['x', 'y', 'z'].\n\n    Returns:\n    Matplotlib Axes object: The plot showing the values of specified keys from the input list of dictionaries.\n    \"\"\"\n    # Convert the list of dictionaries to a DataFrame\n    df = pd.DataFrame(d)\n    \n    # Ensure all keys provided are in the DataFrame columns\n    for key in keys:\n        if key not in df.columns:\n            raise ValueError(f\"Key '{key}' not found in data.\")\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    \n    # For each key, plot the data\n    for key in keys:\n        ax.plot(df.index, df[key], label=key)\n    \n    ax.set_xlabel('Index')\n    ax.set_ylabel('Values')\n    ax.set_title('Plot of Specified Keys')\n    ax.legend()\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/905", "solution": "import os\nimport glob\nimport csv\ndef task_func(directory_path, file_extension='.csv'):\n    \"\"\"\n    The function implementation is provided here.\n    \"\"\"\n    data_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, f'*{file_extension}'))\n    \n    for file_path in file_paths:\n        filename = os.path.splitext(os.path.basename(file_path))[0]\n        rows = []\n        with open(file_path, 'r', encoding='utf-8') as file:\n            csv_reader = csv.reader(file)\n            for row in csv_reader:\n                rows.append(row)\n        data_dict[filename] = rows\n    \n    return data_dict"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives all processed files from a source directory to a target directory.\n    The function identifies processed files by the '_processed' suffix in the filename.\n\n    Parameters:\n        source_dir (str): The directory containing the files to be archived.\n        target_dir (str): The directory where the archive will be saved.\n        archive_name (str): The name of the archive file. Default is 'archive.zip'.\n\n    Returns:\n        str: The path to the created archive.\n    \"\"\"\n    # Ensure the target directory exists\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    # Get a list of processed files in the source directory\n    processed_files = [f for f in os.listdir(source_dir) if re.search(r'_processed\\.', f)]\n    \n    # Create a zip file in the target directory\n    archive_path = os.path.join(target_dir, archive_name)\n    with zipfile.ZipFile(archive_path, 'w') as zipf:\n        for file in processed_files:\n            # Construct the full file path and add it to the archive\n            file_path = os.path.join(source_dir, file)\n            zipf.write(file_path, os.path.basename(file))\n            # Optionally, you can delete the file after archiving\n            # os.remove(file_path)\n    \n    return archive_path"}
{"task_id": "BigCodeBench/907", "solution": "import os\nimport re\ndef task_func(pattern: str, replacement: str, directory: str) -> bool:\n    \"\"\"\n    Renames all files in a directory that match a particular pattern with a given replacement string.\n    \n    Parameters:\n        - pattern (str): The pattern to search for in the filenames.\n        - replacement (str): The string to replace the pattern with.\n        - directory (str): The directory in which to search for files.\n        \n    Returns:\n        Returns a boolean value. True if the operation was successful, otherwise False.\n    \"\"\"\n    try:\n        # Check if directory exists\n        if not os.path.isdir(directory):\n            return False\n\n        # Rename files\n        for filename in os.listdir(directory):\n            if re.search(pattern, filename):\n                new_filename = re.sub(pattern, replacement, filename)\n                old_file_path = os.path.join(directory, filename)\n                new_file_path = os.path.join(directory, new_filename)\n                os.rename(old_file_path, new_file_path)\n        \n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False"}
{"task_id": "BigCodeBench/908", "solution": "import os\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(directory: str, pattern: str) -> list:\n    \"\"\"\n    The function to search, read, and plot sales data.\n    \"\"\"\n    axes_list = []\n    \n    # Find all CSV files matching the pattern in the directory\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename) and filename.endswith('.csv'):\n            filepath = os.path.join(directory, filename)\n            \n            # Read the CSV file into a DataFrame\n            df = pd.read_csv(filepath)\n            \n            # Check if required columns exist\n            if 'Month' in df.columns and 'Sales' in df.columns:\n                # Create a plot\n                fig, ax = plt.subplots()\n                ax.plot(df['Month'], df['Sales'])\n                ax.set_title(filename)\n                ax.set_xlabel('Month')\n                ax.set_ylabel('Sales')\n                \n                # Append the axis to the list\n                axes_list.append(ax)\n            else:\n                print(f\"File {filename} does not have 'Month' and 'Sales' columns.\")\n    return axes_list"}
{"task_id": "BigCodeBench/909", "solution": "import pandas as pd\nimport itertools\nfrom random import shuffle\ndef task_func(letters=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], categories=['Category 1', 'Category 2', 'Category 3']):\n    # Shuffle the categories to randomize them\n    shuffle(categories)\n    \n    # Create an iterator that repeats the categories to match the length of letters\n    category_iterator = itertools.cycle(categories)\n    \n    # Combine letters and categories into a list of tuples\n    letter_category_pairs = [(letter, next(category_iterator)) for letter in letters]\n    \n    # Convert the list of tuples into a DataFrame\n    df = pd.DataFrame(letter_category_pairs, columns=['Letter', 'Category'])\n    \n    # To ensure each letter is associated with each category at least once when the number of letters is a multiple of categories\n    if len(letters) % len(categories) == 0:\n        for _ in range(len(letters) // len(categories) - 1):\n            shuffle(categories)  # Shuffle categories again for the next round\n            category_iterator = itertools.cycle(categories)\n            letter_category_pairs.extend([(letter, next(category_iterator)) for letter in letters])\n        df = pd.DataFrame(letter_category_pairs, columns=['Letter', 'Category'])\n    \n    return df"}
{"task_id": "BigCodeBench/910", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(letters, repetitions, colors):\n    if not letters or not repetitions or not colors:\n        raise ValueError(\"Input lists cannot be empty.\")\n    if len(letters) != len(repetitions) or len(letters) != len(colors):\n        raise ValueError(\"The lengths of 'letters', 'repetitions', and 'colors' must match.\")\n    \n    # Flatten the list to get the total frequency of each letter\n    flattened_list = [item for sublist in [[letter]*rep for letter, rep in zip(letters, repetitions)] for item in sublist]\n    frequency = np.array(flattened_list).reshape(len(letters), -1).sum(axis=1)\n    \n    # Create bar chart\n    ax = plt.figure(figsize=(10, 6)).add_subplot(111)\n    bars = ax.bar(letters, frequency, color=colors)\n    \n    # Set labels and title\n    ax.set_xlabel('Letters')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of Letters')\n    \n    return ax"}
{"task_id": "BigCodeBench/911", "solution": "from functools import reduce\nimport operator\nimport string\nLETTER_TO_NUMBER = {letter: index + 1 for index, letter in enumerate(string.ascii_uppercase)}\ndef task_func(letters):\n    \"\"\"\n    Calculate the product of the corresponding numbers for a list of uppercase letters, \n    where \"A\" corresponds to 1, \"B\" to 2, etc.\n    \n    Parameters:\n    letters (list of str): A list of uppercase letters.\n    \n    Returns:\n    int: The product of the numbers corresponding to the input letters.\n    \"\"\"\n    # Use reduce to multiply the mapped numbers together\n    return reduce(operator.mul, (LETTER_TO_NUMBER[letter] for letter in letters), 1)"}
{"task_id": "BigCodeBench/912", "solution": "from collections import Counter\nimport itertools\ndef task_func(letters: list, repetitions: int) -> dict:\n    \"\"\"\n    Count the frequency of each letter in a list after repeating it a given number of times.\n\n    Parameters:\n    - letters (list): A list of single-character strings representing letters.\n    - repetitions (int): The number of times to repeat the list.\n\n    Returns:\n    A dictionary where the keys are the letters and the values are their frequencies.\n    \"\"\"\n    # Repeat the list and then count the frequency of each item\n    repeated_letters = list(itertools.chain.from_iterable(itertools.repeat(letters, repetitions)))\n    frequency_counter = Counter(repeated_letters)\n    \n    return dict(frequency_counter)"}
{"task_id": "BigCodeBench/913", "solution": "from typing import List, Union\nimport numpy as np\nimport scipy.stats\nimport scipy.fft\ndef task_func(data: List[Union[int, str]], repetitions: int = 1) -> dict:\n    if not data or repetitions <= 0:\n        return {'mode': np.array([], dtype=object), 'count': np.array([]), 'fft': np.array([])}\n\n    # Repeat the data\n    repeated_data = data * repetitions\n    \n    # Calculate the mode and its count\n    mode, count = scipy.stats.mode(repeated_data, keepdims=True)\n    mode = np.sort(mode[0])  # Sort the mode values\n    count = count[0]  # Extract the count values\n    \n    # Calculate the Fast Fourier Transform\n    fft_result = scipy.fft.fft(repeated_data)\n    \n    return {'mode': mode, 'count': count, 'fft': fft_result}"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Ensure the 'date' column is the index and sorted\n    df.set_index('date', inplace=True)\n    df.sort_index(inplace=True)\n\n    # Prepare the data: use the date as the feature (transformed to days since a fixed point)\n    df['days'] = (df.index - df.index[0]).total_seconds() / (24*60*60)\n    X = df['days'].values.reshape(-1,1)\n    y = df['closing_price'].values\n\n    # Train the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Predict the next 7 days\n    future_days = np.arange(X[-1]+1, X[-1]+8).reshape(-1,1)\n    pred_prices = model.predict(future_days)\n\n    # Plot the data and predictions\n    plt.figure(figsize=(10,5))\n    plt.plot(df.index, df['closing_price'], label='Actual Prices')\n    plt.plot(pd.date_range(df.index[-1]+pd.Timedelta(days=1), periods=7), pred_prices, label='Predicted Prices', linestyle='--')\n    plt.title('Stock Closing Price Prediction')\n    plt.xlabel('Date')\n    plt.ylabel('Closing Price')\n    plt.legend()\n    plt.grid(True)\n    \n    # Return predictions and the plot's Axes object\n    return pred_prices.tolist(), plt.gca()"}
{"task_id": "BigCodeBench/915", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\ndef task_func(df, z_threshold=2):\n    # Ensure the 'closing_price' column is numeric\n    df['closing_price'] = pd.to_numeric(df['closing_price'], errors='coerce')\n    df.dropna(subset=['closing_price'], inplace=True)  # Remove rows with non-numeric values\n    \n    # Calculate Z-Scores\n    z_scores = zscore(df['closing_price'])\n    \n    # Identify outliers\n    outliers = df[(np.abs(z_scores) > z_threshold)]\n    \n    # Plotting the data\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['closing_price'], label='Closing Price', marker='o', linestyle='-')\n    ax.plot(outliers.index, outliers['closing_price'], label='Outlier', marker='o', color='red', linestyle='')\n    ax.axhline(0, color='black', linewidth=0.5)\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    ax.legend()\n    \n    return outliers, ax"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize the distribution of stock closing prices using both a box plot and a histogram\n    within a single figure. This function is designed to help understand the spread, central tendency,\n    and the distribution shape of stock closing prices.\n    \n    Parameters:\n    df (DataFrame): A pandas DataFrame containing at least one column named 'closing_price'\n                    with stock closing prices.\n    \n    Returns:\n    tuple: A tuple containing two matplotlib.axes._axes.Axes objects.\n    \"\"\"\n    # Create a new figure and a 1x2 grid for the plots\n    fig, axs = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Box Plot\n    sns.boxplot(x=df['closing_price'], ax=axs[0])\n    axs[0].set_title('Box Plot of Closing Prices')\n    axs[0].set_xlabel('Closing Prices')\n\n    # Histogram\n    sns.histplot(df['closing_price'], ax=axs[1], kde=True)\n    axs[1].set_title('Histogram of Closing Prices')\n    axs[1].set_xlabel('Closing Prices')\n\n    # Adjust layout to prevent overlap\n    plt.tight_layout()\n    \n    return axs[0], axs[1]"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Ensure the 'date' column is set as the index and is sorted\n    df.set_index('date', inplace=True)\n    df.sort_index(inplace=True)\n    \n    # Fit the ARIMA model\n    model = ARIMA(df['closing_price'], order=(1,1,1))\n    model_fit = model.fit()\n    \n    # Forecast for the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    df['closing_price'].plot(ax=ax, label='Observed')\n    forecast.plot(ax=ax, label='Forecast', color='red')\n    ax.set_title('Closing Price Forecast')\n    ax.legend()\n    \n    return forecast.tolist(), ax"}
{"task_id": "BigCodeBench/918", "solution": "import pandas as pd\nimport re\ndef task_func(data, mapping):\n    \"\"\"\n    Replace all acronyms in a DataFrame with their full words according to a provided dictionary.\n    \n    Parameters:\n    - data (dict): A dictionary where keys are column names and values are lists of strings.\n    - mapping (dict): A dictionary where keys are acronyms and values are the full words.\n    \n    Returns:\n    - pd.DataFrame: A DataFrame where all acronyms in string cells have been replaced with their full words.\n    \"\"\"\n    # Convert the input dictionary into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Function to replace acronyms in a string\n    def replace_acronyms(s, mapping):\n        return re.sub(r'\\b(' + '|'.join(mapping.keys()) + r')\\b', lambda m: mapping[m.group()], s)\n    \n    # Apply the function to each string in the DataFrame\n    for col in df.columns:\n        if df[col].dtype == 'object':  # Check if the column is of string type\n            df[col] = df[col].apply(lambda x: replace_acronyms(x, mapping))\n    \n    return df\ndata = {'text': ['NASA is great', 'I live in the USA']}\nmapping = {'NASA': 'National Aeronautics and Space Administration', 'USA': 'United States of America'}"}
{"task_id": "BigCodeBench/919", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nCATEGORIES = ['A', 'B', 'C', 'D', 'E']\ndef task_func(data, column):\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Create a Series that counts the occurrences of each category\n    category_counts = df[column].value_counts(sort=False)\n    \n    # Reindex the Series to include all categories, even those not present in the data\n    category_counts = category_counts.reindex(CATEGORIES, fill_value=0)\n    \n    # Plot the bar chart\n    ax = category_counts.plot(kind='bar', figsize=(10, 6))\n    \n    # Set the labels and title\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Count')\n    ax.set_title(f'Distribution of {column}')\n    \n    # Return the Axes object\n    return ax\ndata = {'Category': ['A', 'B', 'B', 'C', 'A', 'D', 'E', 'E', 'D']}"}
{"task_id": "BigCodeBench/920", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Draw and return a correlation matrix heatmap for a DataFrame containing numerical columns.\n    The title of the heatmap is set to 'Correlation Matrix'.\n    \n    Parameters:\n    data (pandas.DataFrame): The DataFrame containing numerical columns to be used for correlation.\n\n    Returns:\n    matplotlib.axes._axes.Axes: The matplotlib Axes object representing the heatmap.\n\n    \"\"\"\n    # Ensure the input is a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Calculate the correlation matrix\n    corr = df.corr()\n    \n    # Set up the matplotlib figure\n    plt.figure(figsize=(10, 8))\n    \n    # Draw the heatmap using seaborn\n    ax = sns.heatmap(corr, annot=True, fmt=\".2f\", cmap='coolwarm', square=True, cbar_kws={\"shrink\": .5})\n    \n    # Set the title of the heatmap\n    ax.set_title('Correlation Matrix')\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/921", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n    \"\"\"\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Initialize the MinMaxScaler\n    scaler = MinMaxScaler()\n    \n    # Fit and transform the specified columns\n    scaled_columns = scaler.fit_transform(df[columns])\n    \n    # Create a new DataFrame with the scaled columns\n    scaled_df = df.copy()\n    scaled_df[columns] = scaled_columns\n    \n    return scaled_df"}
{"task_id": "BigCodeBench/922", "solution": "import pandas as pd\nimport re\nSTOPWORDS = set([\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n    # ... (the rest of the stopwords)\n    \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"\n])\ndef task_func(data, column):\n    \"\"\"\n    Removes English stopwords from a text column in a DataFrame and returns the modified DataFrame.\n    \"\"\"\n    # Ensure the input is a DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pandas DataFrame\")\n    \n    # Check if the column exists in the DataFrame\n    if column not in data.columns:\n        raise ValueError(f\"Column '{column}' does not exist in the DataFrame\")\n    \n    # Define a function to remove stopwords from a single string\n    def remove_stopwords(text):\n        words = re.findall(r'\\b\\w+\\b', text.lower())  # Find words, convert to lower case\n        filtered_words = [word for word in words if word not in STOPWORDS]\n        return ' '.join(filtered_words)\n    \n    # Apply the function to the specified column\n    data[column] = data[column].apply(remove_stopwords)\n    \n    return data"}
{"task_id": "BigCodeBench/923", "solution": "import pandas as pd\nimport random\nimport re\ndef task_func(person_names, email_domains, num_records=5):\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient names or no email domains provided.\")\n    \n    records = []\n    for _ in range(num_records):\n        # Randomly select a name and email domain\n        name = random.choice(person_names)\n        domain = random.choice(email_domains)\n        \n        # Construct email and clean it\n        email = f\"{name.lower().replace(' ', '')}@{domain}\".replace(\"@\", \"[at]\")\n        records.append({\"Name\": name, \"Email\": email})\n    \n    return pd.DataFrame(records)"}
{"task_id": "BigCodeBench/924", "solution": "import pandas as pd\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    \"\"\"\n    Load a CSV file into a Pandas DataFrame, replace all occurrences of the string '\\n' with the string '<br>'\n    in the specified column, and return the cleaned DataFrame.\n    \n    Parameters:\n    - file_path (str): The path to the CSV file to be read.\n    - column_name (str): The name of the column in which to replace occurrences of '\\n' with '<br>'.\n    \n    Returns:\n    - pd.DataFrame: The cleaned Pandas DataFrame.\n    \"\"\"\n    # Check if the file exists\n    if not os.path.exists(file_path):\n        print(f\"Error: The file {file_path} does not exist.\")\n        sys.exit(1)\n    \n    # Load the CSV file into a DataFrame\n    df = pd.read_csv(file_path)\n    \n    # Replace '\\n' with '<br>' in the specified column\n    df[column_name] = df[column_name].str.replace('\\n', '<br>')\n    \n    return df"}
{"task_id": "BigCodeBench/925", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(data_size=1000, column_names=['A', 'B', 'C', 'D', 'E'], seed=0):\n    \"\"\"\n    Generate a Pandas DataFrame with random numeric values between 1 and 100, inclusive, and replace all occurrences of values less than 10 with -1.\n    \n    Parameters:\n    - data_size (int, optional): The number of rows in the DataFrame. Defaults to 1000.\n    - column_names (list of str, optional): Names of the DataFrame columns. Defaults to ['A', 'B', 'C', 'D', 'E'].\n\n    Returns:\n    - DataFrame: The modified Pandas DataFrame.\n    \"\"\"\n    # Set the seed for reproducibility\n    np.random.seed(seed)\n    \n    # Generate a DataFrame with random values\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n    \n    # Replace values less than 10 with -1\n    df[df < 10] = -1\n    \n    return df"}
{"task_id": "BigCodeBench/926", "solution": "import pandas as pd\nimport sqlite3\ndef task_func(db_path: str, table_name: str, column_name: str) -> pd.DataFrame:\n    # Connect to SQLite database\n    conn = sqlite3.connect(db_path)\n    \n    # Load data from the specified table into a DataFrame\n    df = pd.read_sql_query(f\"SELECT * FROM {table_name}\", conn)\n    \n    # Perform the string replacement in the specified column\n    df[column_name] = df[column_name].str.replace('\\n', '<br>')\n    \n    # Close the database connection\n    conn.close()\n    \n    return df"}
{"task_id": "BigCodeBench/927", "solution": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    # Load the CSV file into a DataFrame\n    df = pd.read_csv(file_path)\n    \n    # Replace all occurrences of '\\n' with '<br>' in the specified column\n    df[column_name] = df[column_name].str.replace('\\n', '<br>')\n    \n    # Encode the specified column as a categorical variable\n    label_encoder = LabelEncoder()\n    df[column_name] = label_encoder.fit_transform(df[column_name])\n    \n    return df"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    # Generate all possible two-letter combinations of the English alphabet\n    all_combinations = {\"\".join(pair): 0 for pair in itertools.product(string.ascii_lowercase, repeat=2)}\n    \n    # Count the occurrences of these combinations in the given word\n    counter = Counter(word[i:i+2] for i in range(len(word) - 1))\n    \n    # Update the initial dictionary with the counts from the word\n    all_combinations.update(counter)\n    \n    return all_combinations"}
{"task_id": "BigCodeBench/929", "solution": "import numpy as np\nfrom scipy import stats\ndef task_func(word: str) -> tuple[np.ndarray, float]:\n    \"\"\"\n    Calculate the difference between the ASCII values of each pair of adjacent letters in the input word.\n    After calculating the difference, calculate the entropy of the differences.\n    \n    Parameters:\n    - word (str): The input word as a string.\n    \n    Returns:\n    - np.ndarray: A numpy array containing the difference between the ASCII values of each pair of adjacent letters.\n    - float: The entropy of the differences.\n    \"\"\"\n    # Calculate the difference between ASCII values of adjacent letters\n    differences = np.diff([ord(c) for c in word])\n    \n    # Calculate the entropy of the differences\n    if len(set(differences)) == 1:  # If all differences are the same, entropy is -inf\n        entropy = float('-inf')\n    else:\n        probabilities = np.unique(differences, return_counts=True)[1] / len(differences)\n        entropy = stats.entropy(probabilities)\n    \n    return differences, entropy"}
{"task_id": "BigCodeBench/930", "solution": "import random\nimport string\nPOSSIBLE_LETTERS = ['a', 'b', 'c']\ndef task_func(word):\n    if not all(c.isalpha() for c in word):\n        raise ValueError(\"Input must only contain letter characters.\")\n    \n    word = word.lower()  # Ensure the word is in lower case for consistency\n    if len(word) < 2:\n        return [''] * len(POSSIBLE_LETTERS)  # Return empty strings if the word is too short\n    \n    pairs = [word[i:i+2] for i in range(len(word)-1)]\n    \n    # If the number of pairs is less than POSSIBLE_LETTERS, repeat pairs randomly until the list is long enough\n    while len(pairs) < len(POSSIBLE_LETTERS):\n        additional_pair = random.choice(pairs)\n        pairs.append(additional_pair)\n    \n    # If the number of pairs exceeds POSSIBLE_LETTERS, randomly select a subset to match the length\n    if len(pairs) > len(POSSIBLE_LETTERS):\n        pairs = random.sample(pairs, len(POSSIBLE_LETTERS))\n    \n    return pairs"}
{"task_id": "BigCodeBench/931", "solution": "from collections import defaultdict\nimport re\ndef task_func(word: str) -> defaultdict:\n    \"\"\"\n    Find the occurrences of each two-letter combination in the sanitized word,\n    where only alphabetic characters are considered.\n\n    Parameters:\n    word (str): The input string.\n\n    Returns:\n    defaultdict: A dictionary with keys as two-letter combinations and values as their counts in the sanitized word.\n    \"\"\"\n    # Sanitize the word to include only alphabetic characters\n    sanitized_word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Initialize defaultdict to store the counts\n    result = defaultdict(int)\n    \n    # Iterate over the word to count two-letter combinations\n    for i in range(len(sanitized_word) - 1):\n        combination = sanitized_word[i:i+2]\n        result[combination] += 1\n    \n    return result"}
{"task_id": "BigCodeBench/932", "solution": "from collections import Counter\nimport re\ndef task_func(word: str) -> list:\n    # Clean the word to have only alphabetic characters in lowercase\n    cleaned_word = re.sub(r'[^a-z]', '', word).lower()\n    \n    # Check if the cleaned word has fewer than 2 alphabetic characters\n    if len(cleaned_word) < 2:\n        return []\n    \n    # Create pairs of letters from the cleaned word\n    pairs = [cleaned_word[i:i+2] for i in range(len(cleaned_word) - 1)]\n    \n    # Count the frequency of each pair\n    pair_counts = Counter(pairs)\n    \n    # Find the most common pair\n    most_common_pair = pair_counts.most_common(1)\n    \n    # Return the most common pair and its frequency as a list with a single tuple\n    return most_common_pair"}
{"task_id": "BigCodeBench/933", "solution": "import string\nfrom wordninja import split\ndef task_func(word):\n    # Create a dictionary mapping each letter to its position in the alphabet\n    alphabet_dict = {char: idx+1 for idx, char in enumerate(string.ascii_lowercase)}\n    \n    # Convert the word into a list of tuples with letter and its alphabet position\n    letter_positions = [(char, alphabet_dict[char]) for char in word]\n    \n    # Split the word into a list of words\n    words = split(word)\n    \n    return letter_positions, words"}
{"task_id": "BigCodeBench/934", "solution": "from collections import Counter\nimport hashlib\ndef task_func(word: str) -> str:\n    \"\"\"\n    Count the occurrence of each adjacent pair of letters from left to right in a word and encode the result as an MD5 hash.\n\n    Parameters:\n    - word (str): The word in which to count the adjacent letter pairs.\n\n    Returns:\n    - str: An MD5 hash of the stringified dictionary with adjacent letter pairs and their counts.\n\n    Examples:\n    >>> task_func('abracadabra')\n    'bc9af285d87b312e61ab3661e66b741b'\n    >>> task_func('hello')\n    'dd5dec1a853625e2dc48f3d42665c337'\n    \"\"\"\n    # Count the occurrence of each adjacent pair\n    pair_counts = Counter(word[i:i+2] for i in range(len(word) - 1))\n    \n    # Convert the counts to a sorted string (to ensure consistent hash regardless of input order)\n    sorted_pairs = sorted(pair_counts.items())\n    stringified_counts = ''.join(f'{k}{v}' for k, v in sorted_pairs)\n    \n    # Encode the result as an MD5 hash\n    md5_hash = hashlib.md5(stringified_counts.encode()).hexdigest()\n    \n    return md5_hash"}
{"task_id": "BigCodeBench/935", "solution": "import pandas as pd\nimport string\ndef task_func(word):\n    if not word.islower() or not word.isalpha():\n        raise ValueError(\"Input word must be in lowercase and contain alphabetic characters only.\")\n    \n    # Create a DataFrame\n    data = {'Letter': word, 'Position': [string.ascii_lowercase.index(letter) + 1 for letter in word]}\n    df = pd.DataFrame(data)\n    df = df.reset_index(drop=True)  # Reset index to start from 0\n    \n    return df"}
{"task_id": "BigCodeBench/936", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport string\nALPHABET = list(string.ascii_lowercase)\ndef task_func(word):\n    \"\"\"\n    Draws a bar chart representing the positions of each letter in the given word \n    within the English alphabet using numpy and matplotlib.pyplot.\n    \"\"\"\n    # Check if the word contains only lowercase alphabetic characters\n    if not all(c in ALPHABET for c in word):\n        raise ValueError(\"The word should contain only lowercase alphabetic characters.\")\n    \n    # Map letters to their positions in the alphabet\n    positions = [ALPHABET.index(letter) for letter in word]\n    \n    # Create a bar chart\n    plt.bar(positions, np.ones_like(positions), tick_label=word)\n    plt.xlabel('Letter Position in the Alphabet')\n    plt.ylabel('Frequency')\n    plt.title(f'Positions of Letters in \"{word}\"')\n    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n    \n    # Show the plot\n    plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels\n    plt.show()\n    \n    # Return the Axes object for further manipulation if needed\n    return plt.gca()"}
{"task_id": "BigCodeBench/937", "solution": "import re\nfrom collections import Counter\ndef task_func(input_str):\n    \"\"\"\n    Count the frequency of each alphanumeric character in a given string after removing all non-alphanumeric characters,\n    treating uppercase and lowercase letters as the same.\n    \n    Parameters:\n    - input_str (str): The input string.\n    \n    Returns:\n    - dict: Character frequencies.\n    \"\"\"\n    # Remove non-alphanumeric characters and convert to lowercase\n    cleaned_str = re.sub(r'[^a-zA-Z0-9]', '', input_str).lower()\n    \n    # Count the frequency of each character\n    char_frequency = Counter(cleaned_str)\n    \n    return char_frequency"}
{"task_id": "BigCodeBench/938", "solution": "import re\nimport pandas as pd\ndef task_func(input_df):\n    \"\"\"\n    Cleans the text in a pandas DataFrame column named 'text' by removing all special characters, punctuation marks, and spaces, then calculates the length of the cleaned text.\n    \n    Parameters:\n    - input_df (pandas.DataFrame): DataFrame with a column 'text' containing strings with alphanumeric and/or special characters.\n    \n    Returns:\n    - pandas.DataFrame: A DataFrame with two new columns 'clean_text' and 'text_length'.\n    \"\"\"\n    # Define a function to clean the text\n    def clean_text(s):\n        return re.sub(r'\\W+', '', s)  # Remove all non-word characters\n    \n    # Apply the clean_text function to the 'text' column\n    input_df['clean_text'] = input_df['text'].apply(clean_text)\n    \n    # Calculate the length of the cleaned text\n    input_df['text_length'] = input_df['clean_text'].apply(len)\n    \n    return input_df"}
{"task_id": "BigCodeBench/939", "solution": "import re\nimport os\ndef task_func(dir_path: str) -> list:\n    \"\"\"\n    Rename all files in the specified directory by removing all special characters,\n    punctuation marks, and spaces, using regular expressions. The function keeps\n    alphanumeric characters and removes the rest.\n    \"\"\"\n    # List to store new file names\n    new_names = []\n\n    # Walk through the directory\n    for filename in os.listdir(dir_path):\n        # Skip if it's a directory\n        if os.path.isdir(os.path.join(dir_path, filename)):\n            continue\n        \n        # Remove special characters and spaces from the file name\n        cleaned_name = re.sub(r'[^a-zA-Z0-9]', '', filename)\n        \n        # Construct the new file path\n        new_file_path = os.path.join(dir_path, cleaned_name)\n        \n        # Rename the file\n        os.rename(os.path.join(dir_path, filename), new_file_path)\n        \n        # Add the new name to the list\n        new_names.append(cleaned_name)\n\n    return new_names"}
{"task_id": "BigCodeBench/940", "solution": "import re\nfrom nltk import word_tokenize\nfrom collections import Counter\ndef task_func(input_str):\n    \"\"\"\n    Remove all special characters, punctuation marks, and spaces from a string called \"input_str\" using regex and then count the frequency of each word.\n\n    Parameters:\n    input_str (str): The input string.\n\n    Returns:\n    dict: A dictionary with the frequency of each word.\n\n    Example:\n    >>> task_func('Special $#! characters   spaces 888323')\n    Counter({'Special': 1, 'characters': 1, 'spaces': 1, '888323': 1})\n    \"\"\"\n    # Remove special characters and punctuation marks, then tokenize the string\n    cleaned_str = re.sub(r'\\W+', ' ', input_str)  # This replaces non-word characters with space\n    tokens = word_tokenize(cleaned_str)  # Tokenize the string into words\n\n    # Count the frequency of each word\n    word_freq = Counter(tokens)\n\n    return word_freq"}
{"task_id": "BigCodeBench/941", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\ndef generate_sales_data(start_date: str, periods: int, freq: str, random_seed: int = 0) -> pd.DataFrame:\n    np.random.seed(random_seed)\n    dates = pd.date_range(start_date, periods=periods, freq=freq)\n    sales = np.random.randint(100, 500, size=periods)\n    df = pd.DataFrame({'Date': dates, 'Sales': sales})\n    df.set_index('Date', inplace=True)\n    return df\ndef plot_sales_forecast(df: pd.DataFrame, ax: plt.Axes = None) -> plt.Axes:\n    if ax is None:\n        _, ax = plt.subplots()\n    df.plot(kind='bar', ax=ax)\n    ax.set_title('Sales Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    return ax\ndef task_func(start_date: str, periods: int, freq: str, random_seed: int = 0) -> (pd.DataFrame, plt.Axes):\n    df = generate_sales_data(start_date, periods, freq, random_seed)\n    ax = plot_sales_forecast(df)\n    return df, ax"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef generate_sales_data(start_date, periods, freq, categories):\n    dates = pd.date_range(start_date, periods=periods, freq=freq)\n    data = {category: np.random.randint(100, 500, size=len(dates)) for category in categories}\n    sales_df = pd.DataFrame(data, index=dates).stack().reset_index()\n    sales_df.columns = ['Date', 'Category', 'Sales']\n    sales_df['Date'] = sales_df['Date'].dt.strftime('%Y-%m-%d')\n    return sales_df\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    \"\"\"\n    Function to create and visualize a sales report.\n    \"\"\"\n    df = generate_sales_data(start_date, periods, freq, categories)\n    \n    # Plotting\n    fig, ax = plt.subplots(figsize=(14, 7))\n    df.pivot(index='Date', columns='Category', values='Sales').plot(kind='line', ax=ax)\n    ax.set_title('Sales Report Over Time')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.legend(title='Category')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/943", "solution": "import pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(start_date='2016-01-01', periods=24, freq='M', model='additive'):\n    \"\"\"\n    Generate a sales time-series and decompose it into trend, seasonal, and residual components.\n    \n    Parameters:\n    - start_date (str): The start date of the time-series in the format 'YYYY-MM-DD'. Default is '2016-01-01'.\n    - periods (int): The number of periods to generate for the time-series. Default is 24.\n    - freq (str): The frequency of the time-series data. Default is 'M' (Monthly End).\n    - model (str): The type of seasonal decomposition ('additive' or 'multiplicative'). Default is 'additive'.\n\n    Returns:\n    - A dictionary containing 'trend', 'seasonal', and 'residual' components as Pandas Series.\n    \"\"\"\n    # Generate a simple synthetic sales time-series with a trend and seasonality\n    dates = pd.date_range(start_date, periods=periods, freq=freq)\n    np.random.seed(0)  # For reproducibility\n    trend = pd.Series(np.arange(1, periods + 1), index=dates).cumsum() * 100\n    seasonality = pd.Series(np.sin(np.arange(periods) * 2 * np.pi / periods), index=dates) * 50\n    noise = pd.Series(np.random.randn(periods), index=dates) * 10\n    sales_data = trend + seasonality + noise\n\n    # Decompose the time-series\n    decomposition = seasonal_decompose(sales_data, model=model)\n\n    # Return the components as a dictionary\n    return {\n        'trend': decomposition.trend,\n        'seasonal': decomposition.seasonal,\n        'residual': decomposition.resid\n    }"}
{"task_id": "BigCodeBench/944", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', seed=0):\n    np.random.seed(seed)  # Set the seed for reproducibility\n    \n    # Generate date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Generate random share prices between 100 and 500\n    prices = np.random.uniform(100, 500, periods)\n    \n    # Create DataFrame\n    df = pd.DataFrame({'Date': dates, 'Price': prices})\n    \n    # Plotting the share prices\n    ax = df.plot(x='Date', y='Price', title='Stock Prices', figsize=(10, 5))\n    \n    plt.tight_layout()  # Adjust the plot to ensure everything fits without overlap\n    \n    return df, ax"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    np.random.seed(42)  # For reproducibility\n    if sales_data is None:\n        # Generate random sales data\n        dates = pd.date_range(start_date, periods=periods, freq=freq)\n        sales_data = np.random.rand(periods) * 1000 + 300  # Random data with a bias\n    \n    # Create a DataFrame for the linear regression model\n    df = pd.DataFrame(index=dates)\n    df['Sales'] = sales_data\n    df['TimeIndex'] = range(1, periods + 1)  # Assuming a simple linear trend\n    \n    # Fit a linear regression model\n    model = LinearRegression()\n    model.fit(df['TimeIndex'].values.reshape(-1, 1), df['Sales'].values)\n    \n    # Forecast future sales\n    forecast_dates = pd.date_range(dates[-1] + pd.DateOffset(periods=1), periods=periods, freq=freq)\n    future_sales = model.predict(np.array(range(periods+1, periods+periods+1)).reshape(-1, 1))\n    \n    return future_sales"}
{"task_id": "BigCodeBench/946", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(rows=3, cols=2, min_val=0, max_val=100):\n    \"\"\"\n    Creates a matrix of specified dimensions with random integers within a given range,\n    and then converts it into a pandas DataFrame.\n    \n    Parameters:\n    - rows (int): Number of rows in the matrix. Default is 3.\n    - cols (int): Number of columns in the matrix. Default is 2.\n    - min_val (int): Minimum integer value for the random integers. Default is 0.\n    - max_val (int): Maximum integer value for the random integers. Default is 100.\n    \n    Returns:\n    DataFrame: A pandas DataFrame containing random integers within the specified range.\n    \"\"\"\n    # Set the seed for reproducibility if needed\n    # np.random.seed(seed)\n    \n    # Generate random integers\n    matrix = np.random.randint(min_val, max_val + 1, size=(rows, cols))\n    \n    # Convert the matrix to a pandas DataFrame\n    df = pd.DataFrame(matrix)\n    \n    return df"}
{"task_id": "BigCodeBench/947", "solution": "import numpy as np\nimport random\nfrom datetime import datetime, timedelta\ndef task_func(rows=3, columns=2, start_date=datetime(2021, 1, 1), end_date=datetime(2021, 12, 31), seed=0):\n    \"\"\"\n    Generates a matrix of given dimensions (rows x columns) containing unique dates between \n    a specified start date and end date.\n    \"\"\"\n    # Set the seed for reproducibility\n    random.seed(seed)\n    \n    # Calculate the total number of days between the start and end date\n    date_range = end_date - start_date\n    total_days = date_range.days + 1  # +1 to include both start and end dates\n    \n    # Ensure the requested dates don't exceed the available unique dates\n    if rows * columns > total_days:\n        raise ValueError(\"The requested matrix size exceeds the available unique dates between the start and end date.\")\n    \n    # Randomly select unique dates\n    selected_dates = random.sample(range(total_days), rows * columns)\n    \n    # Convert the selected date indices back to datetime objects\n    dates = [start_date + timedelta(days=i) for i in sorted(selected_dates)]\n    \n    # Reshape the list into a matrix\n    date_matrix = np.array(dates).reshape(rows, columns)\n    \n    return date_matrix"}
{"task_id": "BigCodeBench/948", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(rows=3, columns=2, seed=42):\n    \"\"\"\n    Generate a matrix of random values with specified dimensions and scale it between 0 and 1.\n    \n    Parameters:\n    rows (int): The number of rows for the matrix. Default is 3.\n    columns (int): The number of columns for the matrix. Default is 2.\n    \n    Returns:\n    ndarray: A numpy ndarray with scaled values between 0 and 1.\n    \"\"\"\n    # Set the seed for reproducibility\n    np.random.seed(seed)\n    \n    # Generate a random matrix\n    random_matrix = np.random.rand(rows, columns)\n    \n    # Initialize MinMaxScaler and fit_transform the matrix to scale values between 0 and 1\n    scaler = MinMaxScaler()\n    scaled_matrix = scaler.fit_transform(random_matrix)\n    \n    return scaled_matrix"}
{"task_id": "BigCodeBench/949", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(rows, columns, seed=None):\n    \"\"\"\n    Generate a DataFrame with random values within a specified range.\n    \n    Parameters:\n    - rows (int): The number of rows for the matrix.\n    - columns (int): The number of columns for the matrix.\n    - seed (int, optional): The seed for the random number generator. Default is None.\n    \n    Returns:\n    - DataFrame: A Pandas DataFrame containing the generated random values.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    random_matrix = np.random.rand(rows, columns)\n    df = pd.DataFrame(random_matrix)\n    return df"}
{"task_id": "BigCodeBench/950", "solution": "import numpy as np\nfrom scipy.linalg import svd\ndef task_func(rows=3, columns=2, seed=0):\n    \"\"\"\n    Generate a matrix of random values with specified dimensions and perform Singular Value Decomposition (SVD) on it.\n\n    Parameters:\n    - rows (int): Number of rows for the random matrix. Default is 3.\n    - columns (int): Number of columns for the random matrix. Default is 2.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility. Default is None.\n\n    Returns:\n    tuple: A tuple containing three elements:\n        - U (ndarray): The unitary matrix U.\n        - s (ndarray): The singular values, sorted in descending order.\n        - Vh (ndarray): The conjugate transpose of the unitary matrix V.\n    \"\"\"\n    # Set the seed for reproducibility if provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a random matrix with specified dimensions\n    matrix = np.random.rand(rows, columns)\n    \n    # Perform Singular Value Decomposition\n    U, s, Vh = svd(matrix)\n    \n    return U, s, Vh"}
{"task_id": "BigCodeBench/951", "solution": "import pandas as pd\nimport numpy as np\nimport random\nCATEGORIES = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Toys & Games']\ndef task_func(mystrings, n_products, seed=0):\n    \"\"\"\n    Create a product catalog DataFrame where each row represents a product.\n    \"\"\"\n    # Seed the random generator for reproducibility\n    random.seed(seed)\n    \n    # Initialize an empty list to store product dictionaries\n    products = []\n    \n    # If the number of products requested exceeds the provided strings, use the provided strings repeatedly\n    unique_strings = mystrings * (n_products // len(mystrings) + 1)\n    unique_strings = unique_strings[:n_products]\n    \n    for name in unique_strings:\n        # Replace spaces with underscores in the product name\n        product_name = name.replace(' ', '_')\n        \n        # Randomly select a category\n        category = random.choice(CATEGORIES)\n        \n        # Generate a random price based on a normal distribution with mean 50 and std deviation 10\n        price = round(np.random.normal(50, 10), 2)\n        \n        # Append the product as a dictionary to the products list\n        products.append({'Product Name': product_name, 'Category': category, 'Price': price})\n    \n    # Convert the list of dictionaries into a DataFrame\n    product_catalog = pd.DataFrame(products)\n    \n    return product_catalog"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(task_list, n_tasks, employees=None, seed=None):\n    if employees is None:\n        employees = ['John Doe', 'Jane Smith', 'James Brown', 'Mary Johnson', 'Robert Davis']\n    if n_tasks < 0:\n        raise ValueError(\"Number of tasks to assign cannot be negative.\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    # Ensure n_tasks doesn't exceed the length of task_list\n    n_tasks = min(n_tasks, len(task_list))\n    \n    # Replace spaces in task names with underscores\n    sanitized_tasks = [task.replace(' ', '_') for task in task_list]\n    \n    # Create a DataFrame to store the task assignments\n    assignments = []\n    for _ in range(n_tasks):\n        task = random.choice(sanitized_tasks)\n        employee = random.choice(employees)\n        due_date = datetime.now().date()\n        assignments.append({'Task Name': task, 'Assigned To': employee, 'Due Date': due_date})\n    \n    return pd.DataFrame(assignments)"}
{"task_id": "BigCodeBench/953", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(mystrings, folder_path, seed=None):\n    \"\"\"\n    ... (The function docstring remains unchanged) ...\n    \"\"\"\n    # Deduplicate mystrings while maintaining order\n    mystrings = list(dict.fromkeys(mystrings))\n    \n    # Create the directory if it does not exist\n    if not os.path.exists(folder_path):\n        try:\n            os.makedirs(folder_path)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise FileNotFoundError(f\"Directory {folder_path} could not be created.\")\n    \n    # Initialize the random seed for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n    \n    saved_files = []\n    for title in mystrings:\n        # Generate random data\n        data = np.random.rand(10)\n        \n        # Replace spaces with underscores for the filename\n        filename = title.replace(' ', '_') + '.png'\n        \n        # Create the bar chart\n        plt.figure(figsize=(10, 6))\n        plt.bar(range(1, 11), data, tick_label=range(1, 11))\n        plt.title(title)\n        plt.xlabel('Data Points')\n        plt.ylabel('Random Values')\n        \n        # Save the plot\n        save_path = os.path.join(folder_path, filename)\n        plt.savefig(save_path)\n        plt.close()\n        \n        saved_files.append(filename)\n    \n    return saved_files"}
{"task_id": "BigCodeBench/954", "solution": "import random\nimport re\ndef task_func(target_words, n_sentences, vocabulary):\n    if n_sentences < 0 or not vocabulary:\n        raise ValueError(\"n_sentences must be non-negative and vocabulary must not be empty.\")\n    \n    def underscore_target_in_sentence(sentence):\n        return re.sub(r'\\b(' + '|'.join(target_words) + r')\\b', lambda match: match.group(1).replace(' ', '_'), sentence, flags=re.IGNORECASE)\n    \n    generated_sentences = []\n    for _ in range(n_sentences):\n        sentence = ' '.join(random.choices(vocabulary, k=10)).lower()\n        generated_sentences.append(underscore_target_in_sentence(sentence))\n    \n    return generated_sentences"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n    if not text:\n        raise ValueError(\"Input text cannot be empty.\")\n    \n    # Replace spaces in given words with underscores and make text case-insensitive\n    modified_strings = [s.replace(' ', '_').lower() for s in mystrings]\n    text_lower = text.lower()\n    \n    # Replace occurrences of modified words in the text\n    for modified_string in modified_strings:\n        text_lower = re.sub(modified_string, modified_string, text_lower)\n    \n    # Count the frequency of each unique word\n    word_counts = Counter(text_lower.split())\n    \n    # Plot the frequency of each unique word\n    fig, ax = plt.subplots()\n    words = list(word_counts.keys())\n    frequencies = list(word_counts.values())\n    \n    ax.bar(words, frequencies)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of Unique Words')\n    \n    return ax"}
{"task_id": "BigCodeBench/956", "solution": "import re\nimport string\nimport random\ndef task_func(text: str, seed=None) -> str:\n    if seed is not None:\n        random.seed(seed)\n    \n    # Remove special characters (punctuations)\n    text = re.sub(f\"[{re.escape(string.punctuation)}]\", '', text)\n    \n    # Replace whitespace with underscores\n    text = text.replace(\" \", \"_\").replace(\"\\t\", \"__\").replace(\"\\n\", \"___\")\n    \n    # Randomize casing\n    randomized_text = ''.join([char.upper() if random.random() < 0.5 else char.lower() for char in text])\n    \n    return randomized_text"}
{"task_id": "BigCodeBench/957", "solution": "import string\nimport re\ndef task_func(text: str) -> tuple:\n    \"\"\"\n    Counts the number of words, characters, and unique characters in a given text.\n    \n    Parameters:\n    - text (str): The input text to be analyzed.\n    \n    Returns:\n    - tuple: A tuple containing three integers: the number of words,\n                the number of characters,\n                the number of unique characters.\n    \n    Requirements:\n    - string\n    - re\n    \n    Note:\n    - This function considers whitespace-separated substrings as words.\n    - When counting characters, this function excludes whitespace and special\n      characters (i.e. string.punctuation).\n    \n    Example:\n    >>> task_func('Hello, world!')\n    (2, 10, 7)\n    >>> task_func('Python is  awesome!  ')\n    (3, 15, 12)\n    \"\"\"\n    # Remove punctuation and convert text to lowercase\n    cleaned_text = re.sub(f\"[{string.punctuation}]\", \"\", text).lower()\n    \n    # Count words\n    words = cleaned_text.split()\n    num_words = len(words)\n    \n    # Count characters excluding whitespace\n    num_chars = sum(len(word) for word in words)\n    \n    # Count unique characters\n    unique_chars = set(cleaned_text)\n    num_unique_chars = len(unique_chars)\n    \n    return num_words, num_chars, num_unique_chars"}
{"task_id": "BigCodeBench/958", "solution": "import random\nimport re\ndef task_func(text, seed=None):\n    \"\"\"\n    Scramble the letters in each word of a given text, keeping the first and last letters of each word intact.\n\n    Parameters:\n    text (str): The text to be scrambled.\n    seed (int, optional): A seed for the random number generator to ensure reproducible results.\n                          Defaults to None (not set).\n\n    Returns:\n    str: The scrambled text.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(word):\n        if len(word) > 3:\n            middle = list(word[1:-1])\n            random.shuffle(middle)\n            return word[0] + ''.join(middle) + word[-1]\n        else:\n            return word\n\n    words = re.findall(r'\\b\\w+\\b', text)\n    scrambled_words = [scramble_word(word) for word in words]\n\n    # Reconstruct the text with scrambled words\n    scrambled_text = re.sub(r'\\b\\w+\\b', lambda match: scrambled_words.pop(0), text, flags=re.I)\n\n    return scrambled_text"}
{"task_id": "BigCodeBench/959", "solution": "import string\nimport random\nimport re\ndef task_func(text, seed=None):\n    \"\"\"\n    Transforms the input text by replacing each alphabetic character with a random letter,\n    while preserving the case and non-alphabetic characters of the original text.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    # Define alphabets for both cases\n    lower_alphabet = string.ascii_lowercase\n    upper_alphabet = string.ascii_uppercase\n    \n    # Create translation functions for lower and upper case\n    def random_lowercase(match):\n        return random.choice(lower_alphabet)\n    \n    def random_uppercase(match):\n        return random.choice(upper_alphabet)\n    \n    # Use regex to replace lowercase and uppercase letters with random ones\n    # while keeping the non-alphabetic characters and case\n    text = re.sub('[a-z]', random_lowercase, text)\n    text = re.sub('[A-Z]', random_uppercase, text)\n    \n    return text"}
{"task_id": "BigCodeBench/960", "solution": "import string\nimport random\ndef task_func(text, seed=None):\n    if not text:\n        raise ValueError(\"Input text must not be empty.\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    password = ''\n    for char in text:\n        if char.isalpha():\n            password += random.choice(string.ascii_lowercase)\n        elif char.isdigit():\n            password += str(random.randint(0, 9))\n        elif char.isspace():\n            password += random.choice([str(random.randint(0, 9)), random.choice(string.ascii_lowercase)])\n        else:\n            password += char\n    return password"}
{"task_id": "BigCodeBench/961", "solution": "import os\nimport glob\nfrom collections import Counter\ndef task_func(directory, extensions=[\".txt\", \".docx\", \".xlsx\", \".csv\"], keep_zero=True):\n    if not os.path.exists(directory):\n        raise OSError(f\"The directory {directory} does not exist.\")\n    \n    file_counts = Counter()\n    for extension in extensions:\n        # Using glob to find files with specific extensions, recursively\n        files = glob.glob(os.path.join(directory, f\"**/*{extension}\"), recursive=True)\n        file_counts[extension] = len(files)\n    \n    if not keep_zero:\n        # Remove extensions with zero counts\n        file_counts = Counter({ext: count for ext, count in file_counts.items() if count != 0})\n    \n    return file_counts"}
{"task_id": "BigCodeBench/962", "solution": "import os\nfrom pathlib import Path\nimport glob\nimport shutil\ndef task_func(source_directory: str, target_directory: str) -> int:\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist.\")\n    \n    # Ensure target directory exists\n    os.makedirs(target_directory, exist_ok=True)\n    \n    extensions = ('.txt', '.docx', '.xlsx', '.csv')\n    moved_count = 0\n    \n    for extension in extensions:\n        # Find files with specific extensions\n        files = glob.glob(os.path.join(source_directory, '**', f'*{extension}'), recursive=True)\n        for file_path in files:\n            # Prepare base name and extension\n            base_name = Path(file_path).stem\n            file_extension = Path(file_path).suffix\n            \n            # Destination path\n            dest_path = Path(target_directory) / f\"{base_name}{file_extension}\"\n            \n            # Handle naming conflicts\n            counter = 1\n            while dest_path.exists():\n                new_base_name = f\"{base_name}-{counter}\"\n                dest_path = Path(target_directory) / f\"{new_base_name}{file_extension}\"\n                counter += 1\n            \n            # Move the file\n            shutil.move(file_path, str(dest_path))\n            moved_count += 1\n            \n    return moved_count"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    zip_name += '.zip'\n    target_path = Path(target_directory) / zip_name\n    \n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory {source_directory} does not exist.\")\n    \n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    \n    # Construct the glob pattern to match files with valid extensions\n    glob_pattern = os.path.join(source_directory, '*.*')\n    \n    # Find all files matching the valid extensions\n    files_to_zip = [file for ext in valid_extensions for file in glob.glob(glob_pattern) if file.endswith(ext)]\n    \n    # Create a ZipFile object\n    with zipfile.ZipFile(target_path, 'w') as zipf:\n        for file in files_to_zip:\n            # Get the relative path for the zip file structure\n            relative_path = os.path.relpath(file, source_directory)\n            zipf.write(file, arcname=relative_path)\n    \n    return str(target_path)"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nfrom docx import Document\nfrom openpyxl import load_workbook\ndef task_func(source_directory: str, target_directory: str) -> int:\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"The source directory {source_directory} does not exist.\")\n    \n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    \n    converted_count = 0\n    \n    # List of extensions we are interested in\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    \n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            if any(file.endswith(ext) for ext in extensions):\n                file_path = os.path.join(root, file)\n                \n                # Determine the CSV file path\n                csv_file_path = os.path.join(target_directory, os.path.splitext(file)[0] + '.csv')\n                \n                # Convert and save to CSV\n                if file.endswith('.txt'):\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        text = f.read()\n                    df = pd.DataFrame({'Text': [text]})\n                    df.to_csv(csv_file_path, index=False)\n                    converted_count += 1\n                \n                elif file.endswith('.docx'):\n                    doc = Document(file_path)\n                    text = '\\n'.join([para.text for para in doc.paragraphs])\n                    df = pd.DataFrame({'Text': [text]})\n                    df.to_csv(csv_file_path, index=False)\n                    converted_count += 1\n                \n                elif file.endswith('.xlsx'):\n                    df = pd.read_excel(file_path)\n                    df.to_csv(csv_file_path, index=False)\n                    converted_count += 1\n                \n                elif file.endswith('.csv'):\n                    # If it's already a CSV, just copy it (assuming it's the format we want)\n                    df = pd.read_csv(file_path)\n                    df.to_csv(csv_file_path, index=False)\n                    converted_count += 1\n    \n    return converted_count"}
{"task_id": "BigCodeBench/965", "solution": "import os\nimport re\nimport shutil\ndef task_func(source_directory: str, target_directory: str, pattern: str = r\"\\d{4}\") -> int:\n    \"\"\"\n    Moves files matching a specific regex pattern from a source directory to a target directory.\n    \"\"\"\n    if not os.path.isdir(source_directory):\n        return 0\n    \n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    \n    moved_count = 0\n    for filename in os.listdir(source_directory):\n        if re.search(pattern, filename):\n            source_path = os.path.join(source_directory, filename)\n            target_path = os.path.join(target_directory, filename)\n            shutil.move(source_path, target_path)\n            moved_count += 1\n            \n    return moved_count"}
{"task_id": "BigCodeBench/966", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame) -> tuple:\n    if df.empty or not all(df.dtypes.apply(pd.api.types.is_numeric_dtype)):\n        raise ValueError(\"DataFrame is empty or contains non-numeric data.\")\n    \n    # Calculate cumulative sum for each column\n    cumsum_df = df.cumsum(axis=0)\n    \n    # Create a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(cumsum_df.index, cumsum_df.values.T, label=cumsum_df.columns)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n\n    # Show plot with tight layout\n    plt.tight_layout()\n    \n    return cumsum_df, fig"}
{"task_id": "BigCodeBench/967", "solution": "import numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\ndef task_func(func, x_range=(-2, 2), num_points=1000):\n    x = np.linspace(x_range[0], x_range[1], num_points)\n    y = func(x)\n    \n    # Calculate the cumulative integral\n    y_integrated, _ = integrate.cumtrapz(y, x, initial=0)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label=f'{func.__name__}(x)', color='blue')\n    ax.plot(x, y_integrated, label=f'Integral of {func.__name__}(x)', color='red')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n    ax.grid(True)\n    \n    plt.title(f'Function {func.__name__} and its Integral')\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/968", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    \"\"\"\n    Creates and return a heatmap of the cumulative sum of each column in a dictionary.\n\n    Parameters:\n    - data (dict): A dictionary where the keys are the column names and the values are the column values.\n\n    Returns:\n    - matplotlib.axes._axes.Axes: The Axes object of the Seaborn heatmap.\n\n    Raises:\n    - ValueError: If the DataFrame is empty or if no numeric columns are present.\n    \"\"\"\n    # Convert dictionary to DataFrame\n    df = pd.DataFrame(data)\n    \n    # Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty.\")\n    \n    # Select only numeric columns\n    numeric_df = df.select_dtypes(include='number')\n    \n    # Check if there are any numeric columns\n    if numeric_df.empty:\n        raise ValueError(\"No numeric columns are present in the data.\")\n    \n    # Calculate cumulative sum of each column\n    cumsum_df = numeric_df.cumsum(axis=0)\n    \n    # Create a heatmap\n    ax = sns.heatmap(cumsum_df, cmap='coolwarm', annot=True, fmt=\".1f\")\n    \n    # Show the heatmap (This line is optional and can be removed if the heatmap is to be returned without displaying)\n    plt.show()\n    \n    return ax\ndata = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': ['x', 'y', 'z']}"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes the MinMax-normalized cumulative sum for each numeric column in the given DataFrame.\n\n    Parameters:\n    - df (pandas.DataFrame): The input DataFrame containing numerical values.\n\n    Returns:\n    - pd.DataFrame: A DataFrame where each column contains the normalized cumulative sum of the\n                    respective column in the input DataFrame, retaining the original column names.\n\n    Raises:\n    - TypeError: If the DataFrame contains non-numeric data types.\n    - ValueError: If the DataFrame is empty or contains NaN values.\n    \"\"\"\n    # Check for NaN values and raise ValueError if present\n    if df.isnull().values.any():\n        raise ValueError(\"The DataFrame contains NaN values.\")\n    \n    # Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    \n    # Ensure all columns are numeric, raise TypeError if not\n    if not all(df.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise TypeError(\"The DataFrame contains non-numeric data types.\")\n    \n    # Initialize MinMaxScaler\n    scaler = MinMaxScaler()\n\n    # Compute cumulative sum for each numeric column\n    cumsum_df = df.cumsum(axis=0)\n\n    # Normalize the cumulative sum\n    # First, reshape the dataframe to a 2D array for sklearn's MinMaxScaler\n    scaled_values = scaler.fit_transform(cumsum_df.values.reshape(-1, len(df.columns)))\n\n    # Reshape back to the original DataFrame shape\n    scaled_df = pd.DataFrame(scaled_values, index=cumsum_df.index, columns=cumsum_df.columns)\n\n    return scaled_df"}
{"task_id": "BigCodeBench/970", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data: np.ndarray) -> plt.Axes:\n    # Input validation\n    if np.any(data < 0):\n        raise ValueError(\"Input array cannot contain negative numbers.\")\n    if np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array must contain numeric inputs only.\")\n    \n    # Check for all zeros and handle it\n    if np.all(data == 0):\n        data = np.array([0, 1])  # To avoid division by zero, create a simple range\n        \n    # Calculate cumulative probabilities\n    data_sorted = np.sort(data)\n    cum_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cum_prob, marker='o', linestyle='-')\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n    \n    return ax"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n    \"\"\"\n    Analyzes a given directory as per the description.\n    \"\"\"\n    # Check if the directory exists\n    if not Path(directory_path).is_dir():\n        raise ValueError(f\"Directory does not exist: {directory_path}\")\n\n    # List to hold the file details\n    file_details = []\n\n    # Walk through the directory, not going into subdirectories\n    for file_path in Path(directory_path).iterdir():\n        if file_path.is_file():\n            # Get file size\n            file_size = file_path.stat().st_size\n            \n            # Get creation time (birth time on some systems, last metadata change on others)\n            created_time = datetime.fromtimestamp(file_path.stat().st_ctime, timezone.utc).isoformat()\n            \n            # Get last modification time\n            modified_time = datetime.fromtimestamp(file_path.stat().st_mtime, timezone.utc).isoformat()\n            \n            # Append to the list\n            file_details.append((file_path.name, file_size, created_time, modified_time))\n    \n    return file_details"}
{"task_id": "BigCodeBench/972", "solution": "import os\nimport re\nfrom pathlib import Path\ndef task_func(path: str, delimiter: str = os.path.sep) -> list:\n    \"\"\"\n    The function implementation is provided here.\n    \"\"\"\n    # Normalize the path to handle different OS and convert backslashes to forward slashes\n    normalized_path = str(Path(path).resolve())\n    \n    # Define invalid characters for file paths\n    invalid_chars = r'[<>:\"|?*]'\n    \n    # Check for invalid characters\n    if re.search(invalid_chars, normalized_path):\n        raise ValueError(\"The path contains invalid characters: \", re.search(invalid_chars, normalized_path).group())\n    \n    # Split the path using the specified delimiter\n    return normalized_path.split(delimiter)"}
{"task_id": "BigCodeBench/973", "solution": "import os\nimport shutil\ndef task_func(path, delimiter=\"/\"):\n    if not isinstance(path, str) or not path:\n        raise ValueError(\"Path must be a non-empty string.\")\n    if not os.path.exists(path):\n        raise FileNotFoundError(f\"The path '{path}' does not exist.\")\n\n    components = path.split(delimiter)\n    disk_usage_list = []\n    current_path = \"\"\n    for component in components:\n        current_path += delimiter + component if current_path else component\n        try:\n            disk_usage = shutil.disk_usage(current_path)\n        except OSError as e:\n            # This might raise if, for example, a directory can't be accessed due to permissions\n            raise OSError(f\"Failed to get disk usage for '{current_path}': {e}\")\n        \n        usage_dict = {\n            'total': disk_usage.total,\n            'used': disk_usage.used,\n            'free': disk_usage.free\n        }\n        disk_usage_list.append((component, usage_dict))\n\n    return disk_usage_list"}
{"task_id": "BigCodeBench/974", "solution": "import shutil\nimport pathlib\nimport os\ndef task_func(source_path, destination_path):\n    # Check if the source path exists and is a directory\n    if not os.path.isdir(source_path):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    \n    # Create the destination directory if it does not exist\n    pathlib.Path(destination_path).mkdir(parents=True, exist_ok=True)\n    \n    # List files in the source directory without descending into subdirectories\n    files_in_source = [f for f in os.listdir(source_path) if os.path.isfile(os.path.join(source_path, f))]\n    \n    # Copy files to the destination directory\n    for file in files_in_source:\n        shutil.copy(os.path.join(source_path, file), destination_path)\n    \n    # Return the source directory name and the list of filenames copied\n    return os.path.basename(source_path), files_in_source"}
{"task_id": "BigCodeBench/975", "solution": "import numpy as np\nimport pandas as pd\ndef task_func(rows, columns=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=0) -> pd.DataFrame:\n    np.random.seed(seed)  # Set the seed for reproducibility\n    \n    # Deduplicate columns while preserving order and case sensitivity\n    unique_columns = list(dict.fromkeys(columns))\n    \n    if rows < 0:\n        raise ValueError(\"Number of rows must not be negative.\")\n    \n    # Generate DataFrame with random values between 0 and 1\n    data = np.random.rand(rows, len(unique_columns))\n    df = pd.DataFrame(data, columns=unique_columns)\n    \n    # Shuffle the columns\n    df = df[sorted(np.random.permutation(df.columns))]\n    \n    return df"}
{"task_id": "BigCodeBench/976", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport random\ndef task_func(records: np.ndarray, random_seed: int = 0) -> pd.DataFrame:\n    if records.ndim != 2:\n        raise ValueError(\"Input array must be 2D.\")\n    \n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n    random.seed(random_seed)\n    \n    # Shuffle feature names\n    num_features = records.shape[1]\n    shuffled_indices = np.random.permutation(num_features)\n    feature_names = [f\"f{idx+1}\" for idx in shuffled_indices]\n    \n    # Normalize the data\n    scaler = StandardScaler()\n    normalized_records = scaler.fit_transform(records)\n    \n    # Create a DataFrame with shuffled feature names\n    df = pd.DataFrame(normalized_records, columns=feature_names)\n    \n    return df"}
{"task_id": "BigCodeBench/977", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(array, features=None, seed=None):\n    if array.size == 0 or array.ndim != 2:\n        raise ValueError(\"Input array must be non-empty and 2-dimensional.\")\n    \n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"The length of 'features' must match the number of columns in 'array'.\")\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Shuffle the columns of the array\n    shuffled_indices = np.random.permutation(array.shape[1])\n    shuffled_array = array[:, shuffled_indices]\n    \n    # Prepare features labels\n    if features is None:\n        features = [f\"Feature {i+1}\" for i in range(shuffled_array.shape[1])]\n    \n    # Plot the shuffled array as a heatmap\n    plt.figure(figsize=(10, 8))\n    ax = sns.heatmap(shuffled_array, annot=True, fmt=\".2f\", xticklabels=features, yticklabels=False)\n    plt.title('Shuffled Array Heatmap')\n    plt.xlabel('Features')\n    plt.ylabel('Rows')\n    plt.show()\n    \n    return ax\narray = np.random.rand(2, 5)"}
{"task_id": "BigCodeBench/978", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(array, seed=None):\n    if array.ndim != 2:\n        raise ValueError(\"Input array must be 2D.\")\n    \n    # Shuffle columns if seed is provided\n    if seed is not None:\n        np.random.seed(seed)\n        np.random.shuffle(array.T)\n    \n    # Perform PCA\n    pca = PCA(n_components=2)\n    if array.shape[1] < 2:  # If there are fewer than 2 features, PCA won't reduce\n        return pd.DataFrame(array, columns=['PC1', 'PC2'])  # Return original if it can't be reduced\n    components = pca.fit_transform(array)\n    \n    # Convert components to DataFrame\n    df_components = pd.DataFrame(data=components, columns=['PC1', 'PC2'])\n    \n    return df_components"}
{"task_id": "BigCodeBench/979", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\ndef task_func(\n    feature_array,\n    target_array,\n    feature_names=[\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"],\n    target_name=\"target\",\n    seed=None,\n):\n    \"\"\"\n    Shuffle the columns of a given numpy array and train a Random Forest Classifier on the shuffled data.\n    \"\"\"\n    # Shuffle the columns of the feature array\n    np.random.seed(seed)\n    shuffled_indices = np.random.permutation(feature_array.shape[1])\n    shuffled_features = feature_array[:, shuffled_indices]\n    \n    # Convert to DataFrame for better handling (optional)\n    df_features = pd.DataFrame(shuffled_features, columns=[feature_names[i] for i in shuffled_indices])\n    df_target = pd.Series(target_array, name=target_name)\n    \n    # Split the data into training and testing sets (for demonstration)\n    X_train, X_test, y_train, y_test = train_test_split(df_features, df_target, test_size=0.2, random_state=seed)\n    \n    # Train a Random Forest Classifier\n    clf = RandomForestClassifier(random_state=seed)\n    clf.fit(X_train, y_train)\n    \n    return clf"}
{"task_id": "BigCodeBench/980", "solution": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    if df.empty:\n        raise ValueError(\"DataFrame is empty.\")\n    if df.select_dtypes(include='number').empty:\n        raise ValueError(\"No numeric columns present in DataFrame.\")\n    \n    # Select only numeric columns\n    numeric_df = df.select_dtypes(include='number')\n    \n    # Standardize numeric columns\n    scaler = StandardScaler()\n    standardized_df = pd.DataFrame(scaler.fit_transform(numeric_df), columns=numeric_df.columns)\n    \n    # Compute correlation matrix\n    corr_matrix = standardized_df.corr()\n    \n    # Plot the heatmap\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(corr_matrix, annot=True, fmt=\".2f\", ax=ax)\n    ax.set_title('Correlation Matrix of Standardized Numeric Columns')\n    plt.tight_layout()\n    \n    return standardized_df, fig"}
{"task_id": "BigCodeBench/981", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(start_date, end_date, num_series, seed=None):\n    if start_date > end_date:\n        raise ValueError(\"start_date must not be later than end_date.\")\n    if num_series < 1:\n        raise ValueError(\"num_series must be at least 1.\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    # Generate date range\n    date_range = pd.date_range(start=start_date, end=end_date)\n    \n    # Create DataFrame with random data\n    data = {f'series_{i+1}': random.sample(range(101), len(date_range)) for i in range(num_series)}\n    df = pd.DataFrame(data, index=date_range)\n    \n    # Plotting\n    plt.figure(figsize=(14, 7))\n    for i in range(num_series):\n        plt.plot(df[f'series_{i+1}'], label=f'series_{i+1}', marker='o', linestyle='-')\n    plt.title('Random Time Series')\n    plt.xlabel('Date')\n    plt.ylabel('Value')\n    plt.legend()\n    plt.grid(True)\n    \n    return df, plt.gca()"}
{"task_id": "BigCodeBench/982", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(df, column, bins=30, density=True, alpha=0.6, color=\"g\", seed=None):\n    \"\"\"\n    The function is defined as described, with an added import statement for pandas to ensure self-containment.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Extract the data for the specified column\n    data = df[column]\n    \n    # Plot the histogram\n    ax = plt.hist(data, bins=bins, density=density, alpha=alpha, color=color)\n    \n    # Fit a normal distribution to the data\n    mu, std = norm.fit(data)\n    \n    # Plot the fitted normal distribution curve\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    plt.plot(x, p, 'k', linewidth=2, label=f'Normal dist. fit (\u03bc={mu:.2f}, \u03c3={std:.2f})')\n    \n    # Set the plot title\n    ax.set_title(f'Normal Fit for \\'{column}\\'')\n    ax.legend()\n    \n    return ax"}
{"task_id": "BigCodeBench/983", "solution": "import pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(df):\n    if df.empty:\n        raise ValueError(\"DataFrame is empty.\")\n    if not all(df.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise TypeError(\"DataFrame contains non-numeric data types.\")\n    \n    # Calculate covariance matrix\n    covariance_df = df.cov()\n    \n    # Generate pair plot\n    pair_plot = sns.pairplot(df)\n    \n    return covariance_df, pair_plot"}
{"task_id": "BigCodeBench/984", "solution": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\ndef task_func(df, x_column, y_column):\n    \"\"\"\n    Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\n    \"\"\"\n    # Ensure the DataFrame, column names, and data types are valid\n    assert isinstance(df, pd.DataFrame), \"Input must be a pandas DataFrame\"\n    assert x_column in df.columns and y_column in df.columns, \"Columns must exist in the DataFrame\"\n    assert df[x_column].dtype in ['int64', 'float64'] and df[y_column].dtype in ['int64', 'float64'], \"Columns must be numeric\"\n\n    # Create a scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(df[x_column], df[y_column], color='blue', label='Data Points')\n\n    # Fit a linear regression model\n    model = LinearRegression()\n    model.fit(df[[x_column]], df[y_column])\n    y_pred = model.predict(df[[x_column]])\n\n    # Plot the regression line\n    ax.plot(df[x_column], y_pred, color='red', label='Regression Line')\n\n    # Set labels and legend\n    ax.set_xlabel(x_column)\n    ax.set_ylabel(y_column)\n    ax.legend()\n\n    return ax"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    # Validate and parse JSON data\n    try:\n        data = json.loads(json_data)\n        if \"Countries\" not in data or not isinstance(data[\"Countries\"], dict):\n            raise ValueError(\"JSON data must contain a 'Countries' key with a dictionary value.\")\n        countries = data[\"Countries\"]\n        for country, pop in countries.items():\n            if not isinstance(country, str) or not isinstance(pop, (int, float)) or pop < 0:\n                raise ValueError(\"Country names must be strings and populations non-negative integers or floats.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON data provided.\")\n\n    # Clean and transform data\n    countries_data = [{\"Country\": k, \"Population\": math.floor(v) if isinstance(v, float) else v} for k, v in countries.items()]\n\n    # Create DataFrame\n    df = pd.DataFrame(countries_data)\n\n    # Ensure output directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Save DataFrame to CSV\n    csv_file_path = os.path.join(output_dir, file_name)\n    try:\n        df.to_csv(csv_file_path, index=False)\n    except IOError as e:\n        raise IOError(f\"Error writing file to {output_dir}: {e}\")\n\n    return csv_file_path, df"}
{"task_id": "BigCodeBench/986", "solution": "import json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\ndef task_func(json_data: str, key_path: list):\n    try:\n        # Load JSON data\n        data_dict = json.loads(json_data)\n        \n        # Traverse the JSON data based on key_path\n        for key in key_path:\n            data_dict = data_dict[key]\n            \n        # Convert string data to list of numbers\n        data_str = data_dict\n        data_list = [float(item) for item in data_str.split(\",\")]\n        \n        # Check if data is numeric\n        if not all(isinstance(item, (int, float)) for item in data_list):\n            raise ValueError(\"Non-numeric data found.\")\n        \n    except KeyError:\n        raise KeyError(\"A specified key was not found in the JSON data.\")\n    \n    except ValueError as e:\n        raise e\n    \n    # Convert list to DataFrame for seaborn\n    data_df = pd.DataFrame(data_list, columns=['Values'])\n    \n    # Create a boxplot\n    plt.figure(figsize=(10, 6))\n    sns.boxplot(y='Values', data=data_df)\n    plt.title('Boxplot of Extracted Numerical Data')\n    plt.ylabel('Values')\n    plt.xlabel('Feature')\n    \n    # Return the figure\n    return plt.gcf()\njson_data = '{\"level1\":{\"level2\":{\"data\":\"1,2,3,4\"}}}'\nkey_path = ['level1', 'level2', 'data']"}
{"task_id": "BigCodeBench/987", "solution": "import json\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(json_data: str, data_key: str):\n    # Load JSON data\n    data = json.loads(json_data)\n    \n    # Extract data using the provided key\n    try:\n        values = pd.Series(jsonpath.jsonpath(data, data_key)[0])\n    except jsonpath.JSONPathError:\n        raise KeyError(f\"Key path '{data_key}' not found in data.\")\n    \n    # Check if data is empty\n    if values.empty:\n        return values, None, None\n    \n    # Normalize the data\n    scaler = MinMaxScaler()\n    normalized_values = pd.Series(scaler.fit_transform(values.values.reshape(-1, 1)).flatten())\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    if not values.empty:\n        ax.plot(values.index, values, label='Original Data')\n        ax.plot(normalized_values.index, normalized_values, label='Normalized Data')\n        ax.set_title('Comparison of Original and Normalized Data')\n        ax.set_xlabel('Index')\n        ax.set_ylabel('Value')\n        ax.legend()\n    else:\n        ax = None\n    \n    return values, normalized_values, ax"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n    # Check if the directory exists\n    if not Path(dir_path).is_dir():\n        raise FileNotFoundError(f\"The directory {dir_path} does not exist or is not a directory.\")\n    \n    # Deduplicate predicates\n    predicates = set(predicates)\n    \n    # Validate predicates\n    valid_predicates = {'is_file', 'is_dir', 'has_special_chars', 'has_numbers'}\n    if not predicates.issubset(valid_predicates):\n        invalid_preds = predicates - valid_predicates\n        raise ValueError(f\"Invalid predicates provided: {invalid_preds}. Valid predicates are: {valid_predicates}.\")\n    \n    # Initialize results\n    results = {}\n    \n    # Evaluate each item in the directory\n    for item in os.listdir(dir_path):\n        item_path = os.path.join(dir_path, item)\n        \n        # Check if it's a file or directory\n        is_file = os.path.isfile(item_path)\n        is_dir = os.path.isdir(item_path)\n        \n        # Check for special characters and numbers in the base name\n        base_name, _ = os.path.splitext(item)\n        has_special_chars = bool(re.search(r'[^a-zA-Z0-9_]', base_name))\n        has_numbers = bool(re.search(r'\\d', base_name))\n        \n        # Construct result for the item\n        result = {\n            'is_file': is_file,\n            'is_dir': is_dir,\n            'has_special_chars': has_special_chars,\n            'has_numbers': has_numbers\n        }\n        \n        # Filter result based on the specified predicates\n        filtered_result = {k: v for k, v in result.items() if k in predicates}\n        results[item] = filtered_result\n    \n    # If no valid predicates, raise an error\n    if not results:\n        raise ValueError(\"No valid predicates provided to evaluate the directory.\")\n    \n    return results"}
{"task_id": "BigCodeBench/989", "solution": "import random\nimport string\ndef task_func(length: int, predicates: list, seed: int = None):\n    if length < 0:\n        raise ValueError(\"Length must be non-negative.\")\n    \n    if seed is not None:\n        random.seed(seed)\n    \n    valid_predicates = {'has_uppercase', 'has_lowercase', 'has_special_chars', 'has_numbers'}\n    predicates = set(predicates) & valid_predicates  # Deduplicate and filter out invalid predicates\n    \n    characters = ''\n    if 'has_uppercase' in predicates:\n        characters += string.ascii_uppercase\n    if 'has_lowercase' in predicates:\n        characters += string.ascii_lowercase\n    if 'has_numbers' in predicates:\n        characters += string.digits\n    if 'has_special_chars' in predicates:\n        characters += string.punctuation\n    \n    if not characters:\n        characters = string.ascii_letters + string.digits + string.punctuation\n    \n    random_string = ''.join(random.choice(characters) for _ in range(length))\n    \n    characteristics = {pred: False for pred in predicates}\n    \n    for pred in predicates:\n        if pred == 'has_uppercase':\n            characteristics[pred] = any(char.isupper() for char in random_string)\n        elif pred == 'has_lowercase':\n            characteristics[pred] = any(char.islower() for char in random_string)\n        elif pred == 'has_numbers':\n            characteristics[pred] = any(char.isdigit() for char in random_string)\n        elif pred == 'has_special_chars':\n            characteristics[pred] = any(char in string.punctuation for char in random_string)\n    \n    return random_string, characteristics"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n    decoded_bytes = binascii.unhexlify(hex_string)\n    \n    utf8_string = decoded_bytes.decode('utf-8')\n    \n    # Encoding operations\n    hex_encoded = binascii.hexlify(decoded_bytes).decode('utf-8')\n    base64_encoded = base64.b64encode(decoded_bytes).decode('utf-8')\n    utf8_encoded = utf8_string\n    utf16_encoded = utf8_string.encode('utf-16').decode('utf-16')\n    utf32_encoded = utf8_string.encode('utf-32').decode('utf-32')\n    \n    # ASCII check\n    ascii_encoded = utf8_string.encode('ascii', 'ignore').decode('ascii', 'ignore')\n    if ascii_encoded != utf8_string:\n        ascii_encoded = 'Not representable in ASCII'\n    \n    # URL encoding\n    url_encoded = urllib.parse.quote(utf8_string)\n    \n    # ROT13 encoding\n    rot13_encoded = codecs.encode(utf8_string, 'rot_13')\n    \n    return {\n        'hex': hex_encoded,\n        'base64': base64_encoded,\n        'utf-8': utf8_encoded,\n        'utf-16': utf16_encoded,\n        'utf-32': utf32_encoded,\n        'ASCII': ascii_encoded,\n        'URL': url_encoded,\n        'ROT13': rot13_encoded.decode('utf-8')  # Decoding back to utf-8 for consistency\n    }"}
{"task_id": "BigCodeBench/991", "solution": "import binascii\nimport string\nimport random\ndef task_func(length):\n    \"\"\"\n    Generate a random hexadecimal string of a given length and then attempt to decode it in ASCII.\n    The resulting ASCII string may contain non-printable characters\n    or be shorter than the input length if not all byte values correspond to printable ASCII characters.\n\n    Parameters:\n    length (int): The length of the hexadecimal string.\n\n    Returns:\n    str: The decoded ASCII string.\n\n    Example:\n    >>> random.seed(0)\n    >>> task_func(6)\n    '\\\\x18\\\\x0f\\\\x1f\\\\x0e\\\\x1f\\\\x07'\n    >>> task_func(8)\n    '\\\\x1f\\\\x7e\\\\x1f\\\\x0e\\\\x1f\\\\x07\\\\x1f\\\\x7f'\n    \"\"\"\n    # Generate a random hexadecimal string\n    hex_str = ''.join(random.choices(string.hexdigits, k=length))\n    \n    # Convert the hexadecimal string to bytes, then decode it to ASCII\n    # Note: This may result in non-printable characters or a shorter string if decoded bytes are not printable ASCII\n    ascii_str = binascii.unhexlify(hex_str).decode('ascii', errors='ignore')\n    \n    return ascii_str"}
{"task_id": "BigCodeBench/992", "solution": "import sys\nimport sqlite3\nPATH_TO_APPEND = \"path/to/whatever\"\nDATABASE = \"path/to/database.db\"\ndef create_table_if_not_exists(conn):\n    \"\"\"Create the paths table if it doesn't exist.\"\"\"\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS paths (\n            path TEXT PRIMARY KEY\n        )\n    \"\"\")\n    conn.commit()\ndef is_path_unique(conn, path):\n    \"\"\"Check if the path is already in the database.\"\"\"\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT 1 FROM paths WHERE path = ?\", (path,))\n    return cursor.fetchone() is None\ndef task_func(path_to_append=PATH_TO_APPEND, database=DATABASE):\n    \"\"\"\n    Function as described in the problem statement.\n    \"\"\"\n    # Append to sys.path\n    sys.path.append(path_to_append)\n    \n    # Connect to SQLite database\n    conn = sqlite3.connect(database)\n    create_table_if_not_exists(conn)\n    \n    # Ensure the path is unique before inserting\n    if is_path_unique(conn, path_to_append):\n        conn.execute(\"INSERT INTO paths (path) VALUES (?)\", (path_to_append,))\n        conn.commit()\n        print(f\"Path '{path_to_append}' appended to sys.path and database.\")\n    else:\n        print(f\"Path '{path_to_append}' already exists in the database, skipping insert.\")\n    \n    conn.close()\n    return path_to_append"}
{"task_id": "BigCodeBench/993", "solution": "import re\nfrom scipy.stats import gaussian_kde\nfrom scipy import linalg\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove punctuation and split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Calculate word lengths\n    word_lengths = [len(word) for word in words]\n    \n    # Set up the matplotlib figure\n    fig, ax = plt.subplots(figsize=(10, 6))\n    \n    # Plot histogram\n    ax.hist(word_lengths, bins=range(1, max(word_lengths) + 2), edgecolor='black', align='left')\n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Distribution of Word Lengths')\n    \n    # Calculate and plot KDE if there are enough data points\n    if len(word_lengths) > 1:\n        density = gaussian_kde(word_lengths)\n        x = range(1, max(word_lengths) + 1)\n        ax.plot(x, density(x), 'r-', linewidth=2, label='KDE')\n        ax.legend()\n    \n    # Show plot\n    plt.tight_layout()\n    return ax"}
{"task_id": "BigCodeBench/994", "solution": "import requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, csv_file_path: str) -> list:\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raises stored HTTPError, if one occurred.\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching URL: {e}\")\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    data = []\n    containers = soup.find_all('div', class_='container')\n    \n    for container in containers:\n        title = container.find('h1').text if container.find('h1') else 'No Title'\n        date = container.find('span', class_='date').text if container.find('span', class_='date') else 'No Date'\n        author = container.find('span', class_='author').text if container.find('span', class_='author') else 'No Author'\n        data.append((title, date, author))\n    \n    df = pd.DataFrame(data, columns=['Title', 'Date', 'Author'])\n    df.to_csv(csv_file_path, index=False)\n    \n    return data"}
{"task_id": "BigCodeBench/995", "solution": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(file_path: str, plot_path: str) -> (float, float, str):\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    \n    try:\n        # Read the CSV file\n        data = pd.read_csv(file_path)\n        \n        # Ensure the DataFrame is not empty\n        if data.empty:\n            return np.nan, np.nan, plot_path\n        \n        # Assuming the data is in a single column, named 'Value' for this example\n        # You may need to adjust the column name based on actual CSV structure\n        values = data['Value'].dropna()  # Drop NaN values for calculation\n        \n        # Statistical analysis\n        mean_value = values.mean()\n        median_value = values.median()\n        \n        # Plotting\n        plt.figure(figsize=(10, 6))\n        plt.plot(values, marker='o', linestyle='-')\n        plt.title(\"Data Visualization\")\n        plt.xlabel(\"Index\")\n        plt.ylabel(\"Value\")\n        plt.savefig(plot_path)\n        plt.close()  # Close the plot to prevent display in non-interactive environments\n        \n        return mean_value, median_value, plot_path\n    \n    except KeyError:\n        print(\"The CSV file does not contain a 'Value' column or the column name is misspelled.\")\n        return np.nan, np.nan, plot_path\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return np.nan, np.nan, plot_path"}
{"task_id": "BigCodeBench/996", "solution": "import requests\nimport json\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, file_name: str = \"Output.txt\") -> str:\n    \"\"\"\n    Scrape the 'title' from a specified web page, save it in JSON format to a given file, \n    and append to the file if it exists.\n    \"\"\"\n    try:\n        # Send request to get the webpage content\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx, 5xx)\n        \n        # Use BeautifulSoup to parse the HTML content\n        soup = BeautifulSoup(response.text, 'html.parser')\n        \n        # Extract the title\n        title = soup.find('title').text if soup.find('title') else 'None'\n        \n        # Prepare the data to be saved\n        data = {\"title\": title}\n        \n        # Write the data to the file in JSON format\n        mode = 'a' if os.path.exists(file_name) else 'w'  # Append if file exists, else write\n        with open(file_name, mode, encoding='utf-8') as file:\n            json.dump(data, file)\n            if mode == 'a':  # Add a new line after each appended JSON object except the first one\n                file.write('\\n')\n        \n        return file_name\n    except requests.RequestException as e:\n        print(f\"Error occurred: {e}\")\n        return \"\"\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return \"\""}
{"task_id": "BigCodeBench/997", "solution": "import urllib.request\nimport os\nimport zipfile\nTARGET_DIR = \"downloaded_files\"\nTARGET_ZIP_FILE = \"downloaded_files.zip\"\ndef task_func(url):\n    \"\"\"\n    Download and extract a zip file from a specified URL to a designated directory.\n    \"\"\"\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the local zip file after extraction\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\ndef task_func(url, column_name, csv_file_path):\n    try:\n        # Download the CSV file\n        urllib.request.urlretrieve(url, csv_file_path)\n    except urllib.error.URLError as e:\n        print(f\"Error downloading the file: {e}\")\n        return {}\n\n    # Initialize a dictionary to hold the counts\n    counts = collections.defaultdict(int)\n\n    # Check if the column exists and process the CSV file\n    try:\n        with open(csv_file_path, mode='r', encoding='utf-8') as file:\n            reader = csv.DictReader(file)\n            if column_name not in reader.fieldnames:\n                os.remove(csv_file_path)  # Remove the downloaded file\n                raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n            for row in reader:\n                counts[row[column_name]] += 1\n    except FileNotFoundError:\n        print(\"The downloaded file was not found, which might be due to a download error.\")\n        return {}\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return {}\n\n    # Remove the downloaded CSV file\n    os.remove(csv_file_path)\n\n    return dict(counts)"}
{"task_id": "BigCodeBench/1000", "solution": "import urllib.request\nimport os\nimport json\nimport pandas as pd\nTARGET_JSON_FILE = \"downloaded_file.json\"\ndef task_func(url):\n    \"\"\"\n    This function retrieves a JSON file from the given URL, converts it to a DataFrame, and cleans up.\n    \"\"\"\n    # Download the JSON file\n    urllib.request.urlretrieve(url, TARGET_JSON_FILE)\n    \n    # Load the JSON file into a Python object\n    with open(TARGET_JSON_FILE, 'r') as file:\n        data = json.load(file)\n    \n    # Convert the Python object into a pandas DataFrame\n    df = pd.DataFrame(data)\n    \n    # Delete the temporary JSON file\n    os.remove(TARGET_JSON_FILE)\n    \n    return df"}
{"task_id": "BigCodeBench/1001", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path: str):\n    # Read data from CSV file\n    df = pd.read_csv(csv_file_path)\n    \n    # Check if 'column1' exists in the dataframe\n    if 'column1' not in df.columns:\n        raise ValueError(\"The CSV file must contain a column named 'column1'.\")\n\n    # Normalize 'column1'\n    df['normalized_column1'] = (df['column1'] - df['column1'].min()) / (df['column1'].max() - df['column1'].min())\n    \n    # Create a plot\n    fig, ax = plt.subplots()\n    \n    # Plot the normalized data\n    ax.hist(df['normalized_column1'], bins=20, alpha=0.7, color='blue')\n    \n    # Set title\n    ax.set_title(f\"{' ' * 10}Plot Title : {' ' * 10}Normalized Column 1\")\n    \n    # Set x-label\n    ax.set_xlabel(f\"{' ' * 10}Index : {' ' * 10}Normalized Value\")\n    \n    # Set y-label\n    ax.set_ylabel(f\"{' ' * 10}Frequency : {' ' * 10}Normalized Value\")\n    \n    return ax"}
{"task_id": "BigCodeBench/1002", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column_name=\"target_column\"):\n    # Convert JSON-like data into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Check if the specified column exists in the DataFrame\n    if column_name not in df.columns:\n        raise ValueError(f\"The column '{column_name}' does not exist in the DataFrame.\")\n    \n    # If the column is non-numeric, convert it to categorical then numeric codes\n    if df[column_name].dtype == 'object':\n        df[column_name] = pd.Categorical(df[column_name]).codes\n        \n    # Plot histogram\n    ax = df[column_name].hist(bins='auto')\n    ax.set_title(f'Histogram of {column_name}')\n    ax.set_xlabel(column_name)\n    ax.set_ylabel('Frequency')\n    \n    return df, ax"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n    try:\n        # Fetch XML data from URL\n        response = urllib.request.urlopen(url)\n        xml_data = response.read()\n        \n        # Parse XML data\n        root = etree.fromstring(xml_data)\n        \n        # Check if the XML structure is as expected (assuming each item has 'name' and 'age')\n        if root.tag != 'root' or not all(item.tag in ['name', 'age'] for item in root):\n            raise ValueError(\"XML structure does not match expected format.\")\n        \n        # Prepare data for DataFrame\n        data = [{child.tag: child.text for child in item} for item in root]\n        \n        # Create DataFrame\n        df = pd.DataFrame(data)\n        \n        return df\n    \n    except urllib.error.URLError as e:\n        raise ValueError(f\"Failed to fetch URL: {e}\")\n    except etree.XMLSyntaxError as e:\n        raise ValueError(\"Invalid XML syntax: \" + str(e))\n    except Exception as e:\n        raise ValueError(\"An unexpected error occurred: \" + str(e))"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n    try:\n        # Download the text file\n        with urllib.request.urlopen(url) as response:\n            text = response.read().decode('utf-8')\n    \n        # Process the text to count the frequency of each word\n        words = re.findall(r'\\b\\w+\\b', text)\n        word_freq = Counter(words)\n    \n        # Plot the ten most common words\n        common_words = word_freq.most_common(10)\n        labels, values = zip(*common_words)\n        fig, ax = plt.subplots()\n        ax.bar(labels, values)\n        ax.set_title('Top 10 Most Frequent Words')\n        plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n        plt.tight_layout()  # Adjust layout to prevent clipping of labels\n        \n        # Show the plot (optional, can be commented out for non-interactive environments)\n        plt.show()\n    \n        return word_freq, ax\n    \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None, None"}
{"task_id": "BigCodeBench/1005", "solution": "import urllib.request\nimport zipfile\nimport os\nimport urllib.error\ndef task_func(url: str, save_path: str = \"downloaded_file.zip\", extract_path: str = \"extracted_files\") -> str:\n    try:\n        # Download the file from 'url' and save it locally under 'save_path'\n        urllib.request.urlretrieve(url, save_path)\n    except urllib.error.URLError as e:\n        return f\"URL Error: {e.reason}\"\n\n    try:\n        # Extract the downloaded ZIP file\n        with zipfile.ZipFile(save_path, 'r') as zip_ref:\n            zip_ref.extractall(extract_path)\n    except zipfile.BadZipFile:\n        # Handle case where the file is not a valid ZIP file\n        os.remove(save_path)  # Remove the invalid ZIP file\n        return \"Error: The downloaded file is not a valid ZIP file.\"\n    except Exception as e:\n        # Handle other potential extraction errors\n        os.remove(save_path)  # Remove the ZIP file due to extraction error\n        return f\"Extraction Error: {str(e)}\"\n\n    # Delete the downloaded ZIP file after successful extraction\n    os.remove(save_path)\n    \n    return extract_path"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()  # Raises stored HTTPError, if one occurred.\n\n        # Check if the content type is a zip file.\n        if 'application/zip' not in response.headers.get('content-type', ''):\n            return \"Error: The URL does not point to a ZIP file.\"\n\n        # Download and save the zip file.\n        file_name = os.path.join(download_path, url.split('/')[-1])\n        with open(file_name, 'wb') as f:\n            for chunk in response.iter_content(1024):\n                f.write(chunk)\n\n        # Extract the zip file.\n        try:\n            with ZipFile(file_name, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n            return os.path.join(download_path, zip_ref.namelist()[0].split('/')[0])\n        except BadZipFile:\n            return \"Error: The downloaded file is not a valid ZIP file.\"\n\n    except requests.RequestException as e:\n        # Any error in the request process.\n        return f\"Error: Unable to download the file from the provided URL. {str(e)}\"\n    except Exception as e:\n        # Catch-all for other exceptions.\n        return f\"Error: {str(e)}\""}
{"task_id": "BigCodeBench/1007", "solution": "import requests\nimport pandas as pd\ndef task_func(url: str) -> pd.DataFrame:\n    try:\n        # Send request with a timeout\n        response = requests.get(url, timeout=5)\n        # Raise an exception if the response wasn't successful\n        response.raise_for_status()\n    except requests.RequestException as e:\n        # Reraise network-related issues\n        raise SystemError(f\"Network issue: {e}\")\n    \n    try:\n        # Convert the JSON response to a DataFrame\n        data = response.json()\n        # Assuming data is a list of dictionaries to be converted into DataFrame\n        df = pd.DataFrame(data)\n    except ValueError as e:\n        # Raise an exception if data is not a valid JSON convertible to DataFrame\n        raise ValueError(\"Invalid JSON format for DataFrame conversion: \" + str(e))\n    \n    return df"}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url, table_id):\n    try:\n        # Send HTTP request\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx, 5xx)\n    except requests.exceptions.HTTPError as errh:\n        print(f\"HTTP Error: {errh}\")\n        return\n    except requests.exceptions.ConnectionError as errc:\n        print(f\"Error Connecting: {errc}\")\n        return\n    except requests.exceptions.Timeout as errt:\n        print(f\"Timeout Error: {errt}\")\n        return\n    except requests.exceptions.RequestException as err:\n        print(f\"Something went wrong: {err}\")\n        return\n    \n    # Parse HTML content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    \n    # Find the table by its ID\n    table = soup.find('table', id=table_id)\n    \n    if table is None:\n        raise ValueError(\"Table with the specified ID not found.\")\n    \n    # Extract data from table into DataFrame\n    data = []\n    headers = []\n    rows = table.find_all('tr')\n    \n    # Check if the table has header row\n    header_row = rows[0] if rows else None\n    if header_row:\n        headers = [th.get_text(strip=True) for th in header_row.find_all('th')]\n        rows = rows[1:]\n    \n    for row in rows:\n        data.append([td.get_text(strip=True) for td in row.find_all('td')])\n    \n    # Create DataFrame, handling case where no rows are found\n    if data:  # If data list is not empty\n        df = pd.DataFrame(data, columns=headers)\n    else:\n        df = pd.DataFrame(columns=headers)  # Empty DataFrame with headers if no rows\n    \n    return df"}
{"task_id": "BigCodeBench/1009", "solution": "import xml.etree.ElementTree as ET\nimport csv\ndef task_func(xml_content, output_csv_path):\n    try:\n        # Parse XML content\n        root = ET.fromstring(xml_content)\n    except ET.ParseError as e:\n        raise ET.ParseError(f\"Failed to parse XML: {e}\")\n\n    # Prepare CSV data\n    columns = []\n    data_rows = []\n    for elem in root.iter():\n        if elem.tag not in columns:\n            columns.append(elem.tag)\n        data_rows.append(elem.text)\n\n    # Write to CSV\n    try:\n        with open(output_csv_path, 'w', newline='') as csvfile:\n            writer = csv.writer(csvfile)\n            # Write header\n            writer.writerow(columns)\n            # Write data rows\n            for row in zip(*[data_rows[i::len(columns)] for i in range(len(columns))]):\n                writer.writerow(row)\n    except IOError as e:\n        raise IOError(f\"Failed to write to CSV: {e}\")"}
{"task_id": "BigCodeBench/1010", "solution": "import requests\nfrom PIL import Image\nimport io\ndef task_func(url):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raises stored HTTPError, if one occurred.\n\n        # Check if the content type is an image\n        if not response.headers['Content-Type'].startswith('image/'):\n            raise ValueError(\"The content type is not an image.\")\n\n        # Decode the image data and open it with PIL\n        image_data = io.BytesIO(response.content)\n        img = Image.open(image_data)\n\n        if img is None:\n            raise ValueError(\"Failed to open the image with PIL.\")\n\n        return img\n\n    except requests.RequestException as e:\n        raise ValueError(f\"Error fetching the URL: {e}\")\n    except ValueError as e:\n        raise e\n    except Exception as e:\n        raise ValueError(f\"An unexpected error occurred: {e}\")"}
{"task_id": "BigCodeBench/1011", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path, col1_name=\"column1\", col2_name=\"column2\"):\n    # Read CSV file\n    df = pd.read_csv(csv_file_path)\n    \n    # Check if the columns exist in the DataFrame\n    if col1_name not in df.columns or col2_name not in df.columns:\n        raise ValueError(f\"Columns {col1_name} or {col2_name} not found in the CSV file.\")\n    \n    # Group by the specified column and calculate the mean of the other column\n    grouped_mean = df.groupby(col1_name)[col2_name].mean()\n    \n    # Create a bar plot\n    ax = grouped_mean.plot(kind='bar', figsize=(10, 6))\n    \n    # Set the title and labels dynamically\n    ax.set_title(f\"Mean of {col2_name} Grouped by {col1_name}\")\n    ax.set_xlabel(col1_name)\n    ax.set_ylabel(f\"Mean of {col2_name}\")\n    \n    return ax"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\nimport io\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n    ZIP_DIR.mkdir(parents=True, exist_ok=True)\n    \n    # Download the file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx or 5xx)\n    except requests.RequestException as e:\n        return f\"Error in downloading: {e}\", []\n\n    # Save the downloaded file\n    file_path = DOWNLOAD_DIR / filename\n    with open(file_path, 'wb') as f:\n        f.write(response.content)\n\n    # Extract the file\n    try:\n        with zipfile.ZipFile(file_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n    except zipfile.BadZipFile as e:\n        return f\"Error in extraction: {e}\", []\n    except Exception as e:\n        return f\"Error handling file: {e}\", []\n\n    # Get the list of unzipped files\n    unzipped_files = [f.name for f in ZIP_DIR.iterdir() if f.is_file()]\n\n    return \"Download and extraction successful\", unzipped_files"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(url: str, base_url: str = \"https://www.example.com\", csv_file: str = \"scraped_data.csv\") -> int:\n    # Send a GET request to the URL\n    response = requests.get(urljoin(base_url, url))\n    \n    # Create a BeautifulSoup object to parse the HTML content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    \n    # Find all the anchor tags\n    links = soup.find_all('a')\n    \n    # Set to store unique absolute links\n    unique_links = set()\n    \n    # Process each link\n    for link in links:\n        href = link.get('href')\n        if href is not None:\n            # Convert relative links to absolute\n            absolute_url = urljoin(base_url, href)\n            unique_links.add(absolute_url)\n    \n    # Save the unique links to a CSV file\n    with open(csv_file, mode='w', newline='', encoding='utf-8') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Absolute Links'])\n        for link in unique_links:\n            writer.writerow([link])\n    \n    # Return the number of unique links\n    return len(unique_links)"}
{"task_id": "BigCodeBench/1014", "solution": "import requests\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(api_url):\n    if not isinstance(api_url, str):\n        raise TypeError(\"API URL must be a string.\")\n    \n    try:\n        response = requests.get(api_url)\n        response.raise_for_status()  # Raises an HTTPError for bad status codes (4xx, 5xx)\n    except requests.RequestException as e:\n        print(f\"Error fetching data: {e}\")\n        raise\n\n    # Assuming the response is JSON and can be converted to a DataFrame\n    try:\n        data = response.json()\n        df = pd.DataFrame(data)\n    except ValueError:\n        print(\"Failed to parse JSON response.\")\n        return None, None\n\n    if df.empty:\n        print(\"Data is empty. No plot generated.\")\n        return df, None\n    \n    # Simple example: plotting the first column of the DataFrame\n    if 'column_name' in df:  # Replace 'column_name' with actual column name\n        plt.figure(figsize=(10, 6))\n        plt.plot(df['column_name'])  # Replace 'column_name' with actual column name\n        plt.title('Data Plot')\n        plt.xlabel('Index')\n        plt.ylabel('Value')\n        plot = plt.gca()  # Get the current Axes\n    else:\n        print(\"No suitable column for plotting found.\")\n        plot = None\n    \n    return df, plot"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    try:\n        # Fetch webpage content\n        if webpage_url.startswith(\"file://\"):\n            with open(webpage_url[7:], 'r') as f:\n                content = f.read()\n        else:\n            response = requests.get(webpage_url)\n            response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx, 5xx)\n            content = response.text\n\n        # Parse HTML and extract table\n        tree = html.fromstring(content)\n        table = tree.xpath('//table')[0] if len(tree.xpath('//table')) > 0 else None\n\n        # If no table found, return 0\n        if table is None:\n            return 0\n\n        # Convert table to DataFrame\n        df = pd.read_html(html.tostring(table), header=0)[0]\n\n        # Create/connect to SQLite database\n        conn = sqlite3.connect(database_name)\n        cursor = conn.cursor()\n\n        # Drop table if it exists\n        cursor.execute(\"DROP TABLE IF EXISTS my_table\")\n\n        # Create table\n        df.to_sql('my_table', conn, if_exists='replace')\n\n        # Commit the transaction\n        conn.commit()\n\n        # Close the connection\n        conn.close()\n\n        return len(df)\n\n    except requests.RequestException as e:\n        print(f\"Network error: {e}\")\n        return -1  # Indicating a network issue\n    except sqlite3.DatabaseError as e:\n        print(f\"Database error: {e}\")\n        return -2  # Indicating a database issue\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return -3  # Indicating an unexpected error"}
{"task_id": "BigCodeBench/1016", "solution": "import requests\nfrom io import BytesIO\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(url: str) -> \"matplotlib.axes._axes.Axes\":\n    try:\n        # Download the image from the URL\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx, 5xx)\n        \n        # Open the image file from the response's content\n        image = Image.open(BytesIO(response.content))\n        \n        # Convert the image to grayscale\n        grayscale_image = image.convert('L')\n        \n        # Convert the grayscale image to a numpy array\n        image_array = np.array(grayscale_image, dtype=np.float32)\n        \n        # Generate and plot the histogram\n        plt.figure(figsize=(10, 5))\n        ax = plt.hist(image_array.flatten(), bins=256, range=[0, 256], color='gray')\n        \n    except requests.RequestException as e:\n        # This is raised if there's an issue with the request (e.g., invalid URL, network problem)\n        raise ValueError(f\"Error downloading the image: {e}\")\n    \n    except (IOError, OSError) as e:\n        # This is raised if there's an issue with opening the image\n        raise IOError(f\"Error processing the image: {e}\")\n    \n    return ax[1]  # Return the Axes object, ax[1] refers to the actual histogram bars"}
{"task_id": "BigCodeBench/1017", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\ndef task_func(csv_file_path, target_column=\"target\", test_size=0.2, n_estimators=100):\n    \"\"\"\n    The function is defined here as per the problem statement.\n    \"\"\""}
{"task_id": "BigCodeBench/1018", "solution": "from bs4 import BeautifulSoup\nimport requests\nURL = \"http://example.com\"\ndef task_func(url=URL, from_encoding=\"cp1251\", use_lxml=False):\n    \"\"\"\n    Implementation as described in the problem statement.\n    \"\"\"\n    if not url:\n        return None\n    \n    try:\n        response = requests.get(url)\n        # Check if the request was successful (status code 200)\n        if response.status_code == 200:\n            # Choose parser based on use_lxml flag\n            parser = 'lxml' if use_lxml else 'html.parser'\n            # Decode content and parse with BeautifulSoup\n            soup = BeautifulSoup(response.content, parser, from_encoding=from_encoding)\n            return soup\n        else:\n            print(f\"HTTP request failed with status {response.status_code}\")\n            return None\n    except requests.RequestException as e:\n        print(f\"Network error: {e}\")\n        return None\n    except UnicodeDecodeError:\n        print(\"Decoding error. Check the specified encoding.\")\n        return None"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    try:\n        # Attempt OCR to extract text from the image\n        with Image.open(filename) as img:\n            text = pytesseract.image_to_string(img, lang='rus')\n            # Convert text encoding\n            text = text.encode(from_encoding).decode(to_encoding)\n            return text\n    except (UnicodeDecodeError, LookupError) as e:\n        # If OCR fails or encoding issue, try to read image comment\n        try:\n            with Image.open(filename) as img:\n                comment = img.info.get('comment')\n                if comment:\n                    # Convert comment encoding\n                    comment = comment.encode(from_encoding).decode(to_encoding)\n                    return comment\n                else:\n                    raise ValueError(\"No comment found in the image.\")\n        except Exception as e:\n            print(f\"Error: {e}\")\n            # Return empty string if all attempts fail\n            return \"\""}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\nAPI_URL = \"http://api.example.com/data\"\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx or 5xx)\n        \n        content = response.content\n        if not content:\n            return {}  # Return empty dict if content is empty\n        \n        # Detect encoding if not provided\n        if from_encoding is None:\n            detected_encoding = chardet.detect(content)['encoding']\n            if detected_encoding is None:\n                raise ValueError(\"Unable to detect encoding for non-empty content\")\n            from_encoding = detected_encoding\n        \n        # Decode and then re-encode to the target encoding\n        decoded_content = content.decode(from_encoding)\n        re_encoded_content = decoded_content.encode(to_encoding).decode(to_encoding)\n        \n        # Parse as JSON\n        return json.loads(re_encoded_content)\n    \n    except requests.RequestException as e:\n        print(f\"Request error: {e}\")\n        return {}\n    except ValueError as e:\n        print(f\"Value error: {e}\")\n        return {}"}
{"task_id": "BigCodeBench/1021", "solution": "import binascii\nimport hashlib\ndef task_func(input_string, verify_hash=None):\n    \"\"\"\n    Compute the SHA256 hash of a given input string and return its hexadecimal representation.\n    Optionally, verify the computed hash against a provided hash.\n\n    Parameters:\n    - input_string (str): The string to be hashed.\n    - verify_hash (str, optional): A hexadecimal string to be compared with the computed hash.\n\n    Returns:\n    - str: A hexadecimal string representing the SHA256 hash of the input string.\n    - bool: True if verify_hash is provided and matches the computed hash, otherwise None.\n\n    Raises:\n    - TypeError: If the input is not a string or verify_hash is not a string or None.\n    \"\"\"\n    if not isinstance(input_string, str) or (verify_hash is not None and not isinstance(verify_hash, str)):\n        raise TypeError(\"Both input_string and verify_hash must be strings, or verify_hash must be None.\")\n\n    # Compute the SHA256 hash\n    computed_hash = hashlib.sha256(input_string.encode()).hexdigest()\n\n    # Verification\n    if verify_hash is not None:\n        return computed_hash == verify_hash\n    else:\n        return computed_hash"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    \"\"\"\n    Detailed function description as in the prompt...\n    \"\"\"\n    # Check if the file exists\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(f\"The file {csv_file_path} was not found.\")\n    \n    try:\n        # Load the data\n        df = pd.read_csv(csv_file_path)\n        \n        # Check if the column exists\n        if column_name not in df.columns:\n            raise ValueError(f\"The column {column_name} does not exist in the CSV file.\")\n        \n        # Convert the date column to datetime\n        df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n        \n        # Filter rows where the date is today (assuming this is the intended use of 'processing the date')\n        today = datetime.now().date()\n        df = df[df[column_name].dt.date == today]\n        \n        # Sort the dataframe (assuming a default sort by date if no specific sort order is mentioned)\n        df.sort_values(by=column_name, inplace=True)\n        \n    except EmptyDataError:\n        print(\"The CSV file is empty.\")\n        return pd.DataFrame()  # Return an empty DataFrame\n    \n    return df"}
{"task_id": "BigCodeBench/1023", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(dataframe):\n    if dataframe.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n    \n    if not all(dataframe.dtypes.apply(np.issubdtype, args=(np.number,))):\n        raise TypeError(\"All columns in the DataFrame must be numeric.\")\n    \n    if dataframe.shape[1] < 2:\n        raise ValueError(\"DataFrame must have at least two columns.\")\n    \n    # Calculate the correlation matrix\n    corr_matrix = dataframe.corr().abs()\n    \n    # Find the pair of columns with the highest absolute correlation\n    max_corr_pair = corr_matrix.unstack().sort_values(ascending=False).drop_duplicates().index[:2]\n    \n    # Extract column names\n    col1, col2 = max_corr_pair\n    \n    # Plot scatter plot for the pair of columns with the highest absolute correlation\n    ax = dataframe.plot(kind='scatter', x=col1, y=col2, alpha=0.6)\n    \n    return ax"}
{"task_id": "BigCodeBench/1024", "solution": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nPLOT_TITLE = \"Value Distribution\"\ndef task_func(data_dict):\n    # Convert dictionary to DataFrame and remove None values\n    df = pd.DataFrame(data_dict).dropna()\n    \n    # Check if DataFrame is empty or all values are the same\n    if df.empty or (df.nunique() == 1 and len(df) > 0):\n        print(\"Data does not vary or DataFrame is empty, no plot generated.\")\n        return df, None\n    \n    # Calculate number of bins\n    n_bins = max(min(11, len(df) // 2), 2)\n    \n    # Create histogram\n    plt.figure(figsize=(10, 6))\n    plot = sns.histplot(df.values.flatten(), bins=n_bins, kde=False)\n    plot.set_title(PLOT_TITLE)\n    \n    return df, plot"}
{"task_id": "BigCodeBench/1025", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nPLOT_TITLE = \"Scaled Values\"\ndef task_func(data_dict):\n    \"\"\"\n    Scales the values in a given dictionary using MinMaxScaler and plots the scaled data.\n    \"\"\"\n    # Convert dictionary to DataFrame to handle data\n    data_df = pd.DataFrame(data_dict)\n    \n    # Drop rows with any NaN (None) values to proceed with scaling\n    data_cleaned = data_df.dropna()\n    \n    # Apply MinMaxScaler to the cleaned data\n    scaler = MinMaxScaler()\n    scaled_data = scaler.fit_transform(data_cleaned)\n    \n    # Convert scaled data back to DataFrame\n    scaled_df = pd.DataFrame(scaled_data, columns=data_cleaned.columns)\n    \n    # Plot the scaled data\n    fig, ax = plt.subplots()\n    ax.plot(scaled_df.index, scaled_df.values, marker='o')\n    ax.set_title(PLOT_TITLE)\n    ax.set_xlabel('Data Points')\n    ax.set_ylabel('Scaled Values')\n    \n    return scaled_df, ax"}
{"task_id": "BigCodeBench/1026", "solution": "import numpy as np\nfrom scipy.stats import ttest_ind\nimport matplotlib.pyplot as plt\ndef task_func(kwargs):\n    # Extract groups and remove NaNs\n    group1 = np.array(kwargs.get('group1', []), dtype=float)\n    group2 = np.array(kwargs.get('group2', []), dtype=float)\n    group1 = group1[~np.isnan(group1)]\n    group2 = group2[~np.isnan(group2)]\n    \n    # Check for valid data\n    if len(group1) < 2 or len(group2) < 2:\n        raise ValueError(\"Each group must have at least two non-NaN values.\")\n    if np.var(group1) < 1e-8 or np.var(group2) < 1e-8:\n        raise ValueError(\"Both groups must have adequate variance (variance > 1e-8).\")\n    \n    # Perform t-test\n    t_stat, p_value = ttest_ind(group1, group2, nan_policy='omit')\n    significant = p_value < 0.05\n    \n    # Compute statistics\n    group1_stats = {'mean': np.mean(group1), 'std': np.std(group1)}\n    group2_stats = {'mean': np.mean(group2), 'std': np.std(group2)}\n    \n    # Create plots\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n    \n    # Boxplot\n    axs[0].boxplot([group1, group2], labels=['Group 1', 'Group 2'])\n    axs[0].set_title('Boxplot Comparison')\n    axs[0].set_ylabel('Value')\n    \n    # Histograms\n    axs[1].hist(group1, alpha=0.5, label='Group 1', density=True)\n    axs[1].hist(group2, alpha=0.5, label='Group 2', density=True)\n    axs[1].set_title('Histogram Comparison')\n    axs[1].set_xlabel('Value')\n    axs[1].set_ylabel('Density')\n    axs[1].legend()\n    \n    plt.tight_layout()\n    \n    return {\n        'significant': significant,\n        'group1_stats': group1_stats,\n        'group2_stats': group2_stats,\n        'ax_boxplot': axs[0],\n        'ax_histogram': axs[1]\n    }"}
{"task_id": "BigCodeBench/1027", "solution": "import binascii\nimport urllib.parse\ndef task_func(url):\n    \"\"\"\n    The function to decode a hexadecimal string from the 'q' query parameter of a URL.\n    \"\"\"\n    query_params = urllib.parse.urlparse(url).query\n    params_dict = urllib.parse.parse_qs(query_params)\n    \n    if 'q' in params_dict:\n        hex_string = params_dict['q'][0]\n        try:\n            # Attempt to decode the hexadecimal string into a UTF-8 string\n            decoded_string = binascii.unhexlify(hex_string).decode('utf-8')\n            return decoded_string\n        except (binascii.Error, UnicodeDecodeError):\n            # If the string is not a valid hexadecimal or cannot be decoded as UTF-8\n            return None\n    else:\n        # If 'q' parameter does not exist\n        return None"}
{"task_id": "BigCodeBench/1028", "solution": "import subprocess\nimport time\nimport json\nimport platform\nLOGFILE_PATH = \"logfile.log\"\ndef task_func(interval, duration):\n    if interval <= 0 or duration <= 0:\n        raise ValueError(\"Interval and duration must be greater than zero.\")\n    \n    cpu_usage_data = []\n    start_time = time.time()\n    \n    while time.time() - start_time < duration:\n        try:\n            if platform.system() == \"Windows\":\n                cpu_usage = float(subprocess.check_output(['wmic', 'cpu', 'get', 'LoadPercentage']).split()[1].decode())\n            else:\n                cpu_usage = float(subprocess.check_output(['top', '-bn1', '|', 'grep', 'Cpu(s)']).split()[4].split('%')[0])\n        except Exception as e:\n            print(f\"Error in retrieving CPU usage: {e}\")\n            return None\n        \n        timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())\n        cpu_usage_data.append({\"timestamp\": timestamp, \"cpu_usage\": cpu_usage})\n        \n        with open(LOGFILE_PATH, 'w') as logfile:\n            json.dump(cpu_usage_data, logfile)\n        \n        time.sleep(interval)\n    \n    return LOGFILE_PATH"}
{"task_id": "BigCodeBench/1029", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(rows=100, columns=3):\n    \"\"\"\n    Create a Pandas DataFrame with random alphabets in each cell.\n    The DataFrame will have a specified number of rows and columns.\n    Each column is named with a string from the list ['a', 'b', 'c', ...]\n    depending on the number of columns specified.\n\n    Parameters:\n    - rows (int, optional): Number of rows in the DataFrame. Defaults to 100.\n    - columns (int, optional): Number of columns in the DataFrame. Defaults to 3.\n\n    Returns:\n    DataFrame: A pandas DataFrame with random alphabets.\n    \"\"\"\n    np.random.seed(0)  # For reproducible results\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    columns_list = [chr(97 + i) for i in range(columns)]  # ASCII values for 'a' to 'z'\n    \n    data = {col: np.random.choice(list(alphabet), size=rows) for col in columns_list}\n    df = pd.DataFrame(data)\n    \n    return df"}
{"task_id": "BigCodeBench/1030", "solution": "import itertools\nimport string\nimport pandas as pd\ndef task_func():\n    \"\"\"\n    Generate all possible combinations (with replacement) of three letters from the alphabet and save them in a pandas DataFrame.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with each row representing a unique combination of three letters.\n    \"\"\"\n    letters = string.ascii_lowercase  # Get all lowercase letters\n    combinations = itertools.product(letters, repeat=3)  # Generate all combinations with replacement\n    \n    # Convert the combinations into a DataFrame\n    data = {'Letter 1': [combo[0] for combo in combinations],\n            'Letter 2': [combo[1] for combo in combinations],\n            'Letter 3': [combo[2] for combo in combinations]}\n    df = pd.DataFrame(data)\n    \n    return df"}
{"task_id": "BigCodeBench/1031", "solution": "import random\nimport string\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(n_rows=1000):\n    if n_rows <= 0:\n        raise ValueError(\"n_rows must be positive\")\n\n    # Generate random 3-letter strings\n    letters = string.ascii_lowercase\n    random_strings = [''.join(random.choices(letters, k=3)) for _ in range(n_rows)]\n    \n    # Count frequencies\n    freq_df = pd.DataFrame(random_strings, columns=['Strings']).value_counts().head(30)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.bar(freq_df.index, freq_df.values)\n    ax.set_title('Top 30 Frequencies of Random 3-Letter Strings')\n    ax.set_xlabel('Random 3-Letter Strings')\n    ax.set_ylabel('Frequency')\n    \n    return ax"}
{"task_id": "BigCodeBench/1032", "solution": "import matplotlib.pyplot as plt\nimport random\nimport string\nimport pandas as pd\nimport seaborn as sns\nLETTERS = list(string.ascii_lowercase)\ndef task_func(rows=1000, string_length=3):\n    if rows == 0:\n        print(\"No data to generate heatmap.\")\n        return None\n\n    # Generate random strings\n    data = [''.join(random.choices(LETTERS, k=string_length)) for _ in range(rows)]\n    \n    # Create DataFrame\n    df = pd.DataFrame(data, columns=['Strings'])\n    \n    # Process DataFrame to get frequency of each letter\n    letter_counts = pd.Series(''.join(df['Strings']), dtype='float64').str.get_dummies().sum()\n    correlation_matrix = letter_counts.corr()\n\n    # Create heatmap\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', square=True, xticklabels=LETTERS, yticklabels=LETTERS)\n    plt.title('Letter Frequency Correlation Heatmap')\n    plt.show()"}
{"task_id": "BigCodeBench/1033", "solution": "import itertools\nimport string\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func():\n    # Generate all possible 3-letter combinations of the alphabet\n    letters = string.ascii_lowercase\n    combinations = itertools.product(letters, repeat=3)\n    \n    # Convert combinations to DataFrame\n    df = pd.DataFrame(list(combinations), columns=['First', 'Second', 'Third'])\n    \n    # Extract first letters and count their frequencies\n    first_letters = df['First']\n    letter_counts = first_letters.value_counts()\n    \n    # Plot histogram of first letter frequencies\n    fig, ax = plt.subplots()\n    ax.bar(letter_counts.index, letter_counts.values)\n    ax.set_xlabel('First Letter')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of First Letters in 3-Letter Combinations')\n    \n    # Return DataFrame and Axes object\n    return df, ax"}
{"task_id": "BigCodeBench/1034", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nCATEGORIES = [\"Electronics\", \"Clothing\", \"Home Decor\", \"Automotive\", \"Books\"]\ndef euclidean_distance(s1, s2):\n    \"\"\"Calculates the Euclidean distance between two Series.\"\"\"\n    return np.sqrt(np.sum((s1 - s2) ** 2))\ndef task_func(s1, s2, threshold=200):\n    \"\"\"\n    Compares and visualizes the sales data of two stores for predefined categories.\n    \"\"\"\n    # Filter categories where both stores have sales exceeding the threshold\n    common_categories = s1.index.intersection(s2.index)\n    above_threshold = (s1[common_categories] > threshold) & (s2[common_categories] > threshold)\n    common_categories = common_categories[above_threshold]\n    \n    if common_categories.empty:\n        print(\"No categories meet the threshold for comparison.\")\n        return None, 0.0\n    \n    # Compute Euclidean distance\n    distance = euclidean_distance(s1[common_categories], s2[common_categories])\n    \n    # Plotting\n    ax = plt.figure(figsize=(10, 6)).add_subplot(111)\n    s1[common_categories].plot(kind='bar', color='blue', ax=ax, label='Store 1')\n    s2[common_categories].plot(kind='bar', color='orange', ax=ax, label='Store 2')\n    ax.set_title('Sales Comparison Above Threshold in Categories')\n    ax.set_ylabel('Sales')\n    ax.set_xlabel('Categories')\n    ax.legend()\n    \n    return ax, distance\ns1 = pd.Series(np.random.randint(100, 500, size=5), index=CATEGORIES)\ns2 = pd.Series(np.random.randint(150, 600, size=5), index=CATEGORIES)"}
{"task_id": "BigCodeBench/1035", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(feature: pd.Series, target: pd.Series) -> (np.ndarray, plt.Axes):\n    # Split the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.2, random_state=42)\n\n    # Train a Logistic Regression model\n    model = LogisticRegression()\n    model.fit(X_train.values.reshape(-1, 1), y_train)\n\n    # Predict the target for the test set\n    y_pred = model.predict(X_test.values.reshape(-1, 1))\n\n    # Compute the confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n\n    # Plot the confusion matrix\n    fig, ax = plt.subplots()\n    im = ax.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n    ax.figure.colorbar(im, ax=ax)\n    ax.set(xticks=np.arange(cm.shape[1]),\n           yticks=np.arange(cm.shape[0]),\n           xticklabels=['Predicted 0', 'Predicted 1'],\n           yticklabels=['Actual 0', 'Actual 1'],\n           title='Confusion Matrix',\n           ylabel='True label',\n           xlabel='Predicted label')\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n             rotation_mode=\"anchor\")\n\n    # Loop over data dimensions and create text annotations.\n    fmt = 'd'\n    thresh = cm.max() / 2.\n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            ax.text(j, i, format(cm[i, j], fmt),\n                    ha=\"center\", va=\"center\",\n                    color=\"white\" if cm[i, j] > thresh else \"black\")\n    fig.tight_layout()\n    \n    return cm, ax"}
{"task_id": "BigCodeBench/1036", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2):\n    \"\"\"\n    Visualize two Series using a swarm plot with a highlight on their intersecting data points.\n    \"\"\"\n    # Find the intersection of the two series\n    intersection = pd.merge(s1, s2, left_on=s1.index, right_on=s2.index, how='inner')\n    intersection_count = len(intersection)\n    \n    # Create a swarm plot\n    fig, ax = plt.subplots()\n    sns.swarmplot(data=[s1, s2], palette=['blue', 'green'], ax=ax)\n    \n    # Highlight intersection points\n    for idx in intersection.index:\n        ax.axhline(intersection.iloc[idx].values[0], color='red', linestyle='--')\n    \n    # Set title and labels\n    ax.set_title('Overlap Between ' + s1.name + ' and ' + s2.name)\n    ax.set_xlabel('Data Points')\n    ax.set_ylabel('Value')\n    ax.legend([s1.name, s2.name])\n    \n    return ax, intersection_count\ns1 = pd.Series([1, 2, 3, 4, 5], name='Series1')\ns2 = pd.Series([4, 5, 6, 7, 8], name='Series2')"}
{"task_id": "BigCodeBench/1037", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2, n_clusters=3):\n    if not (isinstance(s1, pd.Series) and isinstance(s2, pd.Series)):\n        raise ValueError(\"s1 and s2 must be pandas Series\")\n    if len(s1) != len(s2):\n        raise ValueError(\"s1 and s2 must have the same length\")\n    \n    # Combine the Series into a DataFrame for clustering\n    data = pd.DataFrame({'feature1': s1, 'feature2': s2})\n    \n    # Perform K-Means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    labels = kmeans.fit_predict(data)\n    \n    # Visualize the clusters\n    plt.figure(figsize=(8, 6))\n    plt.scatter(data['feature1'], data['feature2'], c=labels, cmap='viridis', label=labels)\n    plt.title('K-Means Clustering')\n    plt.xlabel('Feature 1')\n    plt.ylabel('Feature 2')\n    plt.legend(title='Cluster')\n    \n    return labels, plt.gca()\ns1 = pd.Series(np.random.rand(100), name='feature1')\ns2 = pd.Series(np.random.rand(100), name='feature2')"}
{"task_id": "BigCodeBench/1038", "solution": "from datetime import datetime\nimport json\nimport socket\ndef task_func(client_socket):\n    \"\"\"\n    Responds to a client's request by sending a JSON-formatted message containing\n    the current server time and a greeting.\n    \"\"\"\n    # Get the current server time\n    current_time = datetime.now().isoformat()\n    \n    # Prepare the greeting message with the current time\n    message = {\n        \"greeting\": \"Hello from the server!\",\n        \"server_time\": current_time\n    }\n    \n    # Convert the message to JSON\n    json_message = json.dumps(message)\n    \n    try:\n        # Send the JSON message to the client\n        client_socket.sendall(json_message.encode())\n    except Exception as e:\n        print(f\"Error sending data: {e}\")\n    finally:\n        # Gracefully close the connection\n        client_socket.close()"}
{"task_id": "BigCodeBench/1039", "solution": "import socket\nimport ssl\nimport os\nimport hashlib\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n    context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n    \n    try:\n        # Wrap the socket with SSL/TLS\n        secure_client = context.wrap_socket(client_socket, server_side=True)\n        \n        # Receive the file path from the client\n        file_path = secure_client.recv(buffer_size).decode()\n        print(\"Received file path:\", file_path)\n        \n        if os.path.exists(file_path):\n            # Calculate SHA256 hash of the file\n            with open(file_path, \"rb\") as file:\n                file_data = file.read()\n                file_hash = hashlib.sha256(file_data).hexdigest()\n            secure_client.sendall(file_hash.encode())\n            return file_hash\n        else:\n            secure_client.sendall(b'File not found').decode()\n            return 'File not found'\n    except Exception as e:\n        secure_client.sendall(str(e).encode())\n        return str(e)\n    finally:\n        # Close the SSL socket\n        secure_client.close()"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind((server_address, server_port))\n    server_socket.listen()\n    print(f\"Server started on {server_address}:{server_port}.\")\n\n    input_socket = [server_socket]\n    output_socket = []\n    message_queues = {}\n\n    end_time = datetime.now() + timedelta(seconds=run_duration)\n\n    try:\n        while datetime.now() < end_time:\n            readable, writable, exceptional = select.select(input_socket, output_socket, input_socket)\n            \n            for s in readable:\n                if s is server_socket:\n                    client_socket, client_address = s.accept()\n                    client_socket.setblocking(False)\n                    input_socket.append(client_socket)\n                    message_queues[client_socket] = queue.Queue()\n                else:\n                    data = s.recv(buffer_size)\n                    if data:\n                        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                        response = data.decode() + \" \" + now\n                        message_queues[s].put(response)\n                        if s not in output_socket:\n                            output_socket.append(s)\n                    else:\n                        if s in output_socket:\n                            output_socket.remove(s)\n                        input_socket.remove(s)\n                        s.close()\n                        del message_queues[s]\n\n            for s in writable:\n                try:\n                    next_msg = message_queues[s].get_nowait()\n                except queue.Empty:\n                    output_socket.remove(s)\n                else:\n                    s.sendall(next_msg.encode())\n\n            for s in exceptional:\n                input_socket.remove(s)\n                if s in output_socket:\n                    output_socket.remove(s)\n                s.close()\n                del message_queues[s]\n\n    finally:\n        server_socket.close()\n        print(f\"Server shutdown complete.\")\n\n    return f'Server ran for {run_duration} seconds.'"}
{"task_id": "BigCodeBench/1041", "solution": "import re\nimport os\ndef task_func(request):\n    \"\"\"\n    Handles an HTTP GET request to retrieve a static file from the server.\n    \"\"\"\n    # Validate the request format\n    match = re.match(r\"GET /(\\S+) HTTP/1.1\", request)\n    if not match:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    \n    filename = match.group(1)\n    \n    # Check if the file exists\n    if not os.path.isfile(filename):\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    \n    # Try to open the file\n    try:\n        with open(filename, 'rb') as file:\n            content = file.read()\n            content_length = len(content)\n            return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {content_length}\\r\\n\\r\\n{content.decode('utf-8', errors='ignore')}\"\n    except IOError:\n        # Handle any I/O errors, such as permission issues\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\""}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass"}
{"task_id": "BigCodeBench/1043", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nCATEGORIES = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ndef task_func(data_list):\n    if not data_list:\n        raise ValueError(\"The data list is empty.\")\n    \n    # Count occurrences of each category in the data list\n    category_counts = pd.Series(data_list).value_counts()\n    \n    # Include all predefined categories in the index, filling missing counts with 0\n    all_categories = pd.Index(CATEGORIES + category_counts.index.tolist())\n    category_counts = category_counts.reindex(all_categories, fill_value=0)\n    \n    # Check for uniform distribution of predefined categories\n    if not all(category_counts[CATEGORIES] == category_counts[CATEGORIES].iloc[0]):\n        print(\"The distribution of predefined categories is not uniform.\")\n    \n    # Create a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(all_categories, category_counts, width=0.8, align=\"center\")\n    \n    # Set labels and title for clarity\n    ax.set_xticks(all_categories)\n    ax.set_xlabel('Categories')\n    ax.set_ylabel('Counts')\n    ax.set_title('Distribution of Categories')\n    \n    return ax"}
{"task_id": "BigCodeBench/1044", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\ndef task_func(date_str, booking_data):\n    try:\n        # Validate date\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past.\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return None, None\n\n    # Compile booking status report\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_data.update(booking_data)\n    \n    # Create DataFrame\n    report_df = pd.DataFrame(list(report_data.items()), columns=['Room', 'Booking Status'])\n    \n    # Bar plot visualization\n    ax = report_df.plot(kind='bar', x='Room', y='Booking Status', figsize=(10, 6), legend=False)\n    ax.set_title(f'Room Booking Status for {date_str}')\n    ax.set_xlabel('Room')\n    ax.set_ylabel('Booking Status')\n    \n    return report_df, ax"}
{"task_id": "BigCodeBench/1045", "solution": "from datetime import datetime, timedelta\nimport numpy as np\nfrom dateutil.parser import parse\nLEAP_SECONDS = np.array(\n    [\n        1972,\n        1973,\n        1974,\n        1975,\n        1976,\n        1977,\n        1978,\n        1979,\n        1980,\n        1981,\n        1982,\n        1983,\n        1985,\n        1988,\n        1990,\n        1993,\n        1994,\n        1997,\n        1999,\n        2006,\n        2009,\n        2012,\n        2015,\n        2016,\n        2020,\n    ]\n)\ndef count_leap_seconds(date_start, date_end):\n    leap_dates = [datetime(year, 12, 31, 23, 59, 60) for year in LEAP_SECONDS if date_start <= datetime(year, 1, 1) < date_end]\n    return len(leap_dates)\ndef task_func(date_str):\n    \"\"\"\n    Calculate the total number of seconds elapsed from a given date until the current time,\n    including any leap seconds that occurred in this period.\n    \"\"\"\n    start_date = parse(date_str)\n    now = datetime.utcnow()\n    seconds_since_epoch = (now - start_date).total_seconds()\n    leap_seconds_in_period = count_leap_seconds(start_date, now)\n    return int(seconds_since_epoch + leap_seconds_in_period)"}
{"task_id": "BigCodeBench/1046", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nEMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\ndef task_func(date_str):\n    \"\"\"\n    Generate a Pandas DataFrame containing a series of dates for a predefined list of employees.\n\n    Parameters:\n    - date_str (str): A date string in the \"yyyy-mm-dd\" format to define the starting date.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with 'Employee' and 'Date' columns, listing the next 10 days for each employee.\n    \"\"\"\n    # Convert the input string to a datetime object\n    start_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Generate a list of dates for the next 10 days\n    dates = [start_date + timedelta(days=i) for i in range(10)]\n    \n    # Generate all combinations of employees and dates\n    data = list(product(EMPLOYEES, dates))\n    \n    # Convert the combinations into a DataFrame\n    df = pd.DataFrame(data, columns=['Employee', 'Date'])\n    \n    return df"}
{"task_id": "BigCodeBench/1047", "solution": "from datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    \"\"\"\n    Generates a list of random integers, where the count of integers equals the day of the month in the\n    provided date, then generates a line plot of these integers and returns the Axes object of the plot.\n\n    Parameters:\n    - date_str (str): The date string in \"yyyy-mm-dd\" format.\n\n    Returns:\n    - matplotlib.axes.Axes: The Axes object containing the plot.\n    \"\"\"\n    # Parse the date string\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Get the day of the month\n    day_of_month = date.day\n    \n    # Generate a list of random integers\n    random_integers = [random.randint(1, 100) for _ in range(day_of_month)]\n    \n    # Create a new figure and an Axes object\n    fig, ax = plt.subplots()\n    \n    # Generate a line plot\n    ax.plot(random_integers, marker='o')\n    \n    # Set labels and title\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Random Values')\n    ax.set_title(f'Line Plot of Random Integers for {date_str}')\n    \n    # Show the plot (optional, can be commented out if only the Axes object is needed)\n    plt.show()\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/1048", "solution": "from datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    \"\"\"\n    Plot a sine wave whose frequency is determined by the day of the month from the given date.\n\n    Parameters:\n    date_str (str): A date in \"yyyy-mm-dd\" format, used to determine the frequency of the sine wave.\n\n    Returns:\n    matplotlib.axes.Axes: An Axes object containing the plotted sine wave.\n    \"\"\"\n    # Parse the date string\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Determine the frequency as the day of the month\n    freq = date.day\n    \n    # Generate a range of values from 0 to 2*pi*freq for the x-axis\n    x = np.linspace(0, 2*np.pi*freq, 400)\n    \n    # Calculate the corresponding y values for a sine wave\n    y = np.sin(x)\n    \n    # Create a new plot\n    fig, ax = plt.subplots()\n    \n    # Plot the sine wave\n    ax.plot(x, y)\n    \n    # Set the title with the date and frequency\n    ax.set_title(f\"Sine Wave for {date_str} (Frequency: {freq})\")\n    \n    # Set labels for the axes\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    \n    # Show the plot but prevent the script from hanging\n    plt.tight_layout()\n    plt.show()\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/1049", "solution": "import re\nimport pandas as pd\ndef task_func(input_string: str) -> pd.DataFrame:\n    \"\"\"\n    Process a multi-line string by replacing tabs with spaces and converting it into a pandas DataFrame.\n    \"\"\"\n    # Use regex to replace tabs with spaces and filter out empty or whitespace-only lines\n    lines = [line.replace('\\t', ' ') for line in input_string.split('\\n') if line.strip()]\n    \n    # Convert the list of processed lines into a DataFrame\n    df = pd.DataFrame(lines, columns=['Text'])\n    \n    return df"}
{"task_id": "BigCodeBench/1050", "solution": "import os\nimport hashlib\nDIRECTORY = \"./hashed_files\"\ndef ensure_directory_exists(path):\n    if not os.path.exists(path):\n        os.makedirs(path)\ndef task_func(input_string):\n    ensure_directory_exists(DIRECTORY)\n    file_paths = []\n    for line in input_string.split('\\n'):\n        if line:  # ignore empty lines\n            hash_obj = hashlib.sha256(line.encode())\n            hash_hex = hash_obj.hexdigest()\n            filename = os.path.join(DIRECTORY, hash_hex[:10] + '.txt')\n            with open(filename, 'w') as file:\n                file.write(hash_hex)\n            file_paths.append(filename)\n    return file_paths"}
{"task_id": "BigCodeBench/1051", "solution": "import collections\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    if not data_dict:\n        return None, \"The distribution is uniform. (Distribution is empty.)\"\n    \n    counts = list(data_dict.values())\n    avg_count = np.mean(counts)\n    \n    uniformity = all([abs(count - avg_count) <= 1e-5 for count in counts])\n    message = \"The distribution is uniform.\" if uniformity else \"The distribution is not uniform.\"\n    \n    if not uniformity:\n        unique_counts = len(set(counts))\n        bins = min(10, unique_counts) if unique_counts > 1 else 1\n        fig, ax = plt.subplots()\n        ax.hist(counts, bins=bins, edgecolor='black')\n        \n        # Assuming categories are unique and we want to label bins with unique categories if possible\n        if bins == unique_counts:\n            ax.set_xticks(np.arange(1, bins+1))\n            ax.set_xticklabels(data_dict.keys(), rotation=45, ha='right')\n        else:\n            ax.set_xlabel('Counts')\n        \n        ax.set_ylabel('Frequency')\n        ax.set_title('Histogram of Category Counts')\n        plt.tight_layout()\n    else:\n        fig, ax = plt.subplots(), None  # Empty plot if uniform\n    \n    return ax, message"}
{"task_id": "BigCodeBench/1052", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    try:\n        # Load data\n        df = pd.read_csv(file_path)\n        if df.empty:\n            print(\"The input file is empty.\")\n            return None\n        \n        # Check if 'Text' column exists\n        if 'Text' not in df.columns:\n            print(\"The CSV file does not contain a 'Text' column.\")\n            return None\n        \n        # Remove stop words and vectorize\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        texts = df['Text'].apply(lambda x: ' '.join([word for word in x.split() if word not in STOP_WORDS]))\n        bag_of_words = vectorizer.fit_transform(texts)\n        \n        # Get word frequencies\n        word_freq = bag_of_words.toarray().sum(axis=0)\n        words = vectorizer.get_feature_names_out()\n        \n        # Filter out words with zero frequency\n        non_zero_freq_words = [(word, freq) for word, freq in zip(words, word_freq) if freq > 0]\n        \n        if not non_zero_freq_words:\n            print(\"All remaining words after stopword removal are of zero frequency.\")\n            return None\n        \n        # Sort by frequency and get top 10\n        top_words = sorted(non_zero_freq_words, key=lambda x: x[1], reverse=True)[:10]\n        \n        # Plotting\n        fig, ax = plt.subplots()\n        ax.bar([word for word, freq in top_words], [freq for word, freq in top_words])\n        ax.set_title('Top 10 Words')\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n        \n        if save_path:\n            plt.savefig(save_path)\n            print(f\"Plot saved to {save_path}\")\n            return None\n        else:\n            plt.show()\n            return ax\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    try:\n        # Load data\n        df = pd.read_csv(file_path)\n        # Ensure the 'Text' column exists\n        if 'Text' not in df.columns:\n            df = df.iloc[:, 0].to_frame(name='Text')  # No header or different header case\n        \n        # Text vectorization ignoring stop words\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        word_count_vector = vectorizer.fit_transform(df['Text'])\n        \n        # Getting the words and their counts\n        words = vectorizer.get_feature_names_out()\n        counts = word_count_vector.toarray().sum(axis=0)\n        \n        # Sorting the words by their counts\n        word_count_pairs = sorted(zip(words, counts), key=lambda x: x[1], reverse=True)\n        top_words = word_count_pairs[:10]\n        \n        # Plotting\n        fig, ax = plt.subplots()\n        ax.bar([word for word, count in top_words], [count for word, count in top_words])\n        ax.set_title('Top 10 Most Frequent Words')\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n        \n        if save_path:\n            plt.savefig(save_path)\n        else:\n            plt.show()\n            \n        return ax if not save_path else None\n    \n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {file_path} was not found.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None"}
{"task_id": "BigCodeBench/1054", "solution": "import csv\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    try:\n        # Load data from CSV\n        with open(file_path, 'r') as file:\n            data = list(map(float, csv.reader(file))[0])\n    except FileNotFoundError:\n        return \"Error: File not found.\"\n    except ValueError:\n        return \"Error: File contains non-numeric data.\"\n    \n    # Ensure there's enough data\n    if len(data) < 30:\n        return \"Error: Population size is less than 30.\"\n    \n    # Randomly select 30 individuals without replacement\n    sample = np.random.choice(data, 30, replace=False)\n    \n    # Calculate sample mean and standard deviation with ddof=1\n    sample_mean = np.mean(sample)\n    sample_std_dev = np.std(sample, ddof=1)\n    \n    # Generate histogram\n    fig, ax = plt.subplots()\n    ax.hist(sample, bins='auto', density=True, alpha=0.6, color='b')\n    \n    # Calculate parameters for the normal distribution curve\n    mu, std = sample_mean, sample_std_dev\n    x = np.linspace(mu - 3*std, mu + 3*std, 100)\n    pdf = stats.norm.pdf(x, mu, std)\n    \n    # Overlay the normal distribution curve\n    ax.plot(x, pdf, 'k', linewidth=2)\n    \n    # Return results and plot\n    plt.title('Sample Histogram with Normal Distribution')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.grid(True)\n    plt.show()\n    \n    return sample_mean, sample_std_dev, ax"}
{"task_id": "BigCodeBench/1055", "solution": "import pandas as pd\nimport itertools\nimport random\ndef task_func(colors, states):\n    # Generate all possible combinations of colors and states\n    combinations = list(itertools.product(colors, states))\n    \n    # Determine the number of columns, which is the smaller of the two lists\n    num_columns = min(len(colors), len(states))\n    \n    # If the number of combinations is less than the number of columns, adjust to avoid empty cells\n    num_combinations = min(len(combinations), num_columns)\n    \n    # Randomly shuffle the combinations\n    random.shuffle(combinations)\n    \n    # Create a DataFrame with evenly distributed combinations\n    # Each column will have a unique set of combinations\n    data = {f'Color:State {i+1}': combinations[i::num_columns] for i in range(num_combinations)}\n    \n    # Create the DataFrame\n    df = pd.DataFrame(data)\n    \n    # If there are more combinations than columns, the last column might be shorter\n    # If there are fewer, just pad with NaN to keep the structure consistent\n    if len(combinations) > num_columns:\n        for col in df.columns[num_combinations:]:\n            df[col] = [random.choice(combinations) for _ in range(len(df))]\n    else:\n        df = df.fillna('')  # Fill empty cells if there are fewer combinations\n    \n    return df"}
{"task_id": "BigCodeBench/1056", "solution": "import numpy as np\nimport random\nimport matplotlib.pyplot as plt\nLETTERS = list(\"abcdefghijklmnopqrstuvwxyz\")\nNUMBERS = list(range(1, 27))\ndef task_func(n_pairs=26):\n    if not 1 <= n_pairs <= 26:\n        raise ValueError(\"n_pairs must be an integer between 1 and 26, inclusive.\")\n    \n    # Shuffle the letters and numbers to form pairs\n    shuffled_letters = random.sample(LETTERS, n_pairs)\n    shuffled_numbers = random.sample(NUMBERS, n_pairs)\n    \n    # Pair letters with numbers and create a dictionary for counts\n    pairs = {f\"{l}:{n}\": random.randint(1, 9) for l, n in zip(shuffled_letters, shuffled_numbers)}\n    \n    # Sort pairs by the letter for consistent display\n    sorted_pairs = dict(sorted(pairs.items()))\n    \n    # Create counts for the bar chart\n    counts = list(sorted_pairs.values())\n    labels = list(sorted_pairs.keys())\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    bars = ax.bar(labels, counts)\n    \n    ax.set_title(\"Random Letter:Number Pairs Chart\")\n    ax.set_xlabel(\"Letter:Number Pairs\")\n    ax.set_ylabel(\"Counts\")\n    \n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2.0, yval, int(yval), va='bottom')  # Display count on top of each bar\n    \n    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n    plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels\n    \n    return bars"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\nDEFAULT_ANIMALS = ['Dog', 'Cat', 'Elephant', 'Tiger', 'Lion', 'Zebra', 'Giraffe', 'Bear', 'Monkey', 'Kangaroo']\nDEFAULT_FOODS = ['Meat', 'Fish', 'Grass', 'Fruits', 'Insects', 'Seeds', 'Leaves']\ndef task_func(animals=None, foods=None):\n    \"\"\"\n    Detailed function description as in the prompt.\n    \"\"\"\n    # Use default lists if parameters are not provided\n    if animals is None:\n        animals = DEFAULT_ANIMALS\n    if foods is None:\n        foods = DEFAULT_FOODS\n    \n    # Generate all combinations\n    combinations = list(itertools.product(animals, foods))\n    \n    # Shuffle the combinations for variety (though note that shuffling before creating DataFrame might not affect final DataFrame layout as each animal-food pair is unique)\n    np.random.shuffle(combinations)\n    \n    # Create DataFrame\n    df = pd.DataFrame(combinations, columns=['Animal', 'Food'])\n    df['animal:food'] = df['Animal'] + ':' + df['Food']\n    \n    # Transpose DataFrame to match the described format, with animals as rows and foods as columns\n    df = df.set_index('Animal')['animal:food'].unstack().reset_index(drop=True)\n    \n    return df"}
{"task_id": "BigCodeBench/1058", "solution": "import itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nSHAPES = [\n    \"Circle\",\n    \"Square\",\n    \"Triangle\",\n    \"Rectangle\",\n    \"Pentagon\",\n    \"Hexagon\",\n    \"Heptagon\",\n    \"Octagon\",\n    \"Nonagon\",\n    \"Decagon\",\n]\nCOLORS = [\n    \"Red\",\n    \"Blue\",\n    \"Green\",\n    \"Yellow\",\n    \"Black\",\n    \"White\",\n    \"Purple\",\n    \"Orange\",\n    \"Pink\",\n    \"Brown\",\n]\ndef task_func(num_pairs=10):\n    # Ensure num_pairs is within valid range\n    num_pairs = max(1, min(num_pairs, len(SHAPES) * len(COLORS)))\n\n    # Generate unique shape-color pairs\n    pairs = list(itertools.islice(itertools.product(SHAPES, COLORS), num_pairs))\n    \n    # Create a countplot for the pairs\n    sns.set(style=\"whitegrid\")\n    ax = sns.countplot(x=[f\"{shape}:{color}\" for shape, color in pairs], palette=\"Set3\")\n    \n    # Adjust the x-axis labels to show shape-color pairs\n    ax.set_xticklabels([f\"{shape}:{color}\" for shape, color in pairs])\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/1059", "solution": "import numpy as np\nimport random\nimport itertools\nimport pandas as pd\nPLANETS = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n]\nELEMENTS = [\n    \"Hydrogen\",\n    \"Helium\",\n    \"Oxygen\",\n    \"Carbon\",\n    \"Nitrogen\",\n    \"Magnesium\",\n    \"Silicon\",\n    \"Iron\",\n    \"Nickel\",\n]\ndef task_func():\n    \"\"\"\n    Generate a DataFrame where each row contains random planet-element pairs.\n    Each pair is formatted as 'Planet:Element'. The number of rows is determined by\n    the number of planets, and each row will contain as many planet-element pairs as there are elements.\n    \"\"\"\n    # Create a list of all possible planet-element pairs\n    all_pairs = [f\"{planet}:{element}\" for planet, element in itertools.product(PLANETS, ELEMENTS)]\n    \n    # Shuffle the list to randomize the pairs\n    random.shuffle(all_pairs)\n    \n    # Split the shuffled list into chunks to match the DataFrame structure\n    split_pairs = [all_pairs[i:i+len(ELEMENTS)] for i in range(0, len(all_pairs), len(ELEMENTS))]\n    \n    # Create a DataFrame from the split pairs\n    df = pd.DataFrame(split_pairs, columns=ELEMENTS)\n    \n    return df"}
{"task_id": "BigCodeBench/1060", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame, column_name: str) -> (str, plt.Axes):\n    if df.empty or column_name not in df.columns or df[column_name].isnull().all():\n        message = \"The DataFrame is empty or the specified column has no data.\"\n        ax = plt.figure(figsize=(8, 6)).add_subplot(111)\n        ax.set_title(f\"Distribution of values in {column_name} (No Data)\")\n        ax.set_xlabel(\"Values\")\n        ax.set_ylabel(\"Frequency\")\n        ax.bar(\"No Data\", 1, color='gray', alpha=0.7)\n        return message, ax\n    \n    unique_values = df[column_name].nunique()\n    if unique_values == df[column_name].shape[0]:\n        message = \"The distribution of values is uniform.\"\n    else:\n        message = \"The distribution of values is not uniform.\"\n    \n    ax = df[column_name].value_counts().sort_index().plot(kind='bar', figsize=(10, 6), \n                                                         color='skyblue', edgecolor='black', alpha=0.7)\n    ax.set_title(f\"Distribution of values in {column_name}\")\n    ax.set_xlabel(\"Values\")\n    ax.set_ylabel(\"Frequency\")\n    \n    return message, ax"}
{"task_id": "BigCodeBench/1061", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(arr: np.ndarray) -> (plt.Axes, np.ndarray):\n    # Calculate row sums\n    row_sums = arr.sum(axis=1)\n    \n    # Normalize row sums\n    mean = row_sums.mean()\n    std_dev = row_sums.std()\n    normalized_data = np.zeros_like(row_sums)\n    if std_dev > 0:\n        normalized_data = (row_sums - mean) / std_dev\n    \n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(normalized_data, bins=30, density=True, alpha=0.6, color='g')\n    \n    # Plot PDF of standard normal distribution\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    pdf = norm.pdf(x)\n    ax.plot(x, pdf, 'r-', lw=2)\n    \n    # Set plot title and labels\n    ax.set_title('Histogram of Normalized Data with Standard Normal PDF')\n    ax.set_xlabel('Normalized Sum')\n    ax.set_ylabel('Probability Density')\n    \n    return ax, normalized_data"}
{"task_id": "BigCodeBench/1062", "solution": "import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom datetime import datetime, timedelta\ndef task_func(arr):\n    \"\"\"\n    Function as described in the problem statement.\n    \"\"\"\n    if arr.size == 0:  # Handling empty array\n        fig, ax = plt.subplots()\n        ax.set_title('Time Series of Row Sums')\n        ax.set_xlabel('Date')\n        ax.set_ylabel('Row Sum')\n        ax.grid(True)\n        return ax\n    \n    # Calculate row sums\n    row_sums = arr.sum(axis=1)\n    \n    # Create date range starting from January 1, 2020\n    start_date = datetime(2020, 1, 1)\n    dates = [start_date + timedelta(days=i) for i in range(len(row_sums))]\n    \n    # Create DataFrame\n    df = pd.DataFrame(row_sums, index=dates, columns=['Row Sum'])\n    \n    # Plot DataFrame\n    ax = df.plot(kind='line', title='Time Series of Row Sums', figsize=(10, 5))\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Row Sum')\n    \n    return ax\narr = np.array([[i + j for i in range(3)] for j in range(5)])"}
{"task_id": "BigCodeBench/1063", "solution": "import numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(arr):\n    \"\"\"\n    Performs Principal Component Analysis (PCA) on the sum of rows of a 2D numpy array and plots the explained variance ratio.\n    \n    Parameters:\n    arr (numpy.ndarray): A 2D numpy array.\n    \n    Returns:\n    matplotlib.axes.Axes: The matplotlib Axes object with the plot.\n    \"\"\"\n    # Sum of rows of the array\n    row_sums = arr.sum(axis=1)\n    \n    # Reshape for PCA (PCA requires 2D array)\n    row_sums_2d = row_sums.reshape(-1, 1)\n    \n    # Perform PCA\n    pca = PCA()\n    pca.fit(row_sums_2d)\n    \n    # Plot explained variance ratio\n    fig, ax = plt.subplots()\n    ax.bar(['PC1'], pca.explained_variance_ratio_)\n    ax.set_title('Explained Variance Ratio of Principal Components')\n    ax.set_ylabel('Explained Variance Ratio')\n    ax.set_xlabel('Principal Components')\n    \n    return ax"}
{"task_id": "BigCodeBench/1064", "solution": "import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n    \"\"\"\n    Plots a heatmap of a given 2D numerical array and prints the sum of each row.\n    The heatmap's color range is set based on the minimum and maximum values in the array.\n\n    Parameters:\n    arr (numpy.array): A 2D numpy array of numerical values.\n\n    Returns:\n    ax (matplotlib.axes.Axes): The Axes object with the plotted heatmap.\n    \"\"\"\n    # Calculate and print the sum of each row\n    row_sums = np.sum(arr, axis=1)\n    print(\"Sum of each row:\", row_sums)\n    \n    # Set up the matplotlib figure\n    fig, ax = plt.subplots()\n    \n    # Plot the heatmap\n    cmap = sns.diverging_palette(230, 20, as_cmap=True)\n    heatmap = sns.heatmap(arr, cmap=cmap, ax=ax, vmin=arr.min(), vmax=arr.max(), annot=True, fmt=\".1f\")\n    \n    # Set the title\n    ax.set_title('Heatmap of the 2D Array')\n    \n    # Show the plot\n    plt.show()\n    \n    # Return the Axes object\n    return ax"}
{"task_id": "BigCodeBench/1065", "solution": "import numpy as np\nfrom scipy import fftpack\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n    \"\"\"\n    Performs a Fast Fourier Transform (FFT) on the sum of each row in a 2D array and\n    plots the absolute values of the FFT coefficients.\n\n    Parameters:\n    arr (numpy.ndarray): A 2D numpy array.\n\n    Returns:\n    matplotlib.axes.Axes: An Axes object displaying the plot of the absolute values of the FFT coefficients.\n    \"\"\"\n    # Sum each row of the array\n    row_sums = arr.sum(axis=1)\n    \n    # Perform FFT on each row sum\n    fft_results = fftpack.fft(row_sums)\n    \n    # Get the absolute values of the FFT coefficients\n    abs_fft = np.abs(fft_results)\n    \n    # Create a plot of the absolute values of the FFT coefficients\n    fig, ax = plt.subplots()\n    ax.plot(abs_fft, label='Absolute FFT Coefficients')\n    \n    # Set title and label\n    ax.set_title('Absolute values of FFT coefficients')\n    ax.set_xlabel('Frequency Index')\n    ax.set_ylabel('Magnitude')\n    ax.legend()\n    \n    # Show the plot\n    plt.show()\n    \n    return ax"}
{"task_id": "BigCodeBench/1066", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    # Seed for reproducibility\n    np.random.seed(0)\n    \n    # Generate normal data\n    if num_samples > 0:\n        normal_data = np.random.normal(loc=0, scale=1, size=num_samples)\n    else:\n        normal_data = np.array([])\n    \n    # Generate artificial outliers\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    \n    # Combine datasets\n    data = np.concatenate((normal_data, outliers))\n    \n    # Detect outliers using IQR method, but only on normal data\n    q75, q25 = np.percentile(normal_data, [75 ,25])\n    iqr = q75 - q25\n    lower_bound = q25 - 1.5 * iqr\n    upper_bound = q75 + 1.5 * iqr\n    outliers_detected = normal_data[(normal_data < lower_bound) | (normal_data > upper_bound)]\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.hist(data, bins='auto', color='blue', alpha=0.7, rwidth=0.85)\n    ax.set_title(\"Histogram of Data with Detected Outliers (IQR Method)\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    \n    return data, outliers_detected, ax"}
{"task_id": "BigCodeBench/1067", "solution": "import requests\nimport logging\nfrom requests.exceptions import HTTPError, RequestException\ndef task_func(repo_url: str) -> dict:\n    \"\"\"\n    Fetches and returns information about a GitHub repository using its API URL.\n    \"\"\"\n    try:\n        # Define the headers to use for the API request, including Accept header for GitHub API\n        headers = {'Accept': 'application/vnd.github.v3+json'}\n        \n        # Make the GET request\n        response = requests.get(repo_url, headers=headers)\n        \n        # Raise an HTTPError if one occurred\n        response.raise_for_status()\n        \n    except HTTPError as http_err:\n        # Specifically handle rate limit exceeded\n        if response.status_code == 403:\n            logging.error(f\"Rate limit exceeded. Please try again later. {http_err}\")\n        else:\n            logging.error(f\"HTTP error occurred: {http_err}\")\n            raise\n    except RequestException as req_err:\n        logging.error(f\"Request exception: {req_err}\")\n        raise\n    else:\n        # Get the number of open issues\n        repo_info = response.json()\n        open_issues = repo_info.get('open_issues', 0)\n        \n        # Print a warning if open issues exceed a threshold\n        if open_issues > 100:\n            logging.warning(f\"Warning: The repository has a large number of open issues ({open_issues}).\")\n        \n        return repo_info"}
{"task_id": "BigCodeBench/1068", "solution": "import warnings\nimport sqlite3\nimport pandas as pd\ndef task_func(db_path, query, warn_large_dataset=True):\n    try:\n        # Connect to SQLite database\n        conn = sqlite3.connect(db_path)\n        \n        # Suppress pandas warnings if not wanted for large datasets\n        if not warn_large_dataset:\n            pd.options.mode.chained_assignment = None  # default='warn'\n        \n        # Execute SQL query and fetch data into a DataFrame\n        data = pd.read_sql_query(query, conn)\n        \n        # Issue warning if dataset is large\n        if warn_large_dataset and len(data) > 10000:\n            warnings.warn(\"The data contains more than 10000 rows.\")\n        \n        # Close the connection\n        conn.close()\n        \n        return data\n    \n    except Exception as e:\n        # Raise an exception with a custom error message\n        error_message = f\"Error fetching data from the database: {str(e)}\"\n        raise Exception(error_message)"}
{"task_id": "BigCodeBench/1069", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(data_dict)\n    \n    # Initialize an empty list to hold the Axes objects\n    axes_list = []\n    \n    for col in df.columns:\n        # Create a histogram for the column\n        ax = df[col].value_counts().plot(kind='bar', title=col)\n        \n        # Check if the distribution is uniform\n        # For simplicity, we consider uniform if all values occur the same number of times\n        is_uniform = df[col].nunique() == 1 or (df[col].value_counts() / len(df)).max() == 1 / df[col].nunique()\n        \n        # Print a message if the distribution is not uniform\n        if not is_uniform:\n            print(f\"The distribution of values in column '{col}' is not uniform.\")\n        \n        axes_list.append(ax)\n    \n    # Show the plots\n    plt.tight_layout()\n    plt.show()\n    \n    return axes_list"}
{"task_id": "BigCodeBench/1070", "solution": "import pandas as pd\nfrom random import shuffle\nPOSSIBLE_VALUES = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\ndef task_func(list_of_lists):\n    \"\"\"\n    The function is defined as per the problem statement.\n    \"\"\"\n    dataframes = []\n    for sublist in list_of_lists:\n        # Shuffle the possible values\n        shuffled_values = POSSIBLE_VALUES.copy()\n        shuffle(shuffled_values)\n        \n        # Create a dictionary where keys are sublist elements and values are shuffled values\n        data_dict = {col: shuffled_values for col in sublist}\n        \n        # Create a DataFrame from the dictionary\n        df = pd.DataFrame(data_dict)\n        dataframes.append(df)\n    \n    return dataframes"}
{"task_id": "BigCodeBench/1071", "solution": "import matplotlib.pyplot as plt\nfrom itertools import cycle\nimport numpy as np\nfrom random import shuffle\nCOLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\ndef task_func(list_of_lists):\n    fig, ax = plt.subplots()\n    color_cycle = cycle(COLORS)  # Create a cycle iterator for colors\n\n    for lst in list_of_lists:\n        if lst:  # Skip if the inner list is empty\n            shuffle(lst)  # Shuffle the y-values\n            x = np.arange(1, len(lst) + 1)  # Generate x-values\n            color = next(color_cycle)  # Get the next color from the cycle\n            ax.plot(x, lst, color=color)  # Plot the line with shuffled y and sequential x\n\n    plt.xlabel('X-axis')\n    plt.ylabel('Y-axis')\n    plt.title('Sequential X vs Shuffled Y')\n    plt.grid(True)\n    \n    return fig, ax"}
{"task_id": "BigCodeBench/1072", "solution": "import pandas as pd\nimport numpy as np\ndef task_func(list_of_lists):\n    series_list = []\n    for sublist in list_of_lists:\n        indices = sublist\n        values = np.arange(1, len(sublist) + 1)\n        np.random.shuffle(values)\n        series_list.append(pd.Series(values, index=indices))\n    return series_list"}
{"task_id": "BigCodeBench/1073", "solution": "import time\nimport matplotlib.pyplot as plt\ndef task_func(time_strings, time_format=\"%d/%m/%Y %H:%M:%S.%f\"):\n    try:\n        # Convert time strings to datetime objects\n        timestamps = [time.strptime(ts, time_format) for ts in time_strings]\n        \n        # Extract seconds from the timestamps\n        seconds = [ts.tm_sec + ts.tm_min * 60 + ts.tm_hour * 3600 for ts in timestamps]\n        \n        # Count occurrences of each second (assuming for demonstration, real use might need binning)\n        seconds_count = {sec: seconds.count(sec) for sec in set(seconds)}\n        \n        # Plotting\n        fig, ax = plt.subplots()\n        ax.bar(seconds_count.keys(), seconds_count.values())\n        ax.set_xlabel('Seconds')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Histogram of Seconds Component in Time Strings')\n        \n        return ax\n    \n    except ValueError as e:\n        print(f\"Error parsing time: {e}\")\n        return None\ntime_strings = ['30/03/2009 16:31:32.123', '15/04/2010 14:25:46.789', '20/12/2011 12:34:56.000',\n                '30/03/2009 16:31:32.123']"}
{"task_id": "BigCodeBench/1074", "solution": "import pytz\nfrom dateutil.parser import parse\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_string, from_tz, to_tz):\n    \"\"\"\n    Converts a time string from one timezone to another, considering various cases such as daylight saving time.\n    \"\"\"\n    # Parse the time string into a datetime object\n    dt = parse(time_string)\n    \n    # Localize the datetime object to the 'from_tz' timezone\n    from_tz_obj = pytz.timezone(from_tz)\n    localized_dt = from_tz_obj.localize(dt)\n    \n    # Convert the localized datetime to the 'to_tz' timezone\n    to_tz_obj = pytz.timezone(to_tz)\n    converted_dt = localized_dt.astimezone(to_tz_obj)\n    \n    # Format the converted datetime back into a string\n    converted_time_string = converted_dt.strftime(TIME_FORMAT)\n    \n    return converted_time_string"}
{"task_id": "BigCodeBench/1075", "solution": "import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings):\n    \"\"\"\n    Compute differences and plot as a bar chart.\n    \"\"\"\n    # Convert datetime strings to datetime objects\n    datetime_objects = [datetime.datetime.strptime(ts, TIME_FORMAT) for ts in time_strings]\n    \n    # Compute differences in seconds\n    differences = np.diff([dt.timestamp() for dt in datetime_objects])  # Differences in seconds\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.bar(range(1, len(differences) + 1), differences)\n    ax.set_xlabel('Sequential Order')\n    ax.set_ylabel('Time Difference (seconds)')\n    ax.set_title('Sequential Time Differences')\n    \n    return ax"}
{"task_id": "BigCodeBench/1076", "solution": "from datetime import datetime\nimport pandas as pd\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings, target_tz):\n    \"\"\"\n    Function implementation as described in the problem statement.\n    \"\"\"\n    utc_times = [datetime.strptime(ts, TIME_FORMAT).replace(tzinfo=ZoneInfo('UTC')) for ts in time_strings]\n    converted_times = [t.astimezone(ZoneInfo(target_tz)) for t in utc_times]\n    \n    df = pd.DataFrame({\n        'Original Time': [t.strftime(TIME_FORMAT) for t in utc_times],\n        'Converted Time': [t.strftime(TIME_FORMAT) for t in converted_times]\n    })\n    \n    return df\ntime_strings = ['30/03/09 16:31:32.123', '15/04/10 14:25:46.789', '20/12/11 12:34:56.000']"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n    \"\"\"\n    ... (The function description remains the same as in the question) ...\n    \"\"\"\n    if len(time_strings) < 2:\n        return 0.0\n\n    # Convert timestamps to datetime objects in UTC first\n    utc_times = [datetime.strptime(ts, '%d/%m/%y %H:%M:%S.%f').replace(tzinfo=pytz.utc) for ts in time_strings]\n\n    # Convert to the specified timezone\n    tz_times = [t.astimezone(pytz.timezone(timezone)) for t in utc_times]\n\n    # Calculate time differences in seconds\n    time_diffs = [abs((tz_times[i+1] - tz_times[i]).total_seconds()) for i in range(len(tz_times)-1)]\n\n    # Return the mean of the time differences\n    return np.mean(time_diffs) if time_diffs else 0.0\ntime_strings = ['30/03/09 16:31:32.123', '30/03/09 16:32:33.123', '30/03/09 16:33:34.123']\ntimezone = 'America/New_York'"}
{"task_id": "BigCodeBench/1078", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n    unique_elements, counts = np.unique(arr, return_counts=True)\n    uniform_distribution = np.all(counts == counts[0])\n\n    fig, ax = plt.subplots()\n    ax.bar(unique_elements, counts, align='center')\n    ax.set_xticks(unique_elements)\n    ax.set_xlabel('Unique Values')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Value Distribution')\n\n    return uniform_distribution, ax"}
{"task_id": "BigCodeBench/1079", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Clean and convert the 'Price_String' to float, removing commas\n    df['Price_Float'] = df['Price_String'].str.replace(',', '').astype(float)\n    \n    # Calculate statistical measures\n    stats = {\n        'mean': df['Price_Float'].mean(),\n        'median': df['Price_Float'].median(),\n        'std_dev': df['Price_Float'].std()\n    }\n    \n    # Generate a histogram\n    fig, ax = plt.subplots()\n    ax.hist(df['Price_Float'], bins='auto', color='blue', alpha=0.7, rwidth=0.85)\n    ax.set_title('Histogram of Product Prices')\n    ax.set_xlabel('Price')\n    ax.set_ylabel('Frequency')\n    \n    # Show the plot (optional, if running interactively)\n    # plt.show()\n    \n    return stats, ax"}
{"task_id": "BigCodeBench/1080", "solution": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nDATA = {\n    \"Area_String\": [\"1,000\", \"2,000\", \"3,000\", \"4,000\", \"5,000\"],\n    \"Price\": [100, 200, 300, 400, 500],\n}\ndef convert_area(area_string):\n    \"\"\"Converts a string area with commas to an integer.\"\"\"\n    return int(area_string.replace(\",\", \"\"))\ndef task_func(area_string, data=DATA):\n    \"\"\"\n    Predicts the price based on a given area after training a linear regression model.\n    \"\"\"\n    # Convert string areas to integers and create DataFrame\n    data['Area'] = data['Area_String'].apply(convert_area)\n    X = data['Area'].values.reshape(-1,1)\n    y = data['Price'].values.reshape(-1,1)\n    \n    # Train the model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Predict the price for the given area\n    area_input = convert_area(area_string)\n    prediction = model.predict([[area_input]])\n    \n    return float(prediction)"}
{"task_id": "BigCodeBench/1081", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(data=None):\n    default_data = {\n        'Weight_String': ['60.5', '65.7', '70.2', '75.9', '80.1'],\n        'Height': [160, 165, 170, 175, 180]\n    }\n    \n    # Use default data if no data is provided\n    if data is None:\n        data = default_data\n    \n    # Validate that 'Weight_String' values are strings\n    if not all(isinstance(weight, str) for weight in data['Weight_String']):\n        raise ValueError(\"All values in 'Weight_String' must be strings.\")\n    \n    # Convert string weights to float\n    data['Weight'] = pd.Series(data['Weight_String']).astype(float)\n    \n    # Create a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Plotting\n    ax = sns.scatterplot(x='Weight', y='Height', data=df)\n    ax.set_title('Weight vs Height')\n    \n    return ax"}
{"task_id": "BigCodeBench/1082", "solution": "import pandas as pd\nfrom scipy.stats import pearsonr\ndef task_func(data):\n    \"\"\"\n    Detailed function description as provided.\n    \"\"\"\n    # Convert the input dictionary into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Task 1: Convert scores from string to float\n    df['Score_Float'] = df['Score_String'].str.replace(',', '').astype(float)\n    \n    # Task 2: Encode categorical grades into numerical values\n    # Assuming the grade order is A > A- > B+ > B > ... > F\n    grade_order = {'A': 5, 'A-': 4.5, 'B+': 4, 'B': 3.5, 'B-': 3, 'C+': 2.5, 'C': 2, 'C-': 1.5, 'D+': 1, 'D': 0.5, 'F': 0}\n    df['Grade_Numerical'] = df['Grade'].map(grade_order)\n    \n    # Task 3: Calculate Pearson correlation coefficient\n    correlation, _ = pearsonr(df['Score_Float'], df['Grade_Numerical'])\n    \n    # Return the correlation coefficient\n    return correlation"}
{"task_id": "BigCodeBench/1083", "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    required_keys = {'Salary_String', 'Experience'}\n    if not required_keys.issubset(data.keys()):\n        raise ValueError(\"Input data must contain the keys: \" + \", \".join(required_keys))\n\n    # DataFrame Conversion\n    df = pd.DataFrame(data)\n\n    # Empty Data Handling\n    if df.empty:\n        fig, ax = plt.subplots()\n        ax.set_xlabel('Experience')\n        ax.set_ylabel('Normalized Salary')\n        ax.set_title('Normalized Salary vs Experience')\n        return ax\n\n    try:\n        # Salary Conversion\n        df['Salary'] = df['Salary_String'].str.replace(',', '').astype(float)\n    except ValueError as e:\n        raise ValueError(\"Salary values could not be converted to float.\") from e\n\n    # Salary Normalization\n    scaler = MinMaxScaler()\n    df['Normalized_Salary'] = scaler.fit_transform(df[['Salary']])\n\n    # Data Plotting\n    fig, ax = plt.subplots()\n    ax.scatter(df['Experience'], df['Normalized_Salary'])\n    ax.set_xlabel('Experience')\n    ax.set_ylabel('Normalized Salary')\n    ax.set_title('Normalized Salary vs Experience')\n\n    return ax"}
{"task_id": "BigCodeBench/1084", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import f_oneway\ndef task_func(data_file_path: str):\n    # Read the CSV file and convert string numbers with commas to float\n    data = pd.read_csv(data_file_path)\n    data = data.applymap(lambda x: float(x.replace(',', '')) if isinstance(x, str) and ',' in x else x)\n    \n    # Filter out only numerical columns\n    numerical_cols = data.select_dtypes(include=np.number).columns.tolist()\n    \n    # Calculate means and standard deviations\n    means = data[numerical_cols].mean()\n    std_devs = data[numerical_cols].std()\n    \n    # Create histogram plots\n    fig, axes = plt.subplots(nrows=len(numerical_cols), ncols=1, figsize=(10, 3*len(numerical_cols)))\n    axes = axes.flatten() if len(numerical_cols) > 1 else [axes]\n    for i, col in enumerate(numerical_cols):\n        data[col].hist(ax=axes[i])\n        axes[i].set_title(f'Histogram for {col}')\n    \n    # Perform ANOVA test if there are two or more numerical columns\n    anova_results = []\n    if len(numerical_cols) > 1:\n        for i in range(len(numerical_cols)):\n            for j in range(i+1, len(numerical_cols)):\n                f, p = f_oneway(data[numerical_cols[i]], data[numerical_cols[j]])\n                anova_results.append((numerical_cols[i], numerical_cols[j], f, p))\n        anova_results = pd.DataFrame(anova_results, columns=['Column 1', 'Column 2', 'F-value', 'P-value'])\n    else:\n        anova_results = None\n    \n    plt.tight_layout()\n    plt.show()  # Show all histograms\n    \n    return means, std_devs, axes, anova_results"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove punctuation and convert text to lowercase\n    cleaned_text = re.sub(r'[^\\w\\s]', '', text).lower()\n    \n    # Split the text into words\n    words = cleaned_text.split()\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Get the 10 most common words\n    common_words = word_counts.most_common(10)\n    \n    # Plot the top 10 most common words\n    fig, ax = plt.subplots()\n    ax.bar(*zip(*common_words))\n    ax.set_title('Top 10 Most Common Words')\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    plt.xticks(rotation=45)\n    plt.tight_layout()  # Adjust the plot to ensure everything fits without overlap\n    \n    return common_words, ax"}
{"task_id": "BigCodeBench/1086", "solution": "import string\nimport random\nimport pandas as pd\nimport numpy as np\nNUM_SAMPLES = 1000\ndef task_func():\n    \"\"\"\n    Generates a DataFrame with two columns: a string field and a float field.\n    The string field contains randomly generated strings of 10 ASCII letters.\n    The float field contains randomly generated numbers between 0 and 10000,\n    formatted with two decimal places and a comma as the thousands separator.\n    \"\"\"\n    # Generate random strings\n    string_field = [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)]\n    \n    # Generate random floats and format them\n    float_field = [f'{np.random.uniform(0, 10000):,,.2f}' for _ in range(NUM_SAMPLES)]\n    \n    # Create DataFrame\n    dataset = pd.DataFrame({\n        'String Field': string_field,\n        'Float Field': float_field\n    })\n    \n    return dataset"}
{"task_id": "BigCodeBench/1087", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mean=123456.908, std_dev=1.2, save_plots=False):\n    # Generate a random sample\n    np.random.seed(0)  # For reproducibility\n    sample = np.random.normal(mean, std_dev, 1000)\n\n    # Calculate skewness and kurtosis\n    skewness = stats.skew(sample)\n    kurtosis = stats.kurtosis(sample)\n\n    # Create plots\n    plt.figure(figsize=(12, 6))\n\n    # Histogram\n    plt.subplot(1, 2, 1)\n    plt.hist(sample, bins='auto', edgecolor='black')\n    plt.title('Histogram')\n    if save_plots:\n        plt.savefig('histogram_plot.png')\n    \n    # QQ Plot\n    plt.subplot(1, 2, 2)\n    stats.probplot(sample, dist=\"norm\", plot=plt)\n    plt.title('QQ Plot')\n    if save_plots:\n        plt.savefig('qq_plot.png')\n\n    plt.tight_layout()\n\n    # Save plots if required\n    plot_paths = []\n    if save_plots:\n        plot_paths.append('histogram_plot.png')\n        plot_paths.append('qq_plot.png')\n\n    plt.close()  # Close the plot to prevent display in non-interactive environments\n\n    return skewness, kurtosis, plot_paths"}
{"task_id": "BigCodeBench/1088", "solution": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data=None):\n    \"\"\"\n    Pre-process a dataset by converting it to a Pandas DataFrame,\n    replacing values less than 0.5 with zeros, and\n    standardizing the data using StandardScaler.\n    \"\"\"\n    if data is None:\n        data = np.random.rand(100, 5)  # Generate a random dataset if not provided\n\n    # Convert to DataFrame\n    df = pd.DataFrame(data)\n\n    # Replace values less than 0.5 with zeros\n    df[df < 0.5] = 0\n\n    # Standardize the data\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(df)\n    \n    # Convert back to DataFrame\n    standardized_df = pd.DataFrame(standardized_data, columns=df.columns)\n\n    return standardized_df"}
{"task_id": "BigCodeBench/1089", "solution": "import numpy as np\nfrom collections import Counter\ndef task_func(list_of_tuples):\n    \"\"\"\n    Computes the sum of numeric values and counts the occurrences of categories in a list of tuples.\n    \n    Each tuple in the input list contains a numeric value and a category. This function calculates\n    the sum of all the numeric values and also counts how many times each category appears in the list.\n    \n    Parameters:\n    - list_of_tuples (list of tuple): A list where each tuple contains a numeric value and a category.\n    \n    Returns:\n    - tuple: A 2-element tuple where the first element is the sum of the numeric values, and the\n             second element is a dictionary with categories as keys and their counts as values.\n    \"\"\"\n    # Sum of numeric values\n    sum_of_values = np.sum([t[0] for t in list_of_tuples])\n    \n    # Counting occurrences of categories\n    category_counts = Counter(t[1] for t in list_of_tuples)\n    \n    return sum_of_values, category_counts"}
{"task_id": "BigCodeBench/1090", "solution": "import json\nfrom collections import Counter\nimport ast\ndef task_func(file_pointer):\n    \"\"\"\n    Reads from a given file pointer to a JSON file, evaluates strings that represent dictionaries to actual dictionaries,\n    and counts the frequency of each key across all dictionary entries in the JSON data.\n    \n    Parameters:\n    file_pointer (file object): An open file object pointing to the JSON file containing the data. This file should\n                                already be opened in the correct mode (e.g., 'r' for reading).\n\n    Returns:\n    collections.Counter: A Counter object representing the frequency of each key found in the dictionaries.\n    \"\"\"\n    # Load JSON data or evaluate strings as dictionaries\n    data = json.load(file_pointer)\n    if isinstance(data, str):\n        try:\n            data = ast.literal_eval(data)\n        except ValueError:\n            raise ValueError(\"Invalid JSON or string representation of a dictionary\")\n\n    # Ensure data is a list of dictionaries for processing\n    if not isinstance(data, list) or not all(isinstance(i, dict) for i in data):\n        raise ValueError(\"Data should be a list of dictionaries\")\n\n    # Count the frequency of each key\n    key_counter = Counter()\n    for entry in data:\n        key_counter.update(entry.keys())\n\n    return key_counter"}
{"task_id": "BigCodeBench/1091", "solution": "import ast\nimport os\nimport glob\ndef task_func(directory):\n    \"\"\"\n    Convert all Unicode string representations of dictionaries in all text files \n    in the specified directory to Python dictionaries.\n    \"\"\"\n    extracted_dicts = []\n\n    # Find all .txt files in the directory\n    file_paths = glob.glob(os.path.join(directory, '*.txt'))\n\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            for line in file:\n                try:\n                    # Attempt to parse the line as a Python dictionary\n                    dictionary = ast.literal_eval(line.strip())\n                    if isinstance(dictionary, dict):  # Ensure it's a dictionary\n                        extracted_dicts.append(dictionary)\n                except (ValueError, SyntaxError):\n                    # If the line is not a valid dictionary representation, log an error or skip\n                    print(f\"Error: Invalid dictionary representation in {file_path}: {line.strip()}\")\n\n    return extracted_dicts"}
{"task_id": "BigCodeBench/1092", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport ast\ndef task_func(url):\n    \"\"\"\n    Fetches the content of a webpage specified by its URL, parses it to find <script> tags,\n    and attempts to evaluate any string within these tags as a Python dictionary.\n    \n    Parameters:\n    - url (str): The URL of the webpage to scrape.\n    \n    Returns:\n    - list of dict: A list containing dictionaries that were successfully evaluated from string representations\n      found within <script> tags on the webpage. \n    \n    Note:\n    - If an error occurs during the request or if no dictionaries are found/evaluable, an empty list is returned.\n    \"\"\"\n    try:\n        # Fetch the webpage content\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx, 5xx)\n        \n        # Parse the HTML content\n        soup = BeautifulSoup(response.text, 'html.parser')\n        \n        # Find all script tags\n        script_tags = soup.find_all('script')\n        \n        # Evaluate scripts as Python objects (assuming they are serialized as strings)\n        dictionaries = []\n        for script in script_tags:\n            # Attempt to find dictionary-like strings\n            script_text = script.string if script.string else ''\n            try:\n                # Attempt to evaluate the string as Python object\n                evaluated_content = ast.literal_eval(script_text)\n                # Check if the evaluated content is a dictionary\n                if isinstance(evaluated_content, dict):\n                    dictionaries.append(evaluated_content)\n            except (ValueError, SyntaxError):\n                # If it's not a valid Python literal, skip\n                continue\n        \n        return dictionaries\n    except requests.RequestException as e:\n        print(f\"Error fetching URL: {e}\")\n        return []\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return []"}
{"task_id": "BigCodeBench/1093", "solution": "import ast\nimport re\ndef task_func(text_file: str) -> list:\n    \"\"\"\n    Extract all string representations of dictionaries from a text file using regular expressions and \n    convert them to Python dictionaries.\n    \n    Parameters:\n    - text_file (str): The path to the text file.\n    \n    Returns:\n    - list: A list of dictionaries. Each dictionary is parsed from the text file using regular expressions.\n    \"\"\"\n    # Regular expression pattern to match string representations of dictionaries\n    dict_pattern = re.compile(r\"{.*?}\")\n    \n    # Read the text file\n    with open(text_file, 'r') as file:\n        content = file.read()\n    \n    # Find all matches of the dictionary pattern\n    dict_strings = dict_pattern.findall(content)\n    \n    # Convert the string representations to actual dictionaries\n    parsed_dicts = []\n    for dict_str in dict_strings:\n        # Clean the string to remove any leading/trailing ' or \" and then parse\n        cleaned_dict_str = dict_str.strip(\"'\\\"\")\n        try:\n            parsed_dict = ast.literal_eval(cleaned_dict_str)\n            if isinstance(parsed_dict, dict):  # Ensure it's a dictionary\n                parsed_dicts.append(parsed_dict)\n        except (ValueError, SyntaxError):\n            # If ast.literal_eval fails to parse, ignore the string\n            continue\n    \n    return parsed_dicts"}
{"task_id": "BigCodeBench/1094", "solution": "import nltk\nfrom nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\ndef task_func(text):\n    \"\"\"\n    Identifies and counts words in a given text that start with the \"$\" symbol. It returns the five most frequent\n    dollar-prefixed words along with their counts. Words solely consisting of \"$\" symbols without any following\n    alphanumeric characters are ignored in the frequency count.\n    \"\"\"\n    # Define a tokenizer that will capture words starting with \"$\" followed by alphanumeric characters\n    tokenizer = RegexpTokenizer(r'\\$[a-zA-Z0-9]+')\n    \n    # Tokenize the text\n    tokens = tokenizer.tokenize(text)\n    \n    # Count the frequency of each token (word starting with \"$\")\n    word_counts = Counter(tokens)\n    \n    # Remove the \"$\" symbol from the words in the counts\n    word_counts = {word[1:]: count for word, count in word_counts.items()}\n    \n    # Find the five most common words, excluding those with count of 0 after removing \"$\"\n    most_common_words = word_counts.most_common(5)\n    \n    return most_common_words\ntext = \"$abc def $efg $hij klm $ $abc $abc $hij $hij\""}
{"task_id": "BigCodeBench/1095", "solution": "from nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport os\ndef task_func(text, output_filename):\n    \"\"\"\n    Extracts words from the input text that begin with the '$' character and saves them to a specified file,\n    excluding any words that are solely composed of punctuation characters.\n    \"\"\"\n    # Ensure the NLTK tokenizer is properly set up (comment out if nltk is already installed and set up)\n    # import nltk\n    # nltk.download('punkt')\n    \n    # Create a tokenizer that will tokenize the text into words\n    tokenizer = RegexpTokenizer(r'\\b\\$\\w+\\b')\n    \n    # Tokenize the text\n    words = tokenizer.tokenize(text)\n    \n    # Filter out words that are only punctuation\n    filtered_words = [word for word in words if not all(char in punctuation for char in word)]\n    \n    # Save the filtered words to the specified file\n    with open(output_filename, 'w') as file:\n        for word in filtered_words:\n            file.write(f\"{word}\\n\")\n    \n    # Return the absolute path to the output file\n    return os.path.abspath(output_filename)"}
{"task_id": "BigCodeBench/1096", "solution": "from nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport csv\nimport os\nPUNCTUATION = set(punctuation)\ndef task_func(text, filename):\n    \"\"\"\n    Save all words in a text beginning with the \"$\" character in a CSV file, excluding any words that are solely composed of punctuation characters.\n\n    Parameters:\n    text (str): The input text.\n    filename (str): The name of the CSV file to save the '$' words.\n\n    Returns:\n    str: The absolute path of the saved CSV file.\n    \"\"\"\n    # Initialize tokenizer\n    tokenizer = RegexpTokenizer(r'\\w+')\n\n    # Tokenize the text\n    words = tokenizer.tokenize(text)\n\n    # Filter words starting with '$' and not solely composed of punctuation\n    dollar_words = [word for word in words if word.startswith('$') and not all(char in PUNCTUATION for char in word)]\n\n    # Save to CSV\n    abs_path = os.path.abspath(filename)\n    with open(abs_path, 'w', newline='', encoding='utf-8') as csvfile:\n        csvwriter = csv.writer(csvfile)\n        csvwriter.writerow(['Word'])  # Write header\n        csvwriter.writerows([[word] for word in dollar_words])  # Write words\n\n    return abs_path"}
{"task_id": "BigCodeBench/1097", "solution": "import re\nfrom string import punctuation\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n    \"\"\"\n    Clean the specified text by removing URLs, stopwords, and punctuation.\n\n    Parameters:\n    text (str): The text to be cleaned.\n\n    Returns:\n    str: The cleaned text with URLs, predefined stopwords, and punctuation removed.\n    \"\"\"\n    # Remove URLs\n    text = re.sub(r'http\\S+|www\\S+', '', text, flags=re.MULTILINE)\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', punctuation))\n    \n    # Remove stopwords\n    words = text.split()\n    cleaned_words = [word for word in words if word.lower() not in PREDEFINED_STOPWORDS]\n    \n    return ' '.join(cleaned_words)"}
{"task_id": "BigCodeBench/1098", "solution": "import re\nfrom collections import Counter\ndef task_func(text, top_n):\n    \"\"\"\n    Count the N most common words in a text after removing URLs.\n\n    Parameters:\n    text (str): The text to analyze.\n    top_n (int): The number of top words to return.\n\n    Returns:\n    list: A list of tuples where each tuple contains a word and its frequency.\n    \"\"\"\n    # Remove URLs from the text\n    url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    text_without_urls = url_pattern.sub('', text)\n    \n    # Tokenize the text (split into words)\n    words = re.findall(r'\\b\\w+\\b', text_without_urls.lower())\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Return the top N most common words\n    return word_counts.most_common(top_n)"}
{"task_id": "BigCodeBench/1099", "solution": "import re\nfrom collections import Counter\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef remove_urls(text):\n    \"\"\"Remove URLs from the text.\"\"\"\n    url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    return url_pattern.sub('', text)\ndef task_func(text):\n    \"\"\"\n    Count the stopwords found in the text after you have removed URLs.\n    \"\"\"\n    # Remove URLs first\n    text = remove_urls(text)\n    \n    # Tokenize the text by words\n    words = re.findall(r'\\b\\w+\\b', text.lower())  # Convert to lower case to match stopwords\n    \n    # Count the stopwords\n    stopwords_count = Counter(word for word in words if word in PREDEFINED_STOPWORDS)\n    \n    return list(stopwords_count.items())"}
{"task_id": "BigCodeBench/1100", "solution": "import re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ndef remove_urls(text):\n    \"\"\"Remove URLs from the text.\"\"\"\n    url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    return url_pattern.sub(r'', text)\ndef task_func(texts):\n    \"\"\"\n    Processes a collection of text documents to compute the TF-IDF scores.\n    \"\"\"\n    # Remove URLs from texts\n    cleaned_texts = [remove_urls(text) for text in texts]\n    \n    # Initialize TfidfVectorizer to compute TF-IDF scores\n    vectorizer = TfidfVectorizer(stop_words='english', max_df=0.5, norm='l2', smooth_idf=True, use_idf=True)\n    \n    # Fit and transform the cleaned texts\n    tfidf_matrix = vectorizer.fit_transform(cleaned_texts)\n    \n    # Extract feature names (words)\n    feature_names = vectorizer.get_feature_names_out()\n    \n    # Convert sparse matrix to dense for output, and round to 8 decimal places\n    dense_matrix = tfidf_matrix.toarray().round(8)\n    \n    # Prepare the output as a list of tuples and a list of feature names\n    output_tuples = [tuple(row) for row in dense_matrix]\n    \n    return output_tuples, feature_names"}
{"task_id": "BigCodeBench/1101", "solution": "import subprocess\nimport os\nimport glob\nimport time\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - test_dir (str): Path to the directory for Python code(s) to be executed.\n\n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n    \"\"\"\n    script_times = {}\n    python_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    \n    for script in python_scripts:\n        start_time = time.time()\n        try:\n            subprocess.check_call(['python', script])\n            end_time = time.time()\n            script_times[os.path.basename(script)] = end_time - start_time\n        except subprocess.CalledProcessError as e:\n            print(f\"Error executing {script}: {e}\")\n            script_times[os.path.basename(script)] = \"Error\"\n        except Exception as e:\n            print(f\"An unexpected error occurred: {e}\")\n            script_times[os.path.basename(script)] = \"Unexpected Error\"\n    \n    return script_times"}
{"task_id": "BigCodeBench/1102", "solution": "import subprocess\nimport shlex\nfrom datetime import datetime\ndef task_func(script_path: str) -> dict:\n    start_time = datetime.now()\n    stdout = ''\n    stderr = ''\n    \n    try:\n        # Command to run R script\n        cmd = f'Rscript {script_path}'\n        args = shlex.split(cmd)\n        \n        # Running the command\n        process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        \n        # Decoding output\n        stdout = stdout.decode('utf-8')\n        stderr = stderr.decode('utf-8')\n        \n    except Exception as e:\n        stderr = str(e)\n    \n    end_time = datetime.now()\n    \n    return {\n        'Start Time': start_time.strftime('%Y-%m-%d %H:%M:%S'),\n        'End Time': end_time.strftime('%Y-%m-%d %H:%M:%S'),\n        'Stdout': stdout,\n        'Stderr': stderr\n    }"}
{"task_id": "BigCodeBench/1103", "solution": "import subprocess\nimport shutil\nimport os\ndef task_func(script_path: str, temp_dir: str) -> str:\n    \"\"\"\n    Execute a given Python code in a temporary directory.\n    \n    Parameters:\n    - script_path (str): The path to the Python code that needs to be executed.\n    - temp_dir (str): The path for the code to copy the Python code\n    \n    Returns:\n    - str: String indicating the success or failure of the script execution.\n    \"\"\"\n    # Create a temporary directory if it doesn't exist\n    if not os.path.exists(temp_dir):\n        os.makedirs(temp_dir)\n    \n    # Copy the script to the temporary directory\n    script_name = os.path.basename(script_path)\n    temp_script_path = os.path.join(temp_dir, script_name)\n    shutil.copy(script_path, temp_script_path)\n    \n    try:\n        # Execute the copied script using subprocess\n        subprocess.check_call(['python', temp_script_path])\n        return 'Script executed successfully!'\n    except subprocess.CalledProcessError:\n        return 'Script execution failed!'"}
{"task_id": "BigCodeBench/1104", "solution": "import subprocess\nimport os\nimport threading\ndef task_func(script_path: str, timeout: int = 60) -> str:\n    \"\"\"\n    Execute a specified python code with a given timeout. If the script execution exceeds the timeout, it is terminated.\n    \"\"\"\n    # Check if file exists\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"The file {script_path} does not exist.\")\n    \n    # Define the process\n    process = subprocess.Popen(['python', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    \n    def terminate_process():\n        \"\"\"Terminate the process if it's still running after the timeout.\"\"\"\n        if process.poll() is None:\n            process.terminate()\n            return \"Terminating process due to timeout.\"\n    \n    # Schedule the termination of the process after the given timeout\n    timer = threading.Timer(timeout, terminate_process)\n    timer.start()\n    \n    # Wait for the process to complete or be terminated\n    stdout, stderr = process.communicate()\n    timer.cancel()  # Cancel the timer if the process finished before the timeout\n    \n    # Check if the process was terminated by the timer\n    if process.returncode == -15:  # -15 is the signal for SIGTERM\n        return \"Terminating process due to timeout.\"\n    else:\n        return \"Script executed successfully.\""}
{"task_id": "BigCodeBench/1105", "solution": "import subprocess\nimport os\nimport time\nimport glob\ndef task_func(r_script_path: str, output_path: str, duration: int) -> (bool, str):\n    start_time = time.time()\n    output_file = os.path.join(output_path, \"*.csv\")  # Assuming the output is a csv file\n    \n    try:\n        subprocess.run([\"Rscript\", r_script_path], check=True, timeout=duration)\n    except subprocess.CalledProcessError as e:\n        return False, f\"R script execution failed with error: {e}\"\n    except subprocess.TimeoutExpired:\n        return False, 'R script execution timed out.'\n    \n    while (time.time() - start_time) < duration:\n        if glob.glob(output_file):\n            return True, 'File generated successfully within the specified duration.'\n        time.sleep(1)  # Check every second\n    \n    return False, 'File not generated within the specified duration.'"}
{"task_id": "BigCodeBench/1106", "solution": "from datetime import datetime\nfrom pathlib import Path\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(file_path):\n    \"\"\"\n    Determine the creation time of a file and convert it to a formatted string '%Y-%m-%d %H:%M:%S'.\n    \n    Parameters:\n    file_path (str): The path to the file.\n    \n    Returns:\n    str: The creation time of the file in the format '%Y-%m-%d %H:%M:%S'.\n    \n    Note:\n    On Windows, the creation time is used. On Unix, the modification time (os.path.getmtime) is used as a fallback because the creation time is not as directly accessible.\n    \"\"\"\n    path = Path(file_path)\n    \n    if os.name == 'nt':  # For Windows\n        return datetime.fromtimestamp(path.stat().st_ctime).strftime(DATE_FORMAT)\n    else:  # For Unix-based systems\n        return datetime.fromtimestamp(path.stat().st_mtime).strftime(DATE_FORMAT)"}
{"task_id": "BigCodeBench/1107", "solution": "from datetime import datetime\nimport pytz\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(unix_timestamp, target_timezone):\n    \"\"\"\n    Converts a Unix timestamp to a formatted date and time string in a specified timezone.\n\n    Parameters:\n    unix_timestamp (int): The Unix timestamp representing the number of seconds since the Unix Epoch (January 1, 1970, 00:00:00 UTC).\n    target_timezone (str): The string identifier of the target timezone (e.g., 'America/New_York').\n\n    Returns:\n    str: A string representing the date and time in the target timezone, formatted as '%Y-%m-%d %H:%M:%S'.\n    \"\"\"\n    # Convert Unix timestamp to datetime object in UTC\n    utc_dt = datetime.utcfromtimestamp(unix_timestamp)\n    \n    # Use pytz to convert the datetime object to the target timezone\n    target_tz = pytz.timezone(target_timezone)\n    target_dt = utc_dt.replace(tzinfo=pytz.utc).astimezone(target_tz)\n    \n    # Format the datetime object as a string\n    formatted_date = target_dt.strftime(DATE_FORMAT)\n    \n    return formatted_date\nunix_timestamp = 1609459200\ntarget_timezone = 'America/New_York'"}
{"task_id": "BigCodeBench/1108", "solution": "from collections import Counter\nimport re\ndef task_func(result):\n    \"\"\"\n    Get the most common values associated with the 'url' key in the dictionary list \"result.\"\n\n    Parameters:\n    result (list): A list of dictionaries.\n\n    Returns:\n    dict: A dictionary with the most common values and their counts.\n\n    Requirements:\n    - collections\n    - re\n\n    Example:\n    >>> result = [{\"hi\": 7, \"url\": \"http://google.com\"}, {\"url\": \"https://google.com\"}, {\"url\": \"http://www.cwi.nl\"}]\n    >>> task_func(result)\n    {'http://google.com': 1, 'https://google.com': 1, 'http://www.cwi.nl': 1}\n    \n    Note: The example provided in the question seems to misunderstand the task. The function is expected to find common values associated with 'url', but the example returns a count of occurrences of different URLs, which suggests a misunderstanding. The function implemented here follows the literal task of finding the most common values associated with a 'url' key, assuming each unique URL is a distinct value.\n    \"\"\"\n    # Extracting all values associated with 'url' key\n    urls = [d.get('url') for d in result if 'url' in d]\n    \n    # Using Counter to get counts of each url\n    url_counts = Counter(urls)\n    \n    # Return the dictionary with counts\n    return dict(url_counts)\nresult = [{\"hi\": 7, \"url\": \"http://google.com\"}, {\"url\": \"https://google.com\"}, {\"url\": \"http://www.cwi.nl\"}]"}
{"task_id": "BigCodeBench/1109", "solution": "import os\nfrom nltk.tokenize import word_tokenize\ndef task_func(file_path='File.txt'):\n    \"\"\"\n    Tokenizes a text file using the NLTK library. This function reads each line from the file, \n    breaks it into words or punctuation, and stores the tokens in a list.\n    \n    Parameters:\n    - file_path (str): The path to the text file. Defaults to 'File.txt'.\n    \n    Returns:\n    - list: A list of tokens.\n    \n    Requirements:\n    - os\n    - nltk.word_tokenize\n    \n    Examples:\n    >>> task_func('sample.txt')\n    ['Hello', ',', 'world', '!']\n    >>> task_func('data.txt')\n    ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog', '.']\n    \"\"\"\n    # Ensure the NLTK data is downloaded if not already (e.g., word_tokenize model)\n    try:\n        from nltk.corpus import stopwords\n        nltk.download('punkt')\n    except LookupError:\n        nltk.download('punkt')\n    \n    tokens = []\n    if os.path.exists(file_path):\n        with open(file_path, 'r', encoding='utf-8') as file:\n            for line in file:\n                # Tokenize each line and add to the tokens list\n                tokens.extend(word_tokenize(line))\n    else:\n        print(f\"The file {file_path} does not exist.\")\n    \n    return tokens"}
{"task_id": "BigCodeBench/1110", "solution": "from collections import Counter\nfrom operator import itemgetter\nimport itertools\ndef task_func(word_dict):\n    # Flatten the dictionary values into a single string to count all letters.\n    all_letters = ''.join(word_dict.values())\n    \n    # Use Counter to count the frequency of each letter.\n    letter_counts = Counter(all_letters)\n    \n    # Since the requirements mention the use of itertools and itemgetter,\n    # although not essentially needed for this task, we can demonstrate their use\n    # by sorting the items (letters and their counts) alphabetically by letter.\n    sorted_counts = sorted(letter_counts.items(), key=itemgetter(0))\n    \n    return dict(sorted_counts)\nword_dict = {'apple': 'a', 'banana': 'b', 'cherry': 'c', 'date': 'd', 'elderberry': 'e', 'fig': 'f', 'grape': 'g', 'honeydew': 'h'}"}
{"task_id": "BigCodeBench/1111", "solution": "from collections import Counter\nfrom operator import itemgetter\nANIMAL = ['cat', 'camel', 'cow', 'dog', 'elephant', 'fox', 'giraffe', 'hippo', 'iguana', 'jaguar']\ndef task_func(animal_dict):\n    # Remove keys that are not animals from the ANIMAL constant\n    valid_animal_dict = {k: v for k, v in animal_dict.items() if k in ANIMAL}\n    \n    # Concatenate all the letters from the valid animal names\n    all_letters = ''.join(valid_animal_dict.values())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(all_letters)\n    \n    # Sort the dictionary by frequency in descending order\n    sorted_counts = dict(sorted(letter_counts.items(), key=itemgetter(1), reverse=True))\n    \n    return sorted_counts\nanimal_dict = {'cat': 'c', 'dog': 'd', 'elephant': 'e', 'fox': 'f', 'giraffe': 'g', 'hippo': 'h', 'iguana': 'i', 'jaguar': 'j'}"}
{"task_id": "BigCodeBench/1112", "solution": "import csv\nimport os\nfrom datetime import datetime\nDATA = ['Temperature', 'Humidity', 'Pressure']\nRANGE = {\n    'Temperature': (-50, 50),\n    'Humidity': (0, 100),\n    'Pressure': (980, 1040)\n}\ndef task_func(file_name=\"data.csv\"):\n    \"\"\"\n    Generate a CSV file with weather data for each hour of the current day.\n\n    Parameters:\n    file_name (str): The path to the CSV file to be created.\n    \n    Returns:\n    str: The path to the created file.\n    \"\"\"\n    # Create or overwrite the file\n    with open(file_name, 'w', newline='') as csvfile:\n        csvwriter = csv.writer(csvfile)\n        # Write the header\n        csvwriter.writerow(DATA)\n        \n        # Generate data for each hour of the current day\n        current_day_hours = [datetime.now().replace(hour=i, minute=0, second=0, microsecond=0) for i in range(24)]\n        for _ in current_day_hours:\n            data_row = [random.randint(RANGE[data][0], RANGE[data][1]) for data in DATA]\n            csvwriter.writerow(data_row)\n    \n    return os.path.abspath(file_name)"}
{"task_id": "BigCodeBench/1113", "solution": "import csv\nimport collections\nimport io\ndef task_func(csv_file, emp_prefix='EMP$$'):\n    \"\"\"\n    Count the number of records for each employee in a CSV file.\n    \n    Parameters:\n    csv_file (str): The path to the CSV file. This parameter is mandatory.\n    emp_prefix (str): The prefix of the employee IDs. Default is 'EMP$$'.\n    \n    Returns:\n    dict: A dictionary with the count of records for each employee.\n    \"\"\"\n    employee_counts = collections.defaultdict(int)\n    \n    with open(csv_file, mode='r', encoding='utf-8') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            emp_id = row.get('EmployeeID', '').strip()\n            if emp_id.startswith(emp_prefix):\n                emp_id = emp_id[len(emp_prefix):]  # Remove the prefix\n                employee_counts[emp_id] += 1\n    \n    # Reformat keys to include the prefix\n    formatted_counts = {f'{emp_prefix}{k}': v for k, v in employee_counts.items()}\n    return formatted_counts"}
{"task_id": "BigCodeBench/1114", "solution": "from collections import defaultdict\nfrom random import randint\ndef task_func(dict1):\n    \"\"\"\n    Create a dictionary of employee data for departments starting with 'EMP$$'. \n    The keys are department codes and the values are lists of the salaries of employees in that department.\n    \n    Parameters:\n    dict1 (dict): A dictionary with department codes as keys and number of employees as values.\n    \n    Returns:\n    dict: A dictionary with department codes starting with 'EMP$$' as keys and lists of employee salaries as values.\n    \n    Requirements:\n    - collections\n    - random\n    \n    Example:\n    >>> import random\n    >>> random.seed(0)\n    >>> d = {'EMP$$1': 10, 'MAN$$1': 5, 'EMP$$2': 8, 'HR$$1': 7}\n    >>> emp_data = task_func(d)\n    >>> print(emp_data.keys())\n    dict_keys(['EMP$$1', 'EMP$$2'])\n    \"\"\"\n    # Initialize a default dictionary to store the salaries\n    emp_salaries = defaultdict(list)\n    \n    # Iterate over the given dictionary\n    for dept_code, num_employees in dict1.items():\n        # Check if the department code starts with 'EMP$$'\n        if dept_code.startswith('EMP$$'):\n            # Generate random salaries for each employee in the department and append to the list\n            for _ in range(num_employees):\n                emp_salaries[dept_code].append(randint(1000, 10000))  # Assuming salaries are between $1000 and $10000\n    \n    return dict(emp_salaries)  # Convert defaultdict back to a regular dict for the return value"}
{"task_id": "BigCodeBench/1115", "solution": "import random\nfrom string import ascii_uppercase\ndef task_func(dict1):\n    emp_ids = []\n    for dept_code, num_employees in dict1.items():\n        for _ in range(num_employees):\n            random_string = ''.join(random.choice(ascii_uppercase) for _ in range(5))\n            emp_ids.append(f\"{dept_code}{random_string}\")\n    return emp_ids"}
{"task_id": "BigCodeBench/1116", "solution": "import random\nimport statistics\ndef task_func(dict1):\n    \"\"\"\n    Calculate the mean, the median, and the mode(s) of the age of the employees in the department \"EMP$$.\" \n    Generate random ages for each employee within the range [22, 60].\n\n    Parameters:\n    dict1 (dict): A dictionary with department codes as keys and number of employees \n                  as values.\n\n    Returns:\n    tuple: A tuple of mean, median, and a list of mode(s) of employee ages.\n    \"\"\"\n    # Filter out employees from the \"EMP$$\" department"}
{"task_id": "BigCodeBench/1117", "solution": "import collections\nimport random\nimport json\nLEVELS = ['Junior', 'Mid', 'Senior']\ndef task_func(department_data):\n    \"\"\"\n    Generate a JSON object from employee data based on given department codes and their employee counts.\n    \"\"\"\n    result = {}\n    for department, count in department_data.items():\n        result[department] = [random.choice(LEVELS) for _ in range(count)]\n    return json.dumps(result, indent=2)"}
{"task_id": "BigCodeBench/1118", "solution": "import json\nimport csv\nimport requests\nfrom io import StringIO\nCSV_URL = 'https://example.com/data.csv'\nJSON_FILE = 'data.json'\ndef task_func(csv_url=CSV_URL, json_file_path=JSON_FILE):\n    \"\"\"\n    Downloads a CSV file from a specified URL, converts it to JSON format, and saves it to a specified file path.\n    \n    Parameters:\n    - csv_url (str): The URL from which the CSV data should be downloaded. Defaults to a constant CSV_URL.\n    - json_file_path (str): The file path where the JSON data should be saved. Defaults to a constant JSON_FILE.\n\n    Returns:\n    str: The path to the saved JSON file.\n    \"\"\"\n    # Download CSV data\n    response = requests.get(csv_url)\n    response_text = response.text\n    \n    # Convert CSV to list of dictionaries\n    csv_reader = csv.DictReader(StringIO(response_text))\n    data = list(csv_reader)\n    \n    # Save data as JSON\n    with open(json_file_path, 'w') as json_file:\n        json.dump(data, json_file, indent=4)\n    \n    return json_file_path"}
{"task_id": "BigCodeBench/1119", "solution": "import codecs\nimport random\nimport string\nimport hashlib\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \"\"\"\n    # Generate a random password\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(password_length))\n    \n    # Mix password with salt\n    mixed_password = password + salt\n    \n    # Hash the password using SHA256\n    hash_object = hashlib.sha256(mixed_password.encode())\n    hashed_password = hash_object.hexdigest()\n    \n    return hashed_password"}
{"task_id": "BigCodeBench/1120", "solution": "import re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n    url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    urls = url_pattern.findall(myString)\n    \n    geolocation_data = {}\n    \n    for url in urls:\n        domain = urllib.parse.urlparse(url).netloc\n        \n        try:\n            ip_address = requests.get(f'http://ip-api.com/json/{urllib.parse.quote(domain)}', params={'key': API_KEY}).json()\n            \n            if ip_address['status'] == 'success':\n                geolocation_data[domain] = ip_address\n            else:\n                geolocation_data[domain] = None\n        except requests.RequestException:\n            geolocation_data[domain] = None\n    \n    return geolocation_data"}
{"task_id": "BigCodeBench/1121", "solution": "import re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n    url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    urls = url_pattern.findall(myString)\n    \n    geolocation_data = {}\n    \n    for url in urls:\n        domain = urllib.parse.urlparse(url).netloc\n        \n        try:\n            ip_address = requests.get(f'http://ip-api.com/json/{urllib.parse.quote(domain)}', params={'key': API_KEY}).json()\n            \n            if ip_address['status'] == 'success':\n                geolocation_data[domain] = ip_address\n            else:\n                geolocation_data[domain] = None\n        except requests.RequestException:\n            geolocation_data[domain] = None\n    \n    return geolocation_data"}
{"task_id": "BigCodeBench/1122", "solution": "import re\nimport urllib.parse\nimport socket\ndef task_func(myString):\n    url_pattern = re.compile(r'https?://([^\\s]+)')\n    urls = url_pattern.findall(myString)\n    \n    domain_ip_dict = {}\n    for url in urls:\n        parsed_url = urllib.parse.urlparse(url)\n        domain = parsed_url.netloc\n        try:\n            ip_address = socket.gethostbyname(domain)\n            domain_ip_dict[domain] = ip_address\n        except socket.gaierror:\n            domain_ip_dict[domain] = None\n    \n    return domain_ip_dict"}
{"task_id": "BigCodeBench/1123", "solution": "import re\nimport urllib.parse\nimport ssl\nimport socket\ndef get_ssl_expiry_date(domain):\n    context = ssl.create_default_context()\n    with socket.create_connection((domain, 443)) as sock:\n        with context.wrap_socket(sock, server_hostname=domain) as sslsock:\n            cert = sslsock.getpeercert()\n            expiry_date_str = cert['notAfter']\n            # Convert the certificate expiry date from bytes to string and then to datetime\n            expiry_date = datetime.strptime(expiry_date_str.decode('utf-8'), \"%b %d %H:%M:%S %Y %Z\")\n            return expiry_date.strftime('%Y-%m-%d %H:%M:%S')\ndef task_func(myString):\n    url_pattern = re.compile(r'https://([\\w.-]+)', re.IGNORECASE)\n    urls = url_pattern.findall(myString)\n    \n    ssl_cert_expiry = {}\n    \n    for url in urls:\n        try:\n            domain = urllib.parse.urlparse(url).netloc\n            expiry_date = get_ssl_expiry_date(domain)\n            ssl_cert_expiry[domain] = expiry_date\n        except ssl.SSLError:\n            # Ignore SSL errors and continue with the next URL\n            continue\n        except Exception as e:\n            print(f\"An unexpected error occurred for {url}: {e}\")\n            continue\n            \n    return ssl_cert_expiry"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n    \"\"\"\n    Extracts a URL from a given string and retrieves the title of the web page from that URL. If no valid URL is found,\n    or the URL does not result in a successful web page fetch, returns an appropriate error message.\n    \"\"\"\n    # Extract URL from the string\n    url_match = re.search(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', myString)\n    if not url_match:\n        return \"No valid URL found in the provided string.\"\n\n    url = url_match.group()\n    \n    try:\n        # Send HTTP request\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx or 5xx)\n    except requests.RequestException as e:\n        return f\"Unable to fetch the content of the URL: {url}\"\n\n    # Parse the webpage content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    \n    # Find the title tag\n    title = soup.find('title')\n    if title is None:\n        return \"No title tag found in the webpage.\"\n    \n    # Return the title text\n    return title.text.strip()"}
{"task_id": "BigCodeBench/1125", "solution": "import re\nimport json\nimport requests\ndef task_func(myString, token):\n    \"\"\"\n    Extracts a URL from a string and sends it to a REST API via a POST request. The URL is included in the JSON payload,\n    and an authorization token is used in the headers for API access. If multiple URLs are present, the first one is used.\n\n    Parameters:\n    myString (str): The string from which to extract the URL.\n    token (str): The authorization token required for API access.\n\n    Returns:\n    dict: The response from the API, which varies based on the API's implementation.\n\n    Example:\n    >>> task_func('Please check: https://www.google.com', 'your_token_here')\n    {'message': 'URL received'}\n    \"\"\"\n    # Extract the first URL from the string\n    url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    match = url_pattern.search(myString)\n    if match:\n        url = match.group()\n    else:\n        return {\"error\": \"No URL found\"}\n\n    # Prepare the API request\n    api_url = \"http://your-api-url.com\"  # Replace with the actual API endpoint\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    payload = {\"url\": url}\n\n    # Send POST request\n    response = requests.post(api_url, json=payload, headers=headers)\n\n    # Return the API response\n    return response.json()"}
{"task_id": "BigCodeBench/1126", "solution": "import re\nimport hashlib\ndef task_func(input_str):\n    \"\"\"\n    Removes all special characters, punctuation marks, and spaces from the input string using a regular expression,\n    retaining only alphanumeric characters. Then hashes the cleaned string with SHA256.\n\n    Parameters:\n    input_str (str): The input string to be cleaned and hashed.\n\n    Returns:\n    str: The SHA256 hash of the cleaned string.\n    \"\"\"\n    # Remove special characters and spaces using regex\n    cleaned_str = re.sub(r'\\W+', '', input_str)\n    \n    # Hash the cleaned string with SHA256\n    sha256_hash = hashlib.sha256(cleaned_str.encode()).hexdigest()\n    \n    return sha256_hash"}
{"task_id": "BigCodeBench/1127", "solution": "import os\nimport re\nimport hashlib\ndef task_func(path, delimiter):\n    \"\"\"\n    Splits a file path by a specified delimiter, retaining the delimiter in the output, and computes the hash of each component if it is a file.\n    \"\"\"\n    # Ensure the path is absolute to handle relative paths correctly\n    absolute_path = os.path.abspath(path)\n    components = re.split(f'(?={re.escape(delimiter)})', absolute_path)\n\n    results = []\n    for component in components:\n        # Check if the component (considering it's a potential file path) is an actual file\n        if os.path.isfile(os.path.join(absolute_path.replace(delimiter, component, 1))):\n            # Compute the hash if it's a file\n            with open(os.path.join(absolute_path.replace(delimiter, component, 1)), 'rb') as file:\n                file_hash = hashlib.md5(file.read()).hexdigest()\n        else:\n            # If it's not a file, set the hash to None\n            file_hash = None\n        results.append((component, file_hash))\n\n    return results"}
{"task_id": "BigCodeBench/1128", "solution": "import json\nimport os\nimport hashlib\nimport base64\nimport time\ndef task_func(file_path, unknown_key):\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n    \n    # Extract the value using the unknown_key\n    value_to_hash = data.get('A', {}).get(unknown_key, [{}])[0].get('maindata', [{}])[0].get('Info', '')\n    \n    # Hash the value using SHA256\n    sha256_hash = hashlib.sha256(value_to_hash.encode()).digest()\n    \n    # Encode the hash to base64\n    base64_hash = base64.b64encode(sha256_hash).decode()\n    \n    # Create a timestamp for the new file name\n    timestamp = time.strftime('%Y%m%d_%H%M%S')\n    \n    # Define the new file path\n    new_file_path = os.path.join(os.getcwd(), f'hashed_data_{timestamp}.txt')\n    \n    # Write the hashed value to the new file\n    with open(new_file_path, 'w') as new_file:\n        new_file.write(base64_hash)\n    \n    return new_file_path"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n    \"\"\"\n    Parses a JSON string to find a URL associated with a specified key, downloads the file from the URL, \n    and saves it with a timestamped filename.\n    \"\"\"\n    # Parse JSON data\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        return \"Error: Invalid JSON data.\"\n\n    # Check if the key exists in the JSON data\n    if unknown_key not in data:\n        return f\"Error: Key '{unknown_key}' not found in JSON data.\"\n\n    url = data[unknown_key]\n\n    # Validate if it's a URL\n    if not url.startswith(('http://', 'https://')):\n        return f\"Error: The value of '{unknown_key}' is not a valid URL.\"\n\n    # Create timestamp\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n\n    # Set default save directory as current working directory if not provided\n    if save_dir is None:\n        save_dir = os.getcwd()\n\n    # Ensure the save directory exists\n    if not os.path.exists(save_dir):\n        os.makedirs(save_dir)\n\n    # Define the filename\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    file_path = os.path.join(save_dir, filename)\n\n    # Download and save the file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Check for HTTP errors\n        with open(file_path, 'wb') as f:\n            f.write(response.content)\n    except requests.RequestException as e:\n        return f\"Download error: {e}\"\n\n    return file_path"}
{"task_id": "BigCodeBench/1130", "solution": "import os\nimport hashlib\nimport json\nfrom pathlib import Path\ndef task_func(directory: str) -> str:\n    \"\"\"\n    Create SHA256 hashes for all files in the specified directory, including files in subdirectories, \n    and save these hashes in a JSON file named 'hashes.json' in the given directory.\n\n    Parameters:\n    - directory (str): The path to the directory containing files to be hashed.\n    \n    Returns:\n    str: The absolute path of the JSON file ('hashes.json') containing the hashes.\n    \"\"\"\n    directory_path = Path(directory)\n    hashes = {}\n\n    for path in directory_path.rglob('*'):\n        if path.is_file():\n            with path.open('rb') as file:\n                file_content = file.read()\n                file_hash = hashlib.sha256(file_content).hexdigest()\n                hashes[str(path.relative_to(directory_path))] = file_hash\n\n    with open(directory_path / 'hashes.json', 'w') as json_file:\n        json.dump(hashes, json_file, indent=4)\n\n    return str(directory_path / 'hashes.json')"}
{"task_id": "BigCodeBench/1131", "solution": "import sqlite3\nimport hashlib\nimport binascii\ndef task_func(salt, cursor):\n    if not isinstance(salt, str):\n        raise TypeError(\"Salt must be a string.\")\n    \n    # Assume the user table has a 'username' and 'password' column, and we're updating 'password'.\n    update_query = \"UPDATE users SET password = ? WHERE username = ?\"\n    \n    # Fetch all usernames to iterate over them\n    cursor.execute(\"SELECT username FROM users\")\n    usernames = cursor.fetchall()\n    \n    num_updated = 0\n    for user in usernames:\n        user = user[0]  # Depending on the fetch style, this might be needed to get the string out of a tuple\n        original_password = \"original_password_here\"  # Placeholder, replace with actual retrieval logic\n        hashed_password = hashlib.sha256((original_password + salt).encode()).hexdigest()\n        hashed_password_binary = binascii.unhexlify(hashed_password)\n        \n        cursor.execute(update_query, (hashed_password_binary, user))\n        num_updated += 1\n    \n    return num_updated"}
{"task_id": "BigCodeBench/1132", "solution": "import os\nimport hashlib\nimport base64\ndef task_func(password, PREFIX=\"ME\", SALT_LENGTH=16):\n    if SALT_LENGTH < 0:\n        raise ValueError(\"SALT_LENGTH cannot be negative\")\n    \n    salt = os.urandom(SALT_LENGTH)  # Generate a random salt\n    combined = (PREFIX + password + salt.decode()).encode()  # Concatenate prefix, password, and salt\n    hashed = hashlib.sha256(combined).digest()  # Hash the combined string using SHA256\n    encoded_hash = base64.b64encode(hashed)  # Encode the hashed result in base64\n    \n    return encoded_hash.decode()  # Return the base64 encoded hash as a string"}
{"task_id": "BigCodeBench/1133", "solution": "import json\nimport requests\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    The function to retrieve JSON data and save it as a .json file.\n    \"\"\"\n    # Construct the full URL for the API endpoint\n    full_url = f\"{API_URL}{endpoint}\"\n    \n    try:\n        # Fetch data from the API\n        response = requests.get(full_url)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes (4xx or 5xx)\n        \n        # Load the JSON data\n        data = response.json()\n        \n        # Generate the filename\n        filename = f\"{PREFIX}{endpoint}.json\"\n        \n        # Write the data to a JSON file\n        with open(filename, 'w') as file:\n            json.dump(data, file)\n        \n        return filename\n    \n    except requests.RequestException as e:\n        # Handle any errors that occur during the request\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    \n    except json.JSONDecodeError as e:\n        # Handle if the response is not a valid JSON\n        raise RuntimeError(f\"Error decoding JSON response: {e}\")\n    \n    except Exception as e:\n        # Handle any other unexpected exceptions\n        raise RuntimeError(f\"An unexpected error occurred: {e}\")"}
{"task_id": "BigCodeBench/1134", "solution": "import os\nimport glob\nimport hashlib\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    \n    # Ensure the target directory exists\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    created_files = []\n    \n    # Find all files in the source directory\n    for filename in glob.glob(os.path.join(source_dir, '*')):\n        if os.path.isfile(filename):\n            with open(filename, 'rb') as file:\n                content = file.read()\n                md5_hash = hashlib.md5(content).hexdigest()\n                modified_content = f\"{prefix}{md5_hash}\\n{content.decode('utf-8')}\"\n            \n            # Write to the target directory with the same filename\n            target_file_path = os.path.join(target_dir, os.path.basename(filename))\n            with open(target_file_path, 'w', encoding='utf-8') as target_file:\n                target_file.write(modified_content)\n            \n            created_files.append(target_file_path)\n    \n    return created_files"}
{"task_id": "BigCodeBench/1135", "solution": "import collections\nimport json\nimport requests\ndef task_func(user, API_URL = 'https://api.github.com/users/'):\n    \"\"\"\n    The function to retrieve and sort repositories by creation date.\n    \"\"\"\n    # Make a GET request to the GitHub API for the user's repositories\n    response = requests.get(f\"{API_URL}{user}/repos\")\n    \n    # Check if the request was successful\n    if response.status_code == 200:\n        # Parse the JSON response\n        repo_data = json.loads(response.text)\n        \n        # Extract repository names and creation dates\n        repo_info = [(repo['name'], repo['created_at']) for repo in repo_data]\n        \n        # Sort the repositories by creation date\n        repo_info.sort(key=lambda x: x[1])\n        \n        # Return only the names of the repositories\n        return [repo[0] for repo in repo_info]\n    else:\n        # Handle unsuccessful request\n        raise Exception(f\"Failed to fetch repositories. Status code: {response.status_code}\")"}
{"task_id": "BigCodeBench/1136", "solution": "import bs4\nimport requests\nimport re\nimport csv\ndef task_func(url=\"http://example.com\", csv_path=\"emails.csv\", \n          regex=r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b\", \n          headers={'User-Agent': 'Mozilla/5.0'}):\n    \"\"\"\n    Scrapes a web page to extract all email addresses using a specified regular expression pattern and writes them to a CSV file.\n    \"\"\"\n    # Send a GET request to the URL\n    response = requests.get(url, headers=headers)\n    \n    # Use BeautifulSoup to parse the HTML content\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    \n    # Find all text on the page\n    page_text = soup.get_text()\n    \n    # Use regex to find all email addresses\n    found_emails = re.findall(regex, page_text)\n    \n    # Write the found emails to a CSV file\n    with open(csv_path, 'w', newline='', encoding='utf-8') as file:\n        writer = csv.writer(file)\n        # Write the header\n        writer.writerow(['Emails'])\n        # Write the emails\n        writer.writerows([[email] for email in found_emails])\n    \n    return csv_path"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Extracts phone numbers from a given URL or local file and saves them to a specified file in JSON format.\n\n    Parameters:\n    - url (str): The URL of the webpage to scrape or the local file path prefixed with 'file://'.\n    - output_path (str): The path where the extracted phone numbers should be saved in JSON format.\n\n    Returns:\n    - list: A list of strings, each representing a found phone number.\n    \"\"\"\n    # Define a regular expression pattern for phone numbers\n    phone_pattern = re.compile(r'\\+?\\d{1,4}?[-. ]?\\(?\\d{1,3}?\\)?[-. ]?\\d{1,4}[-. ]?\\d{1,4}[-. ]?\\d{1,9}')\n    \n    phone_numbers = []\n    \n    try:\n        # Check if it's a URL\n        if 'file://' in url:\n            with open(url[7:], 'r', encoding='utf-8') as file:\n                content = file.read()\n        else:\n            response = requests.get(url)\n            content = response.text\n            \n        # Use BeautifulSoup to parse the content\n        soup = bs4.BeautifulSoup(content, 'html.parser')\n        \n        # Find all text within the HTML\n        all_text = soup.get_text()\n        \n        # Find matches and append to the list\n        for match in phone_pattern.findall(all_text):\n            phone_numbers.append(match)\n            \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return []\n    \n    # Save to JSON\n    with open(output_path, 'w') as json_file:\n        json.dump(phone_numbers, json_file)\n    \n    return phone_numbers"}
{"task_id": "BigCodeBench/1138", "solution": "import numpy as np\nimport itertools\ndef task_func(matrix):\n    # Flatten and sort the matrix\n    sorted_elements = np.sort(matrix).flatten()\n    \n    # Generate all unique combinations of two elements from the sorted array\n    unique_combinations = list(itertools.combinations(sorted_elements, 2))\n    \n    return sorted_elements, unique_combinations"}
{"task_id": "BigCodeBench/1139", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\ndef task_func(data):\n    # Convert the dictionary into a DataFrame\n    df = pd.DataFrame(data)\n    \n    # Split the dataset into features (X) and target variable (y)\n    X = df['Hours'].values.reshape(-1,1)\n    y = df['Scores'].values.reshape(-1,1)\n    \n    # Split the dataset into train and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    # Create a Linear Regression model\n    model = LinearRegression()\n    \n    # Train the model using the training sets\n    model.fit(X_train, y_train)\n    \n    # Predict the scores for the test set\n    y_pred = model.predict(X_test)\n    \n    # Calculate the mean squared error\n    mse = mean_squared_error(y_test, y_pred)\n    \n    return mse"}
